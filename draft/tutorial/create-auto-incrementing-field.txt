==========================================
Create an Auto-Incrementing Sequence Field
==========================================

.. default-domain:: mongodb

Synopsis
--------

In record documents, the field name ``_id`` is reserved for use as a
primary key; its value must be unique in the collection. This document
describes how to create an increasing sequence number to assign to the
``_id`` field.

.. warning::

   Generally in MongoDB, you would not use an auto-increment pattern
   for the ``_id`` field, or other fields, as this does not scale up
   well on large database clusters. Instead you would use an
   :term:`ObjectId <objectid>`.

Pattern 1: A Counter Collection and Function
--------------------------------------------

This pattern maintains a separate ``counters`` collection that tracks
the last number sequence. The ``_id`` field contains the sequence name
and the ``seq`` contains the last value of the sequence.

1. Insert into the ``counters`` collection, the initial value for the ``userid``:

   .. code-block:: javascript

      db.counters.insert( 
         { 
            _id: "userid",
            seq: 0
         }
      )

#. Create a ``getSequence`` function that accepts a ``name`` of the
   sequence. The function uses the :method:`findAndModify()
   <db.collection.findAndModify()` method to atomically increment the
   ``seq`` value and return this new value:

   .. code-block:: javascript

      function getSequence(name) {
         var ret = db.counters.findAndModify(
                {
                  query: { _id: name }, 
                  update: { $inc: { seq: 1 } }, 
                  new: true, 
                  upsert:true 
                }
         );
         
         return ret.seq;
      }

#. Use the ``getSequence()`` function during 
   :method:`insert() <db.collection.insert()>`.

   .. code-block:: javascript

      db.users.insert(
         {
           _id: getSequence("userid"), 
           name: "Sarah C." 
         }
      )

      db.users.insert(
         {
           _id: getSequence("userid"), 
           name: "Bob D." 
         }
      )

   Verify the results with :method:`find() <db.collection.find()>`:

   .. code-block:: javascript

      db.users.find()

   The ``_id`` fields contain incrementing sequence values:

   .. code-block:: javascript

      {
        _id : 1, 
        name : "Sarah C." 
      }
      { 
        _id : 2, 
        name : "Bob D." 
      }

Pattern 2: Optimistic Loop
--------------------------

This pattern uses optimistic concurrency *"insert if not present"*
loop. 

Create a function ``insertDocument`` that performs the *"insert if not
present"* loop. The function acts as a wrapper function around the
``insert() <db.collection.insert()>`` method and takes a ``doc`` and a
``targetCollection`` as its arguments.

Inside the loop:

1. Query the ``targetCollection`` for the document with the maximum
   ``_id`` value.

#. Determine the next sequence value for ``_id``:

   - Add ``1`` to the returned ``_id`` value if the returned cursor points to a document; else
   
   - Set to ``1`` if the returned cursor points to no document.

#. For the ``doc`` to insert, set its ``_id`` field to the calculated sequence value ``seq``.

#. Insert the ``doc`` into the ``targetCollection``.

#. If the insert operation errors with duplicate key, loop
   again.Otherwise, if the insert operation encounters some other error or
   if the operation succeeds, break out of the loop.

   .. code-block:: javascript

      function insertDocument(doc, targetCollection) {

          while( 1 ) {

              var cursor = targetCollection.find( {}, { _id: 1 } ).sort( { _id: -1 } ).limit(1);

              var seq = cursor.hasNext() ? cursor.next()._id + 1 : 1;

              doc._id = seq;

              targetCollection.insert(doc);
              
              var err = db.getLastErrorObj();
              
              if( err && err.code ) {
                  if( err.code == 11000 /* dup key */ )
                      continue;
                  else
                      print( "unexpected error inserting data: " + tojson( err ) );
              }

              break;
          }
      }

#. Use the ``insertDocument()`` function to perform an insert: 

   .. code-block:: javascript

      var myCollection = db.users2;
      
      insertDocument(
         {
           name: "Grace H." 
         },
         myCollection
      );
      
      insertDocument(
         {
           name: "Ted R."
         },
         myCollection
      )

   Verify the results with :method:`find() <db.collection.find()>`:

   .. code-block:: javascript

      db.users2.find()

   The ``_id`` fields contain incrementing sequence values:

   .. code-block:: javascript

      {
        _id: 1,
        name: "Grace H."
      }
      {
        _id : 2,
        "name" : "Ted R."
      }

In cases of extremely high concurrent insert rate on the collection,
there could potentially be a lot of looping.
