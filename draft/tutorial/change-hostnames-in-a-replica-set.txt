=================================
Change Hostnames in a Replica Set
=================================

.. default-domain:: mongodb

Synopsis
--------

For most :term:`replica sets <replica set>` the hostnames
[#hostnames-ips-dns]_ in the :data:`members[n].host` field never
change. However, in some cases you must migrate some or all host names
in a replica set as operational needs and organizations change. This
document presents two possible procedures for changing the hostnames
in the :data:`members[n].host` field, depending on your environments
availability requirements. You may: 

#. Make the configuration change without disrupting the availability
   of the replica set. While this ensures that your application will
   always be able to read and write data to the replica set, this
   procedure can take a long time and may incur downtime at the
   application layer. [#application-changes]_

   See :ref:`replica-set-change-hostname-no-downtime` for this
   procedure. 
   
#. Stop all members of the replica set at once running on the "old"
   hostnames or interfaces, make the configuration changes, and then
   start the members at the new hostnames or interfaces. While the set
   will be totally unavailable during the operation, the total
   maintenance window is shorter.

   See :ref:`replica-set-change-hostname-downtime` for this procedure.

.. seealso::

   - :doc:`/reference/replica-configuration`
   - :ref:`Replica Set Reconfiguration Process <replica-set-reconfiguration-usage>`
   - :func:`rs.conf()` and :func:`rs.reconfig()`

   And the following tutorials:

   - :doc:`/tutorial/deploy-replica-set`
   - :doc:`/tutorial/expand-replica-set`

.. [#hostnames-ips-dns] Always use resolvable hostnames
   for the value of the :data:`members[n].host` field in the replica
   set configuration to avoid confusion and complexity.

.. [#application-changes] You will have to configure your application
   so that they can connect to the replica set at both the old and new
   locations. This often requires a restart and reconfiguration at the
   application layer which may affect the availability of your
   application. This re-configuration is beyond the scope of this
   document, and makes the :ref:`second option <replica-set-change-hostname-downtime>`  
   preferable when you must change the hostnames of *all* members of
   the replica set at once.

Procedures
----------

.. _replica-set-change-hostname-no-downtime:

.. I think these section names can be better still.

Maintain Availability for Replica Set while Changing Hostnames
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Make one of the :term:`secondary <secondary>` members of the
   :term:`replica set` accessible at the new location. 
         
   This change may be as straightforward as creating a new DNS record,
   or may involve starting the :program:`mongo` instance on a new
   :setting:`port`.

#. In a :program:`mongo` shell session, call :func:`rs.reconfigure()` to
   reconfigure the set. Wait for the moved secondary to catch up.

#. Make sure that the clients are able to access the set at the new
   location.

#. Repeat the above steps for each non-:term:`primary` member of the set.

#. Use :dbcommand:`replSetStepDown` to step down the primary and run
   :func:`rs.reconfigure()` for the last time.

.. _replica-set-change-hostname-downtime:

Change All Hostnames in a Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Stop all members in the :term:`replica set`.

#. Restart each member *without* using the :option:`--replSet <mongod --replset>` 
   run-time option. Also run the :program:`mongod` on a different
   port, ``37017`` in this example, to prevent clients from connecting
   to this host while you preform maintenance. Start each
   :program:`mongod` with a command that resembles the following: 

   .. code-block:: sh

      mongod --dbpath /data/db/ --port 37017

#. Repeat the following sequence of operations for each member in the
   replica set:

   #. Open a :program:`mongo` shell connected to the
      :program:`mongod`, as follows:

      .. code-block:: sh

         mongo --port 27017

      Modify the :option:`--port <mongo --port>` option as needed
      depending on the :program:`mongod` instance's port.

   #. Edit the replica set configuration manually. The replica set
      configuration is the only document in the ``system.replset``
      collection in the ``local`` database. Consider the following
      sequence of commands to change the hostname to
      ``newHostName0:27017``:

      .. code-block:: javascript

         use local
         
         cfg = db.system.replset.findOne( { "_id": "rs0" } )
         
         cfg.members[0].host = "newHostName0:27017"
         
         db.system.replset.update( { "_id": "rs0" } , cfg )

   #. Stop the :program:`mongod` process.

#. After re-configuring all members of the set, start each
   :program:`mongod` instance using the :option:`--replSet <mongod --replset>` 
   option you normally would. This command would resemble the
   following: 

   .. code-block:: sh

      mongod --dbpath /data/db/ --port 27017 --replSet rs0

#. You can now connect to the one of the :program:`mongod` instances
   using the :program:`mongo` shell, and run the :func:`rs.satus()` to
   confirm that the set has reconfigured.
