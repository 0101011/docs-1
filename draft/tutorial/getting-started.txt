============================
Getting Started with MongoDB
============================

.. default-domain:: mongodb

This tutorial is a one-page introduction to creating a MongoDB database
and inserting and retrieving documents.

The tutorial assumes MongoDB is installed on a Linux or OS X operating
system and that the database server is running. For instructions on
installing MongoDB and starting the database server, see
:doc:`installation`.

The tutorial assumes you are accessing the database using a Linux or OS
X operation system.

The tutorial takes you through the following procedures:

.. contents::
   :backlinks: none
   :local:

Connect to the Database Server
------------------------------

This tutorial accesses the database server using the MongoDB JavaScript
shell. You also can access a database server using a MongoDB :doc:`driver
</applications/drivers>`, though this tutorial does not cover that approach.
To access a database through a driver, see :doc:`/applications/drivers`.

The MongoDB JavaScript shell is a full JavaScript shell. Any JavaScript
function, syntax, or class can be used in the shell. In addition,
MongoDB defines additional classes and global variables. For the full
API, see `<http://api.mongodb.org/js>`_.

To connect to the database server, do the following:

1. Open a command-line shell.

#. Start the MongoDB JavaScript shell by issuing the :program:`mongo` command:

   .. code-block:: sh

      mongo

   By default, :program:`mongo` looks for a database server listening on
   port ``27017``. To look for a server listening on a different port,
   use the ``--port`` option, as described in :doc:`/reference/mongo`.

#. Display the list of available databases by issuing the following
   command:

   .. code-block:: javascript

      show dbs

#. Switch to a new database called ``mydb`` by typing the following command:

   .. code-block:: javascript

      use mydb

#. Confirm that you are on the ``mydb`` database by typing the following
   command, which returns the name of the database you are on:

   .. code-block:: javascript

      db

   If you issue the ``show dbs`` command again you will not yet see
   ``mydb`` listed. MongoDB will not create the ``mydb`` database
   permanently until you insert data to the database, as described in
   the next procedure.

#. To get a list of help pages for the MongoDB JavaScript shell, issue
   the following command:

   .. code-block:: javascript

      help

Create and Add to a Collection
------------------------------

In this procedure, you insert documents into a new collection named ``things``
within the new database named ``mydb``. MongoDB does not require that
you predefine the collection or database. Instead, MongoDB creates both
the first time you insert data.

MongoDB databases are schema-free and do not require you to pre-define
structure. For more information on MongoDB's schema-free approach, see
:doc:`core/schema-free`.

1. Confirm that you are on the ``mydb`` database by typing the following
   command:

   .. code-block:: javascript

      db

#. If MongoDB does not return ``mydb``, issue the following command:

   .. code-block:: javascript

      use mydb

#. Create the ``j`` and ``t`` documents by entering the following sequence
   of commands:

   .. code-block:: javascript

      j = { name : "mongo" }
      t = { x : 3 }

#. Insert the ``j`` and ``t`` documents as documents in the collection
   ``things`` by entering the following sequence of commands:

   .. code-block:: javascript

      db.things.insert(j)
      db.things.insert(t)

   Once you insert the first document (in this case, the ``j``
   document), MongoDB creates both the ``mydb`` database and the ``things``
   collection.

#. Confirm that the ``things`` collection has been created by issuing
   the following command:

   .. code-block:: javascript

      show collections

   MongoDB lists the collections in ``mydb``, which in this case is just
   the one collection, `` things``.

#. Confirm that the documents have been inserted by querying the
   ``things`` collection using the :method:`find() <db.collection.find()>` method:

   .. code-block:: javascript

      db.things.find()

   MongoDB returns the following results. Your :term:`ObjectId` values
   will be different:

   .. code-block:: javascript

      { "_id" : ObjectId("4c2209f9f3924d31102bd84a"), "name" : "mongo" }
      { "_id" : ObjectId("4c2209fef3924d31102bd84b"), "x" : 3 }

   All MongoDB documents must have an ``_id`` field with a unique value.
   In this tutorial you do not explicitly create an ``_id`` field, so
   MongoDB creates one for you and assigns the field an :term:`ObjectId`.

   The two documents you inserted have different fields from each other.
   In practice, you usually give documents within a collection the same
   structure.

#. To add some more documents to this collection, issue the following
   ``for`` loop:

   .. code-block:: javascript

      for (var i = 1; i <= 20; i++) db.things.insert({x : 4, j : i})

#. Query the collection again by issuing the following command:

   .. code-block:: javascript

      db.things.find()

   MongoDB returns the first 20 documents in the collection. Your
   :term:`ObjectId` values will be different:

   .. code-block:: javascript

      { "_id" : ObjectId("4c2209f9f3924d31102bd84a"), "name" : "mongo" }
      { "_id" : ObjectId("4c2209fef3924d31102bd84b"), "x" : 3 }
      { "_id" : ObjectId("4c220a42f3924d31102bd856"), "x" : 4, "j" : 1 }
      { "_id" : ObjectId("4c220a42f3924d31102bd857"), "x" : 4, "j" : 2 }
      { "_id" : ObjectId("4c220a42f3924d31102bd858"), "x" : 4, "j" : 3 }
      { "_id" : ObjectId("4c220a42f3924d31102bd859"), "x" : 4, "j" : 4 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85a"), "x" : 4, "j" : 5 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85b"), "x" : 4, "j" : 6 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85c"), "x" : 4, "j" : 7 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85d"), "x" : 4, "j" : 8 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85e"), "x" : 4, "j" : 9 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85f"), "x" : 4, "j" : 10 }
      { "_id" : ObjectId("4c220a42f3924d31102bd860"), "x" : 4, "j" : 11 }
      { "_id" : ObjectId("4c220a42f3924d31102bd861"), "x" : 4, "j" : 12 }
      { "_id" : ObjectId("4c220a42f3924d31102bd862"), "x" : 4, "j" : 13 }
      { "_id" : ObjectId("4c220a42f3924d31102bd863"), "x" : 4, "j" : 14 }
      { "_id" : ObjectId("4c220a42f3924d31102bd864"), "x" : 4, "j" : 15 }
      { "_id" : ObjectId("4c220a42f3924d31102bd865"), "x" : 4, "j" : 16 }
      { "_id" : ObjectId("4c220a42f3924d31102bd866"), "x" : 4, "j" : 17 }
      { "_id" : ObjectId("4c220a42f3924d31102bd867"), "x" : 4, "j" : 18 }
      has more

#. To return the next set of documents, issue the iteration command:

   .. code-block:: javascript

      it

   MongoDB returns the following:

   .. code-block:: javascript

      { "_id" : ObjectId("4c220a42f3924d31102bd868"), "x" : 4, "j" : 19 }
      { "_id" : ObjectId("4c220a42f3924d31102bd869"), "x" : 4, "j" : 20 }

   When you issued the :method:`find() <db.collection.find()>` method,
   MongoDB created a "cursor" object that contained all the documents
   returned by the query. The shell iterated over the cursor and
   returned the first 20 documents. You then continued to iterate over
   the cursor when used the ``it`` command.

   The next procedure describes additional ways to work with the cursor
   object.

For more information on inserting new documents, see :ref:`crud-create-insert`.

Retrieve Data from a Collection
-------------------------------

When you query a collection, MongoDB returns a "cursor" object that
contains the results of the query. Cursor objects give you flexibility
in how to work with results.

The previous procedure showed how to display results by iterating over a
cursor using the ``it`` command. This procedure shows several other ways
to work with a cursor.

1. In the MongoDB JavaScript shell, query the ``things`` collection
   and assign the resultant cursor object to the ``c`` variable:

   .. code-block:: javascript

      var c = db.things.find()

#. To return the full result set, not limiting the results to 20
   documents, use a ``while`` loop to iterate over the ``c`` variable:

   .. code-block:: javascript

      while (c.hasNext()) printjson(c.next())

   The ``hasNext()`` function tells if there are any more documents to
   return. The ``next()`` function returns the next document. The
   ``printjson()`` method renders the document in a JSON-style format.

   MongoDB returns the following result. Your :term:`ObjectId` values
   will be different:

   .. code-block:: javascript

      { "_id" : ObjectId("4c2209f9f3924d31102bd84a"), "name" : "mongo" }
      { "_id" : ObjectId("4c2209fef3924d31102bd84b"), "x" : 3 }
      { "_id" : ObjectId("4c220a42f3924d31102bd856"), "x" : 4, "j" : 1 }
      { "_id" : ObjectId("4c220a42f3924d31102bd857"), "x" : 4, "j" : 2 }
      { "_id" : ObjectId("4c220a42f3924d31102bd858"), "x" : 4, "j" : 3 }
      { "_id" : ObjectId("4c220a42f3924d31102bd859"), "x" : 4, "j" : 4 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85a"), "x" : 4, "j" : 5 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85b"), "x" : 4, "j" : 6 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85c"), "x" : 4, "j" : 7 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85d"), "x" : 4, "j" : 8 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85e"), "x" : 4, "j" : 9 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85f"), "x" : 4, "j" : 10 }
      { "_id" : ObjectId("4c220a42f3924d31102bd860"), "x" : 4, "j" : 11 }
      { "_id" : ObjectId("4c220a42f3924d31102bd861"), "x" : 4, "j" : 12 }
      { "_id" : ObjectId("4c220a42f3924d31102bd862"), "x" : 4, "j" : 13 }
      { "_id" : ObjectId("4c220a42f3924d31102bd863"), "x" : 4, "j" : 14 }
      { "_id" : ObjectId("4c220a42f3924d31102bd864"), "x" : 4, "j" : 15 }
      { "_id" : ObjectId("4c220a42f3924d31102bd865"), "x" : 4, "j" : 16 }
      { "_id" : ObjectId("4c220a42f3924d31102bd866"), "x" : 4, "j" : 17 }
      { "_id" : ObjectId("4c220a42f3924d31102bd867"), "x" : 4, "j" : 18 }
      { "_id" : ObjectId("4c220a42f3924d31102bd868"), "x" : 4, "j" : 19 }
      { "_id" : ObjectId("4c220a42f3924d31102bd869"), "x" : 4, "j" : 20 }

#. You can treat a cursor like an array. To find the document at the
   fifth position (i.e. at subscript ``4``), issue the following command:

   .. code-block:: javascript

      var c = db.things.find()
      printjson(c[4])

   MongoDB returns the following:

   .. code-block:: javascript

      { "_id" : ObjectId("4c220a42f3924d31102bd858"), "x" : 4, "j" : 3 }

   When you use a cursor this way, MongoDB loads into RAM all the
   documents prior to the highest subscript queried (for example,
   subscript ``4`` above). For very large result sets, you can run out
   of memory. For queries that return large result sets, it is better to
   iterate over the cursor using any of the iteration approaches already
   described.

#. To convert the cursor to a true array, use ``toArray()``. Issue the
   following command to create an array ``a`` and to find the
   document at the sixth position:

   .. code-block:: javascript

      var a = db.things.find().toArray()
      a[5]

   MongoDB returns the following:

   .. code-block:: javascript

      { "_id" : ObjectId("4c220a42f3924d31102bd859"), "x" : 4, "j" : 4 }

For more information on the cursor object, see :ref:`crud-read-cursor`.

.. todo What should we do with this info:
   MongoDB cursors are not snapshots. Use explicit locking to perform
   a snapshotted query.

Query for Specific Documents
----------------------------

In this procedure, you query for specific documents in the ``things``
collection by passing a query document as a parameter to the
:method:`find() <db.collection.find()>` method.

A query document specifies the field-and-value pair that must be matched
for a document to be returned. For more information, see
:ref:`read-operations-query-document`.

To query for specific documents, do the following:

1. In the MongoDB JavaScript shell, query for all documents where the
   ``name`` field has a value of ``mongo`` by passing the
   ``{ name : "mongo" }`` query document as a parameter to the
   :method:`find() <db.collection.find()>` method:

   .. code-block:: javascript

      db.things.find( { name : "mongo" } )

   MongoDB returns the one document that fits this criteria. Your
   :term:`ObjectId` value will be different:

   .. code-block:: javascript

      { "_id" : ObjectId("4c2209f9f3924d31102bd84a"), "name" : "mongo" }

#. Query for all documents where ``x`` has a value of ``4`` by passing
   the ``{ x : 4 }`` query document as a parameter to :method:`find()
   <db.collection.find()>`:

   .. code-block:: javascript

      db.things.find( { x : 4 } )

   MongoDB returns the following. Your :term:`ObjectId` values will be
   different:

   .. code-block:: javascript

      { "_id" : ObjectId("4c220a42f3924d31102bd856"), "x" : 4, "j" : 1 }
      { "_id" : ObjectId("4c220a42f3924d31102bd857"), "x" : 4, "j" : 2 }
      { "_id" : ObjectId("4c220a42f3924d31102bd858"), "x" : 4, "j" : 3 }
      { "_id" : ObjectId("4c220a42f3924d31102bd859"), "x" : 4, "j" : 4 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85a"), "x" : 4, "j" : 5 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85b"), "x" : 4, "j" : 6 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85c"), "x" : 4, "j" : 7 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85d"), "x" : 4, "j" : 8 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85e"), "x" : 4, "j" : 9 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85f"), "x" : 4, "j" : 10 }
      { "_id" : ObjectId("4c220a42f3924d31102bd860"), "x" : 4, "j" : 11 }
      { "_id" : ObjectId("4c220a42f3924d31102bd861"), "x" : 4, "j" : 12 }
      { "_id" : ObjectId("4c220a42f3924d31102bd862"), "x" : 4, "j" : 13 }
      { "_id" : ObjectId("4c220a42f3924d31102bd863"), "x" : 4, "j" : 14 }
      { "_id" : ObjectId("4c220a42f3924d31102bd864"), "x" : 4, "j" : 15 }
      { "_id" : ObjectId("4c220a42f3924d31102bd865"), "x" : 4, "j" : 16 }
      { "_id" : ObjectId("4c220a42f3924d31102bd866"), "x" : 4, "j" : 17 }
      { "_id" : ObjectId("4c220a42f3924d31102bd867"), "x" : 4, "j" : 18 }
      { "_id" : ObjectId("4c220a42f3924d31102bd868"), "x" : 4, "j" : 19 }
      { "_id" : ObjectId("4c220a42f3924d31102bd869"), "x" : 4, "j" : 20 }

#. Query for all documents where ``x`` has a value of ``4``, as in the
   last step, but this time return only the value of ``j``. To do this,
   you add the ``{ j : true }`` document as a second parameter to
   :method:`find() <db.collection.find()>`. The document lists the
   fields to be returned. Issue the following command:

   .. code-block:: javascript

      db.things.find( { x : 4 } , { j : true } )

   MongoDB returns the following results, excluding the ``x`` field. The
   ``_id`` field is included by default:

   .. code-block:: javascript

      { "_id" : ObjectId("4c220a42f3924d31102bd856"), "j" : 1 }
      { "_id" : ObjectId("4c220a42f3924d31102bd857"), "j" : 2 }
      { "_id" : ObjectId("4c220a42f3924d31102bd858"), "j" : 3 }
      { "_id" : ObjectId("4c220a42f3924d31102bd859"), "j" : 4 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85a"), "j" : 5 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85b"), "j" : 6 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85c"), "j" : 7 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85d"), "j" : 8 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85e"), "j" : 9 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85f"), "j" : 10 }
      { "_id" : ObjectId("4c220a42f3924d31102bd860"), "j" : 11 }
      { "_id" : ObjectId("4c220a42f3924d31102bd861"), "j" : 12 }
      { "_id" : ObjectId("4c220a42f3924d31102bd862"), "j" : 13 }
      { "_id" : ObjectId("4c220a42f3924d31102bd863"), "j" : 14 }
      { "_id" : ObjectId("4c220a42f3924d31102bd864"), "j" : 15 }
      { "_id" : ObjectId("4c220a42f3924d31102bd865"), "j" : 16 }
      { "_id" : ObjectId("4c220a42f3924d31102bd866"), "j" : 17 }
      { "_id" : ObjectId("4c220a42f3924d31102bd867"), "j" : 18 }
      { "_id" : ObjectId("4c220a42f3924d31102bd868"), "j" : 19 }
      { "_id" : ObjectId("4c220a42f3924d31102bd869"), "j" : 20 }

#. MongoDB lets you retrieve one document at a time via the
   :method:`findOne() <db.collection.findOne()>` method. The
   :method:`findOne() <db.collection.findOne()>` method takes all the
   same parameters as :method:`find() <db.collection.find()>`, but
   instead of returning a cursor, it returns a document.

   To retrieve one document from the ``things`` collection, issue the
   following command:

   .. code-block:: javascript

      db.things.findOne()

For more information on querying for documents, see the
:doc:`/applications/read` documentation.

Limit the Number of Documents in the Result Set
-----------------------------------------------

You can specify the maximum number of documents a query should return.
This can greatly improve performance as it limits the work the database
does and limits the amount of data returned over the network.

To specify the maximum number of documents in the result set, use the
:method:`limit() <cursor.limit()>` method.

Issue the following command:

.. code-block:: javascript

   db.things.find().limit(3)

MongoDB returns the following result. Your :term:`ObjectId` values will
be different:

.. code-block:: javascript

   { "_id" : ObjectId("4c2209f9f3924d31102bd84a"), "name" : "mongo" }
   { "_id" : ObjectId("4c2209fef3924d31102bd84b"), "x" : 3 }
   { "_id" : ObjectId("4c220a42f3924d31102bd856"), "x" : 4, "j" : 1 }

What Next
---------

To learn more about manipulating the documents in a database, see
:ref:`crud-operations`.
