=================================================
Expire Least Recently Used Data from a Collection
=================================================

.. default-domain:: mongodb

.. versionadded:: 2.2

Least recently used, or LRU data retention patterns are used in simple
data caches, or substitutes for stateless systems and are useful in
number of situtions where simple TTL collections are not
appropriate.

This pattern presents some of these cases and proides a method for
maintaining a collection of documents in MongoDB where the LRU
documents are periodically removed from the collection using the TTL
collection facility.

Use Case
--------

- Online shopping carts

  An online store gives shoppers a virtual cart. The state of each
  shopper's cart is maintained on the store's database. The cart
  information is updated whenever the shopper is active at the store,
  Once the shopper completes payment, the cart info is removed from
  the server. If shoppers abandon their carts, contents of the cart
  are removed for other shoppers to purchase.

- Authentication sessions. 

  An app stores session information in database, and validates current
  users' session  when servicing requests.

- Rendered page cache. 

  Assemble pages from database content and store rendered page in a
  collection. The page should be stored as long as the page is being
  accessed by others. If not, the page should be deleted.

  The pages are assembled from fact database queries and the
  amalgamated pages are stored on the content database.

- Draft comment 

  Web site comments are saved on the server temporarily until the
  visitor submits. If the visitor does not submit, then the comment
  will be cleared from the server.

  Comments are stored in a single collection and any items with a
  draft time will be monitored for updates. If the draft comments are
  not updated for a period, MongoDB deletes the draft from the collection.

.. TODO eliminate 'lists' too many. focus on 'collection'
You need to keep a current list of items, which anything not current
is removed from the list. At any point in time, the list only contains
current items. This is useful for applications that require access
control such as web-based E-mail, internet banking, personalized web
services, user account verification, etc.

.. TODO rewrite - to be session / comment draft collection
For example, you want keep a list of users that are actively using the
system so they do not have to repeatedly authenticate. Any users who
are not authorized  use the system for a long time will automatically be logged out
and must reauthenticate.


.. TODO move stuff from down here up to use case (less talking here,
.. just points for requirements is fine)
Use MongoDB's TTL collection to manage the 'garbage clean up' for this
list. Your application will only insert new entries, query the
collection to verify items on the list, and update items as
needed. Any items not updated for a specified period will be deleted
by the :program:`mongod` process.

For example, the application will ensure authentication and insert
logged in users into the list. The application will check the list
when a user accesses the system, if the user is on the list, provide
access and update their access time entry, otherwise, force the user
to reauthenticate. MongoDB will maintain the list and delete any
entries, which have not been updated.

Solution
--------

Requirements:

- MongoDB version 2.2 or greater.
- Online store application that connects to MongoDB.

Process:

#. Set up a MongodB TTL collection.
#. Application to insert, access, and update MongoDB collection.

Pattern
-------

.. TODO find a better name for cartInfo

For this example, the logged in user list will be named: ``cartInfo``
to store, record, and update users who are authorized to use the
system.

An ``storeCarts`` collection could look like the following:

.. code-block:: javascript

   { "_id" : ObjectId("..."), 
     "cartID" : 100, 
     "lastChange" : ISODate("2012-08-02T17:47:15.275Z"),
     "cartItems": [ soap, sugar, milk ] }

   { "_id" : ObjectId("..."), 
     "cartID" : 101,
     "lastChange" : ISODate("2012-08-02T17:47:15.275Z"),
     "cartItems": [ milk, bread, eggs ] }

   { "_id" : ObjectId("..."), 
     "cartID" : 102,
     "lastChange" : ISODate("2012-08-02T17:47:15.275Z"),
     "cartItems": [ sugar, flour, eggs ] }

The above can be created by using the following commands:

.. code-block:: javascript

   > db.store.insert( { cartID: 100, lastChange: new
     ISODate(), "cartItems": [ soap, sugar, milk ] })

   > db.store.insert( { cartID: 101, lastChange: new
     ISODate(), "cartItems": [ milk, bread, eggs ] } ) 

   > db.store.insert( { cartID: 102, lastChange: new
     ISODate(), "cartItems": [ sugar, flour, eggs ] } })

Set up a TTL collection
~~~~~~~~~~~~~~~~~~~~~~~

Set up MongoDB with a TTL index to delete any carts that are older
than 86,400 seconds or 24 hours:
 
.. code-block:: javascript

   db.store.ensureIndex( { lastChange: 1 }, { expireAfterSeconds: 86400 } )

``lastChange`` is used to determine which items to be deleted. If this
field contains an entry older than 86,400 seconds, :program:`mongod`
will delete it from the collection.

Application response
~~~~~~~~~~~~~~~~~~~~

When the shopper adds or removes items from their cart, update the
document using:

.. code-block:: javascript

   db.store.update( { cartID: 101 }, { $set: { lastChange: new
   ISODate(), items: [ ... ] } } )

It is essential to not only update the ``items`` field, but to update
``lastChange`` with the current time. This field is used by
:program:`mongod` to keep track of the document's age.

Overall result
~~~~~~~~~~~~~~

A sample Least Recently Used TTL pattern has been demonstrated. TTL
collections have many application areas, when used with the proper
application support, they can be applied to LRU
situations. Fundamentally, setting up a LRU collection is no different
than TTL, but proper application action are necessary to maintain
expected results.
