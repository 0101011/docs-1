=================================================
Expire Least Recently Used Data from a Collection
=================================================

.. default-domain:: mongodb

.. versionadded:: 2.2

Least recently used, or LRU data retention patterns are used in simple
data caches, or substitutes for stateless systems and are useful in
number of situtions where simple TTL collections are not
appropriate.

This pattern presents some of these cases and proides a method for
maintaining a collection of documents in MongoDB where the LRU
documents are periodically removed from the collection using the TTL
collection facility.

Use Case
--------

- Online shopping carts

  An online store gives shoppers a virtual cart. The state of each
  shopper's cart is maintained on the store's database. The cart
  information is updated whenever the shopper is active at the store,
  Once the shopper completes payment, the cart info is removed from
  the server. If shoppers abandon their carts, contents of the cart
  are removed for other shoppers to purchase.

- Authentication sessions. 

  An app stores session information in database, and validates current
  users' session  when servicing requests.

- Rendered page cache. 

  Assemble pages from database content and store rendered page in a
  collection. The page should be stored as long as the page is being
  accessed by others. If not, the page should be deleted.

  The pages are assembled from fact database queries and the
  amalgamated pages are stored on the content database.

- 

.. TODO eliminate 'lists' too many. focus on 'collection'
You need to keep a current list of items, which anything not current
is removed from the list. At any point in time, the list only contains
current items. This is useful for applications that require access
control such as web-based E-mail, internet banking, personalized web
services, user account verification, etc.

.. TODO rewrite - to be session / comment draft collection
For example, you want keep a list of users that are actively using the
system so they do not have to repeatedly authenticate. Any users who
are not authorized  use the system for a long time will automatically be logged out
and must reauthenticate.


.. TODO move stuff from down here up to use case (less talking here,
.. just points for requirements is fine)
Use MongoDB's TTL collection to manage the 'garbage clean up' for this
list. Your application will only insert new entries, query the
collection to verify items on the list, and update items as
needed. Any items not updated for a specified period will be deleted
by the :program:`mongod` process.

For example, the application will ensure authentication and insert
logged in users into the list. The application will check the list
when a user accesses the system, if the user is on the list, provide
access and update their access time entry, otherwise, force the user
to reauthenticate. MongoDB will maintain the list and delete any
entries, which have not been updated.

Solution
--------

Requirements:

- MongoDB version 2.2 or greater.
- Application to authenticate users, and is able to access, insert,
  and update entries in the MongoDB collection.

Process:

#. Set up a MongodB TTL collection.
#. Application to insert, access, and update MongoDB collection.

Pattern
-------

For this example, the logged in user list will be named: ``authLog``
to store, record, and update users who are authorized to use the system.

An ``authLog`` collection could look like the following:

.. code-block:: javascript

   { "_id" : ObjectId("..."), "userID" : 100, "accessTime" : ISODate("2012-08-02T17:47:15.275Z") }
   { "_id" : ObjectId("..."), "userID" : 101, "accessTime" : ISODate("2012-08-02T17:47:27.764Z") }
   { "_id" : ObjectId("..."), "userID" : 102, "accessTime" : ISODate("2012-08-02T17:47:34.788Z") }

The ``authLog`` collection above can be created by using the following commands:

.. code-block:: javascript

   > db.authLog.insert( { userID: 100, accessTime: new ISODate() })
   > db.authLog.insert( { userID: 101, accessTime: new ISODate() })
   > db.authLog.insert( { userID: 102, accessTime: new ISODate() })

The field used to record time, ``accessTime`` in the above example,
must be an ISODate, otherwise, MongoDB's TTL functionality will not
work properly.

.. TODO kill functionality 

Set up a TTL collection
~~~~~~~~~~~~~~~~~~~~~~~

Set up MongoDB to index the collection's ``accessTime`` field and
delete any items that have ``accessTime`` entries older than 300
seconds or five minutes by:
 
.. code-block:: javascript

   db.authLog.ensureIndex( { accessTime: 1 }, { expireAfterSeconds: 300 } )

Any items in the ``authLog`` collection older than 300 seconds will be
automatically removed by the :program:`mongod` instance. The removal
duration can be adjusted by specifying a different value for
``expireAfterSeconds``.

Application response
~~~~~~~~~~~~~~~~~~~~

Active application input for the ``authLog`` collection is required
for new entries, verifying entries, and updating entries.

For new entries, such as after successful user authentication, the
application must insert into the ``authLog`` collection using the
following command:

.. code-block:: javascript

   > db.authLog.insert( { userID: 103, accessTime: new ISODate() })

To verify user authentication, the application can accomplish this by
using operation:

.. TODO rewrite without 'this'

.. code-block:: javascript

   > db.authLog.find( { userID: 101 } )

If the operation result is similar to:

.. code-block:: javascript

   { "_id" : ObjectId("..."), "userID" : 101, "accessTime" : ISODate("2012-08-02T17:47:27.764Z") }

The user is currently authenticated and may access the system. If the
result is empty, the user is not authenticated and needs to
reauthenticate.

To update entries for authenticated users, update the ``accessTime``
entries using the following command:

.. code-block:: javascript

   db.authenticationLog.update( { userID: 101 }, { $set: { accessTime: new ISODate() } } )

This will set the ``accessTime`` field for ``userID`` 101 to the current
time. MongoDB will not delete this entry because its ``accessTime``
field is now newer than 300 seconds.

With TTL enabled, the :program:`mongod` instance will scan the
collection every minute and remove any user entries that have an
``accessTime`` greater than five minutes or 300 seconds. Any items
that have been updated within 300 seconds will remain in the collection.

Overall result
~~~~~~~~~~~~~~

.. TODO make better summary
The application program only needs to insert new entries, verify and
update time on existing entries. MongoDB will maintain a list of
authenticated users on the list and delete any old entries.
