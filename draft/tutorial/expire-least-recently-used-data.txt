=================================================
Expire Least Recently Used Data from a Collection
=================================================

.. default-domain:: mongodb

.. versionadded:: 2.2

Use Case
--------

There are some cases to keep :term:`documents <document>` in a
collection that has been recently updated or accessed, while all other
older documents in the collection should be deleted, such as:

- client & server states (i.e. web sessions, client state information)
- document caches (i.e. Emails, SMS)
- particular server logs (i.e. active servers)

Solution
--------

Create a special index on the collection using the
``expireAfterSeconds`` property with the desired duration. Any updates
to documents should update the date field of the collection to keep
the document in the collection.

Create Index
~~~~~~~~~~~~

To create an index on the date field of the collection with the
``expireAfterSeconds`` property. The prototype form is:

.. code-block:: javascript

   db.collection.ensureIndex( { <date field> : 1 }, { expireAfterSeconds: <duration> } )

.. note::

    The date field indexed must be a :term:`BSON date type <BSON types>`.

Any documents in the collection that have a date field older than the
duration will be removed from the collection.

Update Entry
~~~~~~~~~~~~

To update the date field with the current date and time, use the
:func:`find() <db.collection.update()>` method with the
:operator:`$set` operator. The prototype form is:

.. code-block:: javascript

   db.collection.update( { <field>: <key> }, { $set: { <date field>: new ISODate() } } )

All items that have a date field within the duration will remain in
the collection while all other documents will be removed.

Pattern
-------

The access time for a ``token`` is recorded in the ``tokenLog``
collection under the ``accessTime`` field. Any tokens that have not
been accessed over 30 minutes should be removed from the collection.

The ``tokenLog`` collection can be created using the following commands:

.. code-block:: javascript

   > db.tokenLog.insert( { token: 100, accessTime: new ISODate() })
   > db.tokenLog.insert( { token: 101, accessTime: new ISODate() })
   > db.tokenLog.insert( { token: 102, accessTime: new ISODate() })

and the collection would be:

.. code-block:: javascript

   { "_id" : ObjectId("..."), "token" : 100, "accessTime" : ISODate("2012-08-02T17:47:15.275Z") }
   { "_id" : ObjectId("..."), "token" : 101, "accessTime" : ISODate("2012-08-02T17:47:27.764Z") }
   { "_id" : ObjectId("..."), "token" : 102, "accessTime" : ISODate("2012-08-02T17:47:34.788Z") }

To keep the most recently accessed ``token`` in the last 30 minutes,
create an index on this collection by using command:

.. code-block:: javascript

   db.tokenLog.ensureIndex( { accessTime: 1 }, { expireAfterSeconds: 30*60 } )

Any ``token`` documents that are older than 30 minutes will be removed from the collection.

For each ``token`` document that is accessed again, update only the
``accessTime`` field with the new date. For example, if
``token:101`` is accessed again, update the ``accessTime`` field of ``token:101`` by
using the following command:

.. code-block:: javascript

   db.tokenLog.update( { "token": 101 }, { $set: { accessTime: new ISODate() } } )

All other entries that have not been updated with a newer
``accessTime`` will automatically be removed from the collection.
