=======================================================
Control Access to MongoDB Instances with Authentication
=======================================================

.. default-domain:: mongodb

MongoDB provides a basic authentication system, that you can enable
with the :setting:`auth` and :setting:`keyFile` configuration
settings. [#cli-options]_ See the :ref:`authentication
<security-authentication>` section of the :doc:`/authentication/security`
document.

This document contains an overview of all operations related to
authentication and managing a MongoDB deployment with authentication.

.. see:: The :ref:`configuration-security` section of the
   :doc:`/administration/configuration` document for more information
   on configuring authentication.

.. [#cli-options] Use the :option:`--auth <mongod --auth>`
   :option:`--keyFile <mongod --keyFile>` options on the command
   line.

Adding Users
------------

When setting up authentication for the first time you must either: 

#. add at least one user to the ``admin`` database before starting
   the :program:`mongod` instance with :setting:`auth`. 

#. add the first user to the ``admin`` database when connected to the
   :program:`mongod` instance from a ``localhost``
   connection. [#sharded-localhost]_

Begin by setting up the first administrative user for the
:program:`mongod` instance. 

Add an Administrative User
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. admonition:: About administrative users

   Administrative users are those users that have "normal" or read and
   write access to the ``admin`` database. 

If this is the first administrative user, connect to the
:program:`mongod` on the ``localhost`` interface using the
:program:`mongo` shell. Then, issue the following command sequence to
switch to the ``admin`` database context and add the administrative
user:

.. code-block:: javascript

   use admin
   db.addUser("<username>", "<password>") 

Replace ``<username>`` and ``<password>`` with the credentials for
this administrative user.

Add a Normal User to a Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To add a user with read and write access to a specific database, in
this example the ``records`` database, connect to the
:program:`mongod` instance using the :program:`mongo` shell, and issue
the following sequence of operations:

.. code-block:: javascript

   use records
   db.addUser("<username>", "<password>") 

Replace ``<username>`` and ``<password>`` with the credentials for
this user.

Add a Read Only User to a Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To add a user with read and write access to a specific database, in
this example the ``records`` database, connect to the
:program:`mongod` instance using the :program:`mongo` shell, and issue
the following sequence of operations:

.. code-block:: javascript

   use records
   db.addUser("<username>", "<password>", true) 

Replace ``<username>`` and ``<password>`` with the credentials for
this user.

Administrative Access in MongoDB
--------------------------------

Although administrative accounts have access to all databases, these
users must authenticate against the ``admin`` database before changing
contexts to a second database, as in the following example: 

.. example:: 

   Given the ``superAdmin`` user with the password ``Password123``,
   and access to the ``admin``.
   
   The following operation in the :program:`mongo` shell will succeed: 

   .. code-block:: javascript

      use admin
      db.auth("superAdmin", "Password123")

   However, the following operation will fail: 

   .. code-block:: javascript

      use test
      db.auth("superAdmin", "Password123")

.. note::

   If you have authenticated to the ``admin`` database as normal, read
   and write, user; logging into a *different* database as a read only
   user will *not* invalidate the authentication to the ``admin``
   database. In this situation, this client will be able to read and
   write data to this second database.

Authentication on Localhost
---------------------------

The behavior of :program:`mongod` running with :setting:`auth`, when
connecting from a client over the localhost interface (i.e. a client
running on the same system as the :program:`mongod`,) varies slightly
between versions 2.0 and before and 2.2 and after. Consider these
behaviors:

- In version 2.0, and before, authentication is not enforced for any
  user connecting over the localhost interface, regardless of the
  configuration of the :program:`mongod` instance.
  
- In version 2.2, if :program:`mongod` is running with :setting:`auth`
  then user connecting over the localhost interface must
  authenticate.

  *However,* if the :program:`mongod` does *not* have any users in the
  ``admin`` database, the user may access the entire :program:`mongod`
  instance without authenticating. 

  The following table outlines the behavior of :program:`mongod`
  instances running with :setting:`auth` enabled. 

  .. list-table::
     :widths: 25 25 50
     :header-rows: 1
   
     * - Connection	
       - Admin Users Exist
       - Authentication Required on Accessing Database
     * - Localhost
       - Yes
       - Yes
     * - Localhost
       - No
       - No
     * - Remote
       - Yes
       - Yes
     * - Remote
       - No
       - Yes

Password Hashing Insecurity
---------------------------

In version 2.2.* and earlier, consider the following scenario:

- A malicious user “Eve” and another user "Alice" both have read and write
  access to the same database (``db1``).

- Alice also has read and write access to a second database (``db2``).

- Alice has used the same password on both databases.

Given this scenario, Eve can take the hash of Alice’s password from the
``system.users`` collection on ``db1`` and use it to log in as Alice on
``db2``. Consider the following example:

.. example::

   Eve connects to the ``db1`` database and views the ``system.users``
   collection:

   .. code-block:: sh

      mongo <host>/db1 -u eve -p test

   .. code-block:: javascript

      db.system.users.find()

   .. code-block:: javascript

      { "_id": ObjectId("5074202e032a960d16f4394e"), "user": "alice", "readOnly": false, "pwd": "ac2061b4a08ef8f2d60a07dc18ab4a0a" }
      { "_id": ObjectId("507420ba032a960d16f43951"), "user": "eve", "readOnly": false, "pwd": "5dcc2819b97e68d5cfe51da6cae8a7f6" }

   Alice has read and write accounts on both ``db1`` and ``db2`` and
   also has access on the ``admin`` database. Consider the following:

   .. code-block:: javascript

      use admin
      db.auth("alice", "pass")

      db.system.users.find()

   This operation returns the following document:

   .. code-block:: javascript

      { "_id": ObjectId("50742045032a960d16f43950"), "user": "alice", "readOnly": false, "pwd": "ac2061b4a08ef8f2d60a07dc18ab4a0a" }

Configuration Considerations for Authentication
-----------------------------------------------

The following sections, outline practices for enabling and managing
authentication with specific MongoDB deployments: 

- :ref:`replica-set-security`
- :ref:`sharding-security` 

Generate a Key File
-------------------

Use the following command at the system shell to generate psudo-random
content for a key file: 

.. code-block:: sh

   openssl rand -base64 753

.. note:: 

   Be aware that MongoDB strips whitespace characters (e.g. ``x0d``,
   ``x09``, and ``x20``,) for cross-platform convenience. As a result,
   the following keys are identical:

   .. code-block:: sh

      $ echo -e "my secret key" > key1
      $ echo -e "my secret key\n" > key2
      $ echo -e "my    secret    key" > key3
      $ echo -e "my\r\nsecret\r\nkey\r\n" > key4
