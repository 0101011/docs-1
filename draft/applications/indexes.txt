=============
Using Indexes
=============

.. default-domain:: mongodb

Synopsis
--------

MongoDB supports :doc:`indexes </core/indexes>` that allow the
database to return results quickly while requiring that the database
scan a minimal number of documents. This can reduce disk access, and
help maintain more even performance in general. See the
":doc:`/core/indexes`" document for more information on the types of
indexes supported by MongoDB and a general background on the index
functionality. Also consider the ":doc:`/administration/indexing`"
document for an introduction to index related operations.

This document provides an overview of the approaches to indexing and
the strategies that you can use as you develop applications with
MongoDB.

Strategies
----------

Use Covered Queries
~~~~~~~~~~~~~~~~~~~

Sort Using Indexes
~~~~~~~~~~~~~~~~~~

Store Indexes in RAM
~~~~~~~~~~~~~~~~~~~~

.. check the size of the index in ram.

   consider the size of the working set.

Considerations
--------------

Above all, when developing your indexing strategy you should have a
deep understanding of:

- the queries that the application use.

- the relative frequency with which any specific query runs.

- the current indexes created for your collections.

- which indexes all, or your most common, queries use.

Selectivity
~~~~~~~~~~~

Selectivity describes the ability of a query to narrow the result set
using the index. Effective indexes are more selective, which allows
MongoDB to use the index for a larger portion of the work associated
with fulfilling the query.

.. example::

   First, consider an index on a field that has three values evenly
   distributed across the collection. If MongoDB uses this index for a
   query, MongoDB will still need to scan a third of the
   :term:`documents <document>` in the collection to fulfill the rest
   of the query.

   Then, consider an index on a field that has many values
   evenly distributed across the collection. If your query selects one
   of these values using the index, MongoDB will only need to scan a
   very small number of documents to fulfill the rest of the query.

To ensure optimal performance use indexes that are maximally
selective, relative to your queries.

Insert Throughput
~~~~~~~~~~~~~~~~~

.. TODO insert link to /source/core/write-operations when that page is complete.

.. TODO fact check

MongoDB must update all indexes associated with a collection following
every insert or update operation. Every index on a collection adds
some amount of overhead to these operations. In almost every case, the
performance gains that indexes realize for read operations are worth
the insertion penalty; however:

- in some cases, an index to support an infrequent query may incur
  more insert-related costs, than saved read-time.

- in some situations, if you have many indexes on a collection with a
  high insert throughput and a number of very similar indexes, you may
  find better overall results by using a slightly less effective index
  on some queries if it means consolidating the total number of
  indexes.

Index Size
~~~~~~~~~~

Indexes require space, both on disk and in RAM. Indexes require less
space in RAM than the full documents in the collection. In theory, if
your queries only match a subset of the documents and can use the
index to locate those documents, MongoDB can maintain a much smaller
:term:`working set`. Ensure that:

- all of your indexes use less space than the documents in the
  collection.

- the indexes and a reasonable working set can fit RAM at the same
  time.

Indexes do not have to fit *entirely* into RAM in all cases. If the
order of the index field, grows with every insert, and most queries
select recently added documents, then MongoDB only needs to keep the
parts of the index that hold the most recent or "right-most" values in
RAM. This allows for efficient index use for read and write
operations and minimize the amount of RAM required to support the
index.

.. To determine the size of the index, see DOCS-224

System
~~~~~~

.. considerations include:
   - number of indexs
   - indexed key limitations
   - one query per index.
