==============
Infrastructure
==============

.. default-domain:: mongodb

TCP PORT Numbers
----------------

MongoDB's default TCP port numbers are as follows:

	Standalone mongod : 27017
	mongos : 27017
	shard server (mongod --shardsvr) : 27018
	config server (mongod --configsvr) : 27019
	Web stats page for :program:`mongod` : 28017, by default (add 1000 to :program:`mongod` port number) 

CLI Options
~~~~~~~~~~~

You can disable the "home" stats page using the
:option:`-–nohttpinterface <mongod --nohttpinterface>` 
option when starting MongoDB.

It is possible to change the port number using the 
:option:`—-port <mongod --port>` 
option when starting :program:`mongod`, however, this adds very little 
from a security perspective.

Most statistics pages in the HTTP UI are unavailable unless the
:option:`--rest <mongod --rest>`
option is specified.
If you specify the
:option:`--rest <mongod --rest>`
option you should secure the web statistics port (:28017 if you rely on
the default configuration).

Installation Recommendations
----------------------------

.. warning:

   Do NOT run the MongoDB binaries as “root”. 
   
Install the MongoDB database in a chrooted environment.

.. todo:: [TO BE CONFIRMED IF IT BREAKS ANYTHING-ELSE] 

:program:`mongod` 
must run under a unique UID/GID
that is not used by any other system process (by default this will
be ``mongodb:mongodb``). All :program:`mongod` user accounts should be
protected by a hard to guess password with appropriate complexity.
This cannot be enforced by :program:`mongod` at this time, however, it is
considered best practice and should be part of the internal
security policy. Anonymous access to the database should be
disabled by turning on authentication. 

Disable the Web Stats page
for mongod with the 
:option:`--nohttpinterface <mongod --nohttpinterface>`
option. 

Do not run with the 
:option:`--rest <mongod --rest>`
option enabled. 


IP Address Binding
------------------

By default,  :program:`mongod` will listen on all available IP addresses on
a machine. You can restrict this to a single IP address with the
:option:`--bind_ip <mongod --bind_ip>` option for mongod.

For example, it is possible to bind to 127.0.0.1, the loopback
interface, to make :program:`mongod` only listen to requests from the same
machine (localhost).

Alternately, on a machine with two interfaces, you might want to
listen only on the private network.

To revert back to the default setting and enable listening on all
interfaces, remove the :option:`--bind_ip <mongod --bind_ip>` option 
from your :program:`mongod` start–up options. 

Firewall
--------

As part of the defense-in-depth policy, it is advisable to use a
firewall to process traffic intended for :program:`mongod` so that you
can ensure that only traffic from approved sources reaches the
:program:`mongod` process and that the :program:`mongod` process 
can in turn only connect to approved destinations.

Iptables
~~~~~~~~

The ``iptables`` program manages the firewall rules on Linux and
typically comes built in with each Linux distribution. For this
article we only need to worry about two ``iptables`` chains:

Input: filters traffic destined for the firewall

Output: filters traffic from the firewall

By default, ``iptables`` allows all connections so it's a good idea
to change the default chain policy to DROP:

.. code-block:: sh

   iptables -P INPUT DROP

   iptables -P OUTPUT DROP

This ensures that any traffic to/from the :program:`mongod` server has
to be explicitly allowed.

Traffic to/from a Standalone MongoDB Instance or Replica-Set
MongoDB Instance (mongod)

To explicitly allow :program:`mongod` traffic to the database server
running :program:`mongod` from the app server (represented by
``<ip-address>``):

.. code-block:: sh

   iptables -A INPUT -s <ip-address> -p tcp --destination-port 27017 -m state --state NEW,ESTABLISHED -j ACCEPT 

and back to the app server from the database server:

.. code-block:: sh

   iptables -A OUTPUT -d <ip-address> -p tcp --source-port 27017 -m state --state ESTABLISHED -j ACCEPT

Note: If you have one app-server (e.g. 10.10.10.10), then host can
be represented by

.. code-block:: sh

   10.10.10.10 or 10.10.10.10/32

whereas for a  /24 network, it can be 

.. code-block:: sh
   
   10.10.10.10/24

or

.. code-block:: sh

   10.10.10.10/255.255.255.0

Traffic to/from a MongoDB Query Router (mongos)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The above firewall rules will also typically apply to the
:program:`mongos`
server as it listens on TCP port 27017, by default, with
<ip-address> still representing the app server.

Traffic to/from a MongoDB Config Server (mongod --configsvr)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

On the config server, by default, the :program:`mongod` binary listens on
port 27019 and, therefore, the iptables rules become:

.. code-block:: sh

   iptables -A INPUT -s <ip-address> -p tcp --destination-port 27019 -m state --state NEW,ESTABLISHED -j ACCEPT

and back to the Config server from the :program:`mongos` server -

.. code-block:: sh

   iptables -A OUTPUT -d <ip-address> -p tcp --source-port 27019 -m state --state ESTABLISHED -j ACCEPT

Traffic to/from a MongoDB Shard Server (:program:`mongod --shardsvr`)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

On a shard server, by default, the :program:`mongod` binary listens on port
27018 and, therefore, the ``iptables`` rules become:

.. code-block:: sh

   iptables -A INPUT -s <ip-address> -p tcp --destination-port 27018 -m state --state NEW,ESTABLISHED -j ACCEPT

and back to the config server from the :program:`mongos` server -

.. code-block:: sh

   iptables -A OUTPUT -d <ip-address> -p tcp --source-port 27018 -m state --state ESTABLISHED -j ACCEPT

In a sharded infrastructure, the :program:`mongos` router needs
to connect to :program:`mongod` shard servers and the shard servers 
need to connect and communicate amongst themselves.

Back-Out & Flush iptables rules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To remove the ``iptables`` firewall rules and revert to the default
action of each chain, it is possible to flush all existing rules
as follows:

iptables –F

This change is only temporary as it only affects the rulebase in
memory. For example, a restart:

.. code-block:: sh

   iptables stop && iptables start
   
will result in the original rules returning. 
Therefore, to make the flush permanent, you need to save the change:

.. code-block:: sh

   service iptables save

View iptables rules

To view the ``iptables`` firewall rules:

.. code-block:: sh

   iptables –L


This is only a high-level, MongoDB specific introduction to
`iptables` rules.

There are a substantial amount of free resources on the Internet
regarding ``iptables`` configurations. It is also possible to
configure ``iptables`` through a GUI, however, this is not within
scope for this tutorial.

Windows Firewall
----------------

The Windows Firewall is configured on the cli, using ``netsh``. Here
are some example firewall rules for MongoDB traffic -

.. code-block:: netsh

   netsh advfirewall firewall add rule name="Open mongod port 27017" dir=in action=allow protocol=TCP localport=27017

   netsh advfirewall firewall add rule name="Open mongod shard port 27018" dir=in action=allow protocol=TCP localport=27018


To delete the firewall rule allowing :program:`mongod` traffic:

.. code-block:: netsh

   netsh advfirewall firewall delete rule name="Open mongod port 27017" protocol=tcp localport=27017

   netsh advfirewall firewall delete rule name="Open mongod shard port 27018" protocol=tcp localport=27018

Alternatively, you can enable a program as opposed to opening a port:

.. code-block:: sh

   netsh advfirewall firewall add rule name="Allowing mongod" dir=in action=allow program=" C:\mongodb\bin\mongod.exe"

or for a mongod shard server:

.. code-block:: sh

   netsh advfirewall firewall add rule name="Allowing mongos" dir=in action=allow program=" C:\mongodb\bin\mongos.exe"

To list/view the Windows Firewall rules:

.. code-block:: sh

   netsh advfirewall firewall show rule name=all

To reset the Windows Firewall rules: 

.. code-block:: sh

   netsh advfirewall reset

   iptables -A OUTPUT -d <ip-address> -p tcp --source-port 27018 -m state --state ESTABLISHED -j ACCEPT

To save administration, you can export or import firewall (from
different servers) rules very easily on Windows:

.. code-block:: sh
   
   netsh advfirewall export "C:\temp\MongoDBfw.wfw"	 

   netsh advfirewall import "C:\temp\ MongoDBfw.wfw"

It is also possible to configure the Windows Firewall through a
GUI, however, this is not within scope for this tutorial. 

AMI
---

EC2 Security Groups are essentially firewall rules that allow
traffic into the instance.  Unfortunately Security Groups do not
work across regions so you will have to rely on the o/s firewall,
e.g. ``iptables`` or the Windows Firewall. There is further
information on setting up MongoDB on Amazon EC2 here.

.. todo::  TO FINISH

VPN
---

Some customer use VPNs to secure the traffic between MongoDB
nodes. These are typically SSL VPNs as opposed to fully-fledged
IPSEC VPNs, for performance reasons.

VPN solutions typically include certificate validation and a
choice of encryption protocols, thus providing authentication and
identification of the client as well as preventing network
sniffing or tampering of the traffic in transit as there is a
secure tunnel. 