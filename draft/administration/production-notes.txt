================
Production Notes
================

.. default-domain:: mongodb

Overview
--------

This page details system configurations that affect MongoDB,
especially in production.

Backups
-------

To make backups of your MongoDB database, please refer to the
:ref:`backups section <backup-overview>`.

Networking
----------

Always run MongoDB in a *trusted environment*, with network rules that
prevent access from *all* unknown machines, systems, or networks. As
with any sensitive systems dependent on network access, your MongoDB
deployment should only be accessible to specific systems that require
access: application servers, monitoring services, and other MongoDB
components.

This section contains notes on specific network configurations
relevant to production deployments of MongoDB.

.. TODO link to MongDB security section when available.

Port Numbers
~~~~~~~~~~~~
 
MongoDB uses only TCP ports for network connections. The following is
a listing of MongoDB programs and default ports used.

.. list-table:: Default ports used by MongoDB
   :header-rows: 1

   * - Description
     - Process
     - Port Number
   * - Standalone MongoDB server
     - :program:`mongod`
     - 27017
   * - Shard Router
     - :program:`mongos`
     - 27017
   * - Shard Server
     - :setting:`mongod --shardsvr <shardsvr>`
     - 27018
   * - Config Server
     - :setting:`mongod --configsvr <configsvr>`
     - 27019
   * - mongod Web Stat
     - :ref:`mongod --rest <rest-interface>`
     - 28107


.. _production-firewall:

Firewall Rules
~~~~~~~~~~~~~~

.. list-table:: Firewall Rules Required for MongoDB
   :header-rows: 1

   * - Process
     - Direction
     - Ports
     - Notes
   * - :program:`mongod`
     - Incoming
     - 27017/*
     - for client and application server connections
   * - :program:`mongod`
     - Outgoing
     - */27017
     - for :term:`replication <replica set>` from other members, shard migrations
   * - :program:`mongos`
     - Incoming
     - 27017/*
     - for client and application server connections
   * - :program:`mongod`
     - Outgoing
     - */[27019, 27018]
     - for connections to :term:`shards <shard>` and :term:`config servers`

.. note - do we need to have the terms linked in the table when the
   notes below would be more 'natural' to have such links?

In a sharded environment:

- All the mongo processes (mongos, mongod, :setting:`mongod
  --configsvr <configsvr>`) in the cluster should be able to connect
  to each other.

- Clients must be able to connect to the mongos processes; however,
  they can be blocked from the mongod's.

In a non-sharded replica set environment:

- All clients need to be able to connect to all non-hidden replica set
  members.

- All members of a replica set (the mongod processes that is) need to
  be able to communicate with each other.

IP Address Binding
~~~~~~~~~~~~~~~~~~

By default, a :program:`mongod` server will listen on all available IP
addresses on a machine. You can restrict this to a single IP address
with the :setting:`bind_ip` configuration option for mongod.

For example this could be set to ``127.0.0.1``, the loopback
interface, to make mongod only listen to requests from the same
machine (``localhost``). Or, on a machine with two interfaces, we
might want to listen only on the private network.

To enable listening on all interfaces, remove the bind_ip option from
your server configuration file.

.. note::

   To accept requests on external interfaces you may also have to
   modify your computer's firewall configuration to allow access to
   the ports used by mongo.

   .. seealso:: :ref:`production-firewall`

Linux Kernel
------------

Most versions of the Linux kernel will support MongoDB, but there are
a few key issues to keep in mind:

- The MongoDB user community has approved Linux kernel 2.6.36 as
  a good candidate for running MongoDB in production.

- Some have reported skepticism on behavior of Linux 2.6.33-31 and
  2.6.32 kernel, at least on Amazon EC2.

MongoDB preallocates its database files before using them, so file
systems such as ext4 and XFS with kernel support is ideal:

- If you are using ext4 file system, Linux kernel 2.6.23 or newer
  is required for efficient filesystem preallocation.

- If you are using XFS file system, Linux kernel 2.6.25 or newer is
  required for efficient file preallocation.

General system configuration recommendations:

- Turn off ``atime`` for the storage volume with the :term:`database
  files <dbpath>`.

- Set file descriptor limit and user process limit to 20,000 (see
  :ref:`etc/limits` and :term:`ulimit`). A low ulimit will affect
  MongoDB when under heavy use and will produce weird errors.

- Do not use large virtual memory pages, MongoDB performs better with
  smaller virtual memory pages.

- Disable NUMA in your BIOS. If that is not possible see :ref:`NUMA
  <production-numa>`.

- Ensure that readahead settings for the block devices that store the
  database files are acceptable. See the :ref:`Readahead
  <production-readahead>` section

- Use NTP to synchronize time between your hosts. MongoDB uses
  distributed locks that requires hosts to be synchronized, especially
  :term:`config servers`.

.. _production-numa:

NUMA and MongoDB
----------------

NUMA, Non-Uniform Access Memory, and MongoDB do not work well
together. If you are running MongoDB on NUMA hardware, we recommend
disabling NUMA for MongoDB and running with an interleave memory
policy. Operational problems in MongoDB will manifest in strange ways,
such as slow performance for periods of time or high system processor
usage.

.. note::

   On Linux, :program:`mongod` v2.0+ checks these settings on startup
   and prints a warning if the system is NUMA based.

To turn off NUMA for MongoDB, use the ``numactl`` command and start
:program:`mongod` in the following manner:

   .. code-block:: bash

      numactl --interleave=all /usr/bin/local/mongod

Adjust the ``proc`` settings using the following command:

   .. code-block:: bash

      echo 0 > /proc/sys/vm/zone_reclaim_mode

You can change ``zone_reclaim_mode`` without restarting mongod. For
more information, see documentation on `Proc/sys/vm
<http://www.kernel.org/doc/Documentation/sysctl/vm.txt>`_.

.. TODO the following is needed? or is just generally good reading material?

Further reading
~~~~~~~~~~~~~~~

`The MySQL “swap insanity” problem and the effects of the NUMA
architecture
<http://jcole.us/blog/archives/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/>`_
describes the effects of NUMA on databases. This blog post was aimed
at problems NUMA created for MySQL, but the issues are similar. The
post describes the NUMA architecture and its goals, and how these are
incompatible with production databases.

.. _production-readahead:

Virtualization
--------------

Generally MongoDB works very well in virtualized environments, with
the exception of OpenVZ.

EC2
~~~
Compatible. No special configuration requirements.

VMWare
~~~~~~

Some suggest not using overcommit as they may cause issues. Otherwise compatible.

Cloning a VM is possible. For example you might use this to spin up a
new virtual host that will be added as a member of a replica set. If
Journaling is enabled, the clone snapshot will be consistent. If not
using journaling, stop mongod, clone, and then restart.

OpenVZ
~~~~~~

Issues have been reported here.

Disk and Storage Systems
------------------------

iostat
~~~~~~

On Linux, use the iostat command to check if disk I/O is a bottleneck
for your database.

We generally find the form:

.. code-block:: bash

   iostat -xm 2

to work well. (Use a number of seconds with iostat, otherwise it will
display stats since server boot, which is not very useful.)

Use the mount command to see what device your :term:`data directory
<dbpath` resides on.

Key fields from ``iostat``:

- %util: this is the most useful field for a quick check, it
  indicates what percent of the time the device/drive is in use. If
  the number if near 100%, your server may be physical disk I/O
  bound. (There are some volume situations where this statistic
  overstates, but most often it is correct.)

- avgrq-sz: average request size. The smaller this number, the more
  random your IO operations are. This is in sectors : typically
  sectors are 512 bytes, so multiply by 0.5 to see average request
  size in kilobytes.

Hardware
--------

MongoDB tends to run well on virtually all hardware. In fact it was
designed specifically with commodity hardware in mind (to facilitate
cloud computing); that said it works well on very large servers
too. That said if you are about to buy hardware here are a few
suggestions:

- More RAM is good.

- Fast CPU clock speed is helpful.

- Many cores helps but does not provide a high level of marginal
  return, so don't spend money on them. (This is both a consequence of
  the design of the program and also that memory bandwidth can be a
  limiter; there isn't necessarily a lot of computation happening
  inside a database).

- non-NUMA is recommended as NUMA is not very helpful as memory access
  is not very localized in a database. If you must run MongoDB on a
  NUMA system, see :ref:`NUMA and MongoDB <production-numa>`.

- SSD is good. We have had good results and have seen good
  price/performance with SATA SSDs; the (typically) more upscale PCI
  SSDs work fine too.

- Commodity (SATA) spinning drives are often a good option as the
  speed increase for random I/O for more expensive drives is not that
  dramatic (only on the order of 2x) – spending that money on SSDs or
  RAM may be more effective.

