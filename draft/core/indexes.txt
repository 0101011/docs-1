==============
Index Overview
==============

.. default-domain:: mongodb

Synopsis
--------

Indexes are an internal representation of the documents in your
database organized so that MongoDB can use them to quickly locate
documents and fulfill queries very efficiently. Fundamentally, indexes
in MongoDB are similar to indexes in other database systems. MongoDB
supports indexes on any field or sub-field contained in documents
within a MongoDB collection. Consider the following core features of
indexes:

- MongoDB defines indexes on a per-collection level.

.. TODO - link to 'collections' document description (provide a good refresher for anyone just doing SQL vs. NoSQL comparisons)

- Every query (including update operations,) can use one and only one
  index. The query optimizer determines, empirically, the best query
  plan and indexes to use on a specific query, but can be overridden
  using the :func:`cursor.hint()` method. However, :ref:`compound
  indexes <index-type-compound>` make it possible to include multiple
  fields in a single index.

- Indexes often dramatically increase the performance of queries;
  however, each index creates a slight overhead for every write
  operation.

- Queries that are "covered" by the index return more quickly
  than documents that have to scan many individual documents. By using
  queries with good index coverage, it possible for MongoDB to only
  store the index itself and the most often used documents in memory,
  which can maximize database capacity, performance and throughput.

.. COMMENT - how do indexes maximize capacity?? doesn't capacity go down because there's additional overhead to store the index?

Continue reading for a complete overview of indexes in MongoDB,
including the :ref:`types of indexes <index-types>`, basic
:ref:`operations with indexes <index-operations>`, and other MongoDB
:ref:`features <index-features>` implemented using indexes.

.. TODO add index section seealso

.. index:: index types
.. _index-types:

Index Types
-----------

All indexes in MongoDB are "B-Tree" indexes. In the :program:`mongo`
shell, the helper :func:`ensureIndex() <db.collection.ensureIndex()>`
provides a method for creating indexes. This section provides an
overview of the types of indexes available in MongoDB as well as an
introduction to their use.

.. index:: _id index
.. index:: _id
.. index:: index; _id
.. index:: index types; primary

_id
~~~

The ``_id`` index is a :ref:`unique index <index-type-unique>` on the
``_id`` field, and MongoDB creates this index by default on all
collections. [#capped-collections]_ You cannot delete the index on
``_id``.

The ``_id`` field is the :term:`primary key` for the collection, and
every document *must* have a unique ``_id`` field. You may store any
unique value in the ``_id`` field. The default value of ``_id`` is
:term:`ObjectID` on every :func:`insert` operation. :term:`ObjectIds`
are 12-byte, unique identifiers, that make suitable ``_id`` values.

.. note::

   In :term:`shard clusters <shard cluster>`, if the you do *not* use
   the ``_id`` field as the :term:`shard key`, then your application
   **must** ensure the uniqueness of the values in the ``_id`` field
   to prevent errors.

.. [#capped-collections] Capped collections are a special collection
     which do not have an ``_id`` index.

.. _index-types-secondary:

Secondary Indexes
~~~~~~~~~~~~~~~~~

All indexes other than the index on the ``_id`` field are
:term:`secondary indexes <secondary index>`. You can create indexes on
any field within any document or sub-document. Additionally, you can
create compound indexes with multiple fields, so that a single query
can match multiple components using the index without needing to scan
(as many) actual documents.

In general, you should have secondary indexes that support all of your
primary common and user-facing queries, and require MongoDB to scan
the fewest number of documents possible.

.. COMMENT - 'primary common' means??

To create a secondary index, you would use the :func:`ensureIndex()`
function. The specifications an index using the :func:`ensureIndex()
<db.collection.ensureIndex()>` operation will resemble the following
on the MongoDB shell:

.. code-block:: javascript

   { "field": 1 }
   { "field0.field1": 1 }
   { "field0": 1, "field1": 1 }

For each field in the index you will specify either ``1`` or ``-1``,
which represents the order of the keys in the index. For indexes with
more than one key (i.e. "compound indexes,") the sequence of fields is
important.

.. TODO - is the order 1 for ascending and -1 for descending??

Embedded Fields
```````````````

You can create indexes on fields that exist in sub-documents within
your collection. Consider the collection ``people`` that holds
documents that resemble the following example document:

.. code-block:: javascript

   {
    "_id": ObjectId(...)
    "name": "John Doe"
    "address": {
      "street": "Main"
      "zipcode": 53511
      "state": "WI"
    }
   }

.. COMMENT - how can one get such output from mongodb shell??  --> try
.. to be 'truthful' here.

You could create an index on the ``address.zipcode`` field, using the
following specification:

.. code-block:: javascript

   db.people.ensureIndex( { "address.zipcode": 1 } )

Introspecting sub-documents in this way is commonly called "dot
notation."

.. TODO - link to 'doc-notation' document

.. _index-type-compound:

Compound Indexes
````````````````

MongoDB supports "compound indexes," where a single index structure
holds references to multiple fields within a collection's
documents. Consider the collection ``products`` that holds documents
that resemble the following an example document:

.. code-block:: javascript

   {
    "_id": ObjectId(...)
    "item": "Banana"
    "category": ["food", "produce", "grocery"]
    "stock": 4
    "type": cases
    "arrival": Date(...)
   }

Most queries probably select on the ``item`` field, but a significant
number of queries will also check the ``stock`` field. You can
specify a single compound index to support both of these queries:

.. code-block:: javascript

   db.products.ensureIndex( { "item": 1, "stock": 1 } )

MongoDB will be able to use this index to support queries that select
the ``item`` field as well as those queries that select the ``item``
field **and** the ``stock`` field. However, these indexes will not
support queries that select *only* the ``stock`` field.

Ascending and Descending
````````````````````````

Indexes store references to fields in either ascending or descending
order. The order of keys often doesn't matter because MongoDB can
transverse the index in either direction. However, in compound
indexes, for some kinds of sort operations, it's useful to have the
fields running in opposite order.

To specify an index with an ascending order, use the following form:

.. code-block:: javascript

   db.products.ensureIndex( { "field": -1 } )

More typically in the context of a :ref:`compound
index<index-type-compound>`, the specification would resemble the
following:

.. code-block:: javascript

   db.products.ensureIndex( { "field0": 1, "field1": -1 } )

.. TODO understand the sort operations better.

.. _index-types-multikey:

Multikey
````````

If you index a field that contains an array, you will create a
multikey index, which adds entries to the index for *every* item in
the array. Consider a ``feedback`` collection with documents in the
following form:

.. code-block:: javascript

   {
    "_id": ObjectId(...)
    "title": "Grocery Quality"
    "comments": [
       { author_id: ObjectId(..)
         date: Date(...)
         text: "Please expand the cheddar selection." },
       { author_id: ObjectId(..)
         date: Date(...)
         text: "Please expand the mustard selection." },
       { author_id: ObjectId(..)
         date: Date(...)
         text: "Please expand the olive selection." }
    ]
   }

An index on the ``comments`` field would be a multikey index, and will
add items to the index for all of the sub-documents in the array. As a
result you will be able to run the following query, using only the
index to locate the document:

.. code-block:: javascript

   db.feedback.find( { "comments.text": "Please expand the olive selection." } )

The following operators are useful for interacting with arrays, like
the ones that you would index using multikey indexes.

- :operator:`$addToSet`
- :operator:`$push`
- :operator:`$pull`
- :operator:`$all`

.. warning::

   MongoDB will refuse to insert documents into a compound index where
   more than one field is an array (i.e. ``{a: [1, 2], b: [1, 2]}``);
   however, MongoDB permits documents in collections with compound
   indexes where only one field per compound index is an array
   (i.e. ``{a: [1, 2], b: 1}`` and ``{a: 1, b: [1, 2]}``.)

.. _index-type-unique:

Unique Index
~~~~~~~~~~~~

The unique index will cause MongoDB to reject all documents that
contain a duplicate value for the index field. To create a unique index
on the ``user_id`` field of the ``members`` collection, use the
following operation in the :program:`mongo` shell:

.. COMMENT - are we using operation or command most of the time?

.. code-block:: javascript

   db.addresses.ensureIndex( { "user_id": 1 }, { unique: true } )

If you use the unique constraint on a :ref:`compound index
<index-type-compound>` then MongoDB will enforce uniqueness on the
*combination* of values, rather than individual value for any or all
values of the key.

If a document does not have a value for the indexed field in a unique
index, the index will store a null value for this document. MongoDB
will only permit one document without a unique value in the collection
ecause of the unique constraint. You can combine with the :ref:`sparse
index <index-type-sparse>` to filter these null values from the unique
index.

.. index:: index; sparse
.. _index-type-sparse:

Sparse Index
~~~~~~~~~~~~

Sparse indexes only contain entries for documents that have the
indexed field. By contrast, non-sparse indexes contain all documents
in a collection, and store null values for documents that do not
contain the indexed field. Create a sparse index on the ``xmpp_id``
field, of the ``members`` collection, using the following operation in
the :program:`mongo` shell:

.. code-block:: javascript

   db.addresses.ensureIndex( { "xmpp_id": 1 }, { sparse: true } )

.. warning::

   Using these indexes will sometimes result in incomplete results
   when filtering or sorting results, because sparse indexes are not
   complete for all documents in a collection,

.. note::

   Sparse indexes are not `block-level`_ indexes. Think of them as
   dense indexes with a specific filter.

   You can combine the sparse index option with the :ref:`unique
   indexes <index-type-unique>` option so that :program:`mongod` will
   reject documents that have duplicate values for a field, but that
   ignore documents that do not have the key.

   .. _`block-level`: http://en.wikipedia.org/wiki/Index_%28database%29#Sparse_index>

.. _index-creation-operations:
.. _index-operations:

Index Creation Options
----------------------

Most parameters [#index-parameters]_ to the :func:`ensureIndex()
<db.collection.ensureIndex()>` operation affect the kind of index that
MongoDB creates. Two options, :ref:`background construction
<index-creation-background>` and :ref:`duplicate dropping
<index-creation-duplicate-dropping>`, affect how MongoDB builds the
indexes.

.. [#index-parameters] Other functionality accessible by way of
   parameters include :ref:`sparse <index-type-sparse>`, :ref:`unique
   <index-type-unique>`, and :ref:`TTL <index-feature-ttl>`.

.. _index-creation-background:

Background Construction
~~~~~~~~~~~~~~~~~~~~~~~

.. TODO redirect background indexing page here
   http://www.mongodb.org/display/DOCS/Indexing+as+a+Background+Operation

By default, creating an index is a blocking operation. Building an
index on a collection that has a large collection of data, the
operation can take a long time to complete. To resolve this issue, the
background option can allow you to continue to use your
:program:`mongod` instance while the index is being built. Create an
index in the background of the ``zipcide`` field of the ``people``
collection using a command that resembles the following:

.. code-block:: javascript

   db.people.ensureIndex( { zipcode: 1}, {background: true} )

You can combine the background option with other options, as in the
following:

.. code-block:: javascript

   db.people.ensureIndex( { zipcode: 1}, {background: true, sparse: true } )

Be aware of the following behaviors with background index
construction:

- A single :program:`mongod` can only build a single index at a time.

- The indexing operation runs in the background so that other database
  operations can run while creating the index. However, the
  :program:`mongo` shell session or connection where you are creating
  the index will block until the index build is complete. Open another
  connection or :program:`mongo` instance to continue using the database.

- The background index operation use an incremental approach that is
  slower than the normal "foreground" index builds. If the index is
  larger than the total system RAM, then the incremental process
  can take *much* longer than the foreground build.

.. COMMENT - confirm: ram --> available or system total?

- For MongoDB before version 2.1.0, background index builds cannot be
  used for :term:`replica set` :term:`secondaries <secondary
  members>`.

  To rebuild large indexes on secondaries before version 2.1.0,
  typically the best approach is to restart each secondary in
  "standalone" mode and build the index. However, the amount of time
  required to build the index must be within the window of the
  :term:`oplog`, so that the secondary can catch up. When all the
  secondaries have the new index, step down the primary and build the
  index on the former primary.

.. COMMENT - don't you want to put the secondaries online THEN take
.. the primary off to perform the index

  Indexes on secondary members in "recovering" mode are always built
  in the foreground to allow them to catch up as soon as possible.

  .. TODO create tutorials for the replica set reindexing
     http://www.mongodb.org/display/DOCS/Building+indexes+with+replica+sets


.. warning:: 

   Administrative operations such as :dbcommand:`repairDatabase` and
   :dbcommand:`compact` will not run concurrently with a background
   index build.

.. note::
   
   Queries will not use these indexes until the index build is
   complete because the index builds in the ``system.indexes``
   database.

.. _index-creation-duplicate-dropping:

Duplicate Dropping
~~~~~~~~~~~~~~~~~~

MongoDB cannot create a :ref:`unique index <index-type-unique>` on a
field that has pre-existing duplicate values. To force the creation of
a unique index, you can specify the ``dropDups`` option, which will
only index the first occurrence of a value for the key, and delete all
subsequent values.

.. COMMENT - 'pre-exisiting' duplicate values? does that mean the
.. index can index duplicate values AFTER the index has been created?

As in all unique indexes, if a document does not have the indexed
field, MongoDB will include it in the index with a "null" value. This
means, if subsequent fields *do not* have the indexed field, MongoDB
will remove them when deleting the index. If you combine this option
with the :ref:`sparse <index-type-sparse>` option, this index will
only include documents in the index that have the value, which
prevents the database from deleting these values.

.. COMMENT - ?_?

To create a unique index that drops duplicates on the ``username``
field of the ``accounts`` collection, use a command in the following form:

.. code-block:: javascript

   db.accounts.ensureIndex( { username: 1 }, { unique: true, dropDups: true } )

.. warning::

   Specifying ``{ dropDups: true }`` will delete data from your
   database. Use with extreme caution.

.. _index-features:
.. _index-feature:

Index Features
--------------

.. _index-feature-ttl:

TTL Indexes
~~~~~~~~~~~

TTL indexes are special indexes that MongoDB can use to automatically
remove documents from a collection after a certain amount of
time. This is ideal for some types of information like machine
generated event data, logs, and session information that only need to
persist in a database for a limited amount of time.

These indexes have the following limitations:

- Compound indexes are *not* supported.

- The indexed field **must** be a date :term:`type <bson type>`.

- If the field holds an array, and there are multiple date-typed data
  in the index, the document will expire when the *lowest*
  (i.e. earliest) matches the expiration threshold.

.. COMMENT - i'm a bit confused here. please clarify. compound indexes
.. are not supported, but arrays are? don't array indexes autogenerate
.. compound indexes?

In all other respects, TTL indexes are normal :ref:`secondary indexes
<index-types-secondary>`, and if appropriate, MongoDB can use these
indexes to fulfill arbitrary queries.

.. see:: :doc:`/tutorial/expire-data`

Geospatial Indexes
~~~~~~~~~~~~~~~~~~

MongoDB provides "geospatial indexes" to support location-based and
other similar queries in a two dimensional coordinate systems. For
example, use geospatial indexes when you need to take a collection of
documents that have coordinates, and return a number of options that
are "near" a given coordinate pair.

To create a geospatial index, your :term:`documents <document>` must
have a coordinate pair. For maximum compatibility, these coordinate
pairs should be in the form of a two element array, such as ``[ x , y
]``, but other representations are acceptable, including:

.. code-block:: javascript

   { loc : [ 50 , 30 ] }
   { loc : { x : 50 , y : 30 } }
   { loc : { foo : 50 , y : 30 } }
   { loc : { lon : 40.739037, lat: 73.992964 } }

Given the field of ``loc`` in the collection ``places``, you would
create a geospatial index as follows:

.. code-block:: javascript

   db.places.ensureIndex( { loc : "2d" } )

By default, ``2d`` indexes assume that the coordinates are
latitude/longitude systems, and assume that minimum and maximum bounds
are ``[ -180, 180 ]``. You can specify a different minimum and maximum
values, as follows:

.. code-block:: javascript

   db.places.ensureIndex( { loc : "2d" }, { min: -250 , max: 250 } )

MongoDB will reject documents that have values in the ``loc`` field
beyond the minimum and maximum values.

.. note::

   MongoDB permits only one geospatial index per collection. Although,
   MongoDB will allow clients to create multiple geospatial indexes, a
   single query can use only one index.

See the :operator:`$near`, and the database command
:dbcommand:`geoNear` for more information on accessing geospatial
data.

.. TODO insert link to special /core/geospatial.txt documentation
   on this topic. once that document exists.

Index Limitations
-----------------

Be aware of the following current limitations of MongoDB's indexes:

- A collection may have no more than :ref:`64 indexes <limit-number-of-indexes-per-collection>`.

- Indexed items can have no more than :ref:`1024 bytes <limit-index-size>`.

  This includes the field value or values, the field name or names,
  and the :term:`namespace`.

- The name of an index, including the :term:`namespace` must be
  shorter than :ref:`128 characters <limit-index-name-length>`.

- Indexes have storage requirements, and impacts insert/update speed
  to some degree. 

- Create indexes to support queries and other operations, but do not
  maintain indexes that your MongoDB instance cannot or will not use.
