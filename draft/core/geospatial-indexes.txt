==================
Geospatial Indexes
==================

.. default-domain:: mongodb

Overview
--------

MongoDB can support geospatial data with a focus on location-based
queries using flat or spherical models. You can query with various
levels of precision, combine location data with other indexes, and
create special haystack indexes for accelerated region queries.

This document introduces many of the core concepts required to
understand and setup your geospatial data for use in MongoDB. For more
information on how to use geospatial data in MongoDB, such as
querying, please refer to :doc:`Using Geospatial
Data</applications/geospatial-indexes>`.

.. include:: /includes/geospatial-coordinates.rst

.. _geospatial-indexes:

Geospatial Indexes
------------------

.. see:: :ref:`geospatial-coordinates` for an overview on modeling
   location data in MongoDB.

To use geospatial functions in MongoDB, you have to structure the
location data in a 2D array and make an index on this location
data with special options.

When you query for locations against the geospatial index, MongoDB
will automatically query against this geospatial index, as well as other
index configuration. This index is a :term:`geohash` calculated based on the
range and data points. For more information on :term:`geohash`, please
refer to :ref:`geohash<geospatial-geohash>`

To create a geospatial index, use an operation modeled on the
following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { <location field> : "2d" } )

These operations will create a special index on location field in the
specified collection. All geospatial queries will use this geospatial
index.

.. note::

   MongoDB only supports *one* geospatial index per collection. As
   with all indexes in MongoDB, any single query will only be able to
   use one index. If a collection were to have more than one
   geospatial index, geospatial queries could not return consistent
   results.

.. _geospatial-indexes-range:

Range
~~~~~

All geospatial indexes are bounded. MongoDB will return an error and
reject documents with coordinate pairs outside of these
boundaries. The default boundaries support global coordinate data are
between -180 inclusive, and 180 non-inclusive. (i.e. latitude and
longitude for points on Earth)

To specify the boundaries of a geospatial index, use the ``min`` and
``max`` operators with the :func:`ensureIndex() <db.collection.ensureIndex()>`
operation, as in the following prototype.

.. code-block:: javascript

   db.collection.ensureIndex( { <location field>: "2d" } ,
                              { min: <lower bound> , max: <upper bound> } )

The following operation will create an index on the  ``places``
collection, for coordinates in the ``loc`` field, with boundaries
between ``-90`` and ``90``:

.. code-block:: javascript

   db.places.ensureIndex( { loc: "2d" } ,
                           { min: 90 , max: 90 } )

For more information on precision with geospatial data, please refer to:
:ref:`precision <geospatial-indexes-precision>` section.

For more information on resolution or accuracy with geospatial data,
please refer to: :ref:`geohash <geospatial-geohash>` section.

.. _geospatial-indexes-precision:

Precision
~~~~~~~~~

Geospatial indexes record precision, or resolution, in "bits", which
are configurable during index creation. If a geospatial index has a
higher bits setting, MongoDB will be able to return more precise
results from the index. However, lower resolution indexes provide
faster performance. For more information on how bits affect precision,
please refer to the :ref:`geohash <geospatial-geohash>` section.

By default, geospatial indexes in MongoDB have 26 bits of precision
and supports as many as 32 bits of precision. With 26 bits of
precision, using the default range of -180 to 180, your precision
would be about 1 foot or 30 centimeters. For more information on how
to configure the range for your geospatial data, please refer to the
:ref:`range <geospatial-range>` section.

You can set the precision of a geospatial index during creation by
specifying the ``bits`` option to the :func:`ensureIndex()
<db.command.ensureIndex()>` method, as in the following example.

.. code-block:: javascript

   db.collection.ensureIndex( {<location field>: "2d"} ,
                              { bits: <bit precision> } )

You may create an index with fewer than 26 bits *if* your the data in
your collection is less precise and/or you're willing to sacrifice
precision in exchange for query speed.

Compound Indexes
~~~~~~~~~~~~~~~~

MongoDB supports :ref:`compound indexes <index-type-compound>` where
one component is a geospatial index, and the other component is
another document field. For queries which use these fields, MongoDB
will be able to use this index for a larger portion of operations,
which will improve performance for these queries.

Use an operation that resembles the following prototype command to
create a compound geospatial index.

.. code-block:: javascript

   db.collection.ensureIndex( { <location field>: "2d", <field>: 1 } );

These compound indexes support queries where you must filter both by
location and by another field. For example, if you need to return a
list of restaurants near a given point, but you want to optionally
select only restaurants that match a certain type (i.e. "take-out," or
"bar" stored in a ``type`` field.)

See the :ref:`<index-type-compound>` section for more information on
compound indexes.

To improve performance based on the distribution of your data, please
refer to the :ref:`<geospatial-haystack-index>` section.

.. note::

   Limits in geospatial queries are always applied to the geospatial
   component first. This will affect your result set if you specify
   additional sort operations.

.. _geospatial-haystack-index:

Haystack Index
~~~~~~~~~~~~~~

Geospatial haystack indexes makes it possible to build a special
``bucket`` index to tune for your distribution of data. Haystack
indexes improve query performance that operate within a limited
area. For more information, please refer to :doc:`Geospatial Indexes
</core/geospatial-indexes>`

To improve geospatial query performance with another field, please
refer to the :ref:`compound index <geospatial-compound-index>` section.

.. note::

   Haystack indexes are not suited to finding the closest documents to
   a particular location, as the closest documents could be far away
   compared to the bucket size.

To build a geospatial index, specify the ``geoHaystack`` for the
location field and a ``bucketSize`` parameter . The ``bucketSize``
parameter determines the granularity of the bucket index. A
``bucketSize`` of 1 creates an index where keys within 1 unit of
longitude or latitude are stored in the same bucket.

.. code-block:: javascript

   db.collection.ensureIndex({ <location field>: "geoHaystack", type: 1 },
                             { bucketSize: <bucket value> })

By default, all queries on a geospatial haystack index returns 50
documents.

For example, to index all restaurants in a particular area with a
given maximum distance of 6 degrees longitude or latitude to accelerate
searches in this area, create the index using the following command:

.. code-block:: javascript

   db.places.ensureIndex({ loc: "geoHaystack", type: 1} ,
                         { bucketSize: 6 } )

.. _geospatial-spherical-representation:

Spatial Representation Systems
------------------------------

MongoDB supports two systems for representing and returning geospatial
results. The default representation is flat and assumes coordinates
points are on a flat plane. While this representation is sufficient
for many applications, points that refer to locations on a spherical
plane (i.e. coordinates on Earth) then spherical queries will provide
more proper results.

.. note::

   There is no difference between flat and spherical *data* as stored
   in MongoDB. Rather, the only difference between spherical and flat
   geospatial systems in MongoDB is in the **queries**.

In general, the flat system is easier and accurate for certain data
sets, but may return imprecise or skewed results if your coordinate
system reflects points on a curved plane, like the Earth's surface.

For more information on query operations for spherical systems see the
:ref:`spherical queries <geospatial-query-spherical>` section.

.. _geospatial-geohash:

Geohash
-------

When creating a geospatial index, MongoDB will compute a location's
geohash value. A geohash value is a binary representation of the
location on a coordinate grid.

Geohash values are generated by continuously dividing a 2D map into
quadrants. Each quadrant is assigned a two bit value. A basic two bit
assignment for each quadrant could be:

.. code-block:: javascript

   01  11

   00  10

.. TODO @Sam: how to best format this?

These two bit values (00, 01, 10, 11) each represent one of the four
quadrants. If a point exists in any of these quadrants, a set of two
bits will be assigned to describe the location. (i.e. top left is 01 )

To describe the point's location in more detail, the map will be
further divided within the same quadrant and the same bit values
applied within the new division. Another two bits will be assigned to
the point, giving another two bits describing the location. This point
now has 2x two bits representing its location, four bits
total. (i.e. if the point is in the middle of the top left quadrant,
the new bits will be 10, and the geohash will be: 0110)

As the map is further divided, another two bit value is
assigned. Further divisions will provide additional accuracy with more
bits.

.. TODO later - this is a great insert graphical example

.. TODO the below include doesn't show up in the draft HTML

.. include:: /includes/geospatial-sharding.rst
