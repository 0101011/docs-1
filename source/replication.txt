===========
Replication
===========

.. default-domain:: mongodb

**Replication in MongoDB**

   Replica Sets provide replication in MongoDB. In a replica set,
   applications perform write operations on a single server called a
   *primary*. Other servers, called *secondaries*, then re-apply these
   operations to *replicate* the data.  Each replica set has a minimum
   of three members consisting of a :term:`primary` and one or more
   :term:`secondaries <secondary>`.

   While all members can accept read operations, only the primary can
   accept write operations. Limiting write operations to a single
   instance ensures that no operations conflict which provides strict
   consistency among members. Secondaries replicate operations
   asynchronously which permits replication to continue even if some
   members are unavailable. As a result of asynchronous replication,
   secondaries are not guaranteed to always have the latest operations.

   For more information, see :doc:`/faq/replica-sets`,
   :doc:`/core/replica-set-members`, and :doc:`/core/replication-process`.

**High Availability and Replica Sets**

   Replica sets provide automatic failover and recovery to support
   autonomous operation. If the primary of a set becomes unavailable,
   the set will elect one secondary to become primary.

   Given automatic failover, applications do not need to include logic
   to handle these kinds of failures. While administrators should
   always investigate network interruptions and other system errors
   that cause failover, these events do not require direct intervention.

   For more information, see :doc:`/core/replica-set-high-availability`.

**Replica Set Deployment Architecture**

   Replica sets provide architectural flexibility to support the
   requirements of your application. For example, you may distribute
   replica sets across multiple data centers and geographical locations
   to provide redundancy and to increase data locality for distributed
   applications. The interfaces for replica sets provide semantics for
   targeting read and write operations to the replica set with an
   awareness of location and set configuration.

   For more information, see :doc:`/core/replica-set-architectures`
   and :doc:`/applications/replication`.

**Common Uses for Replication**

   - High Availability
   - Disaster Recovery
   - Fault Tolerance
   - Analytics
   - Data Distribution
   - Increase Read Capacity

.. only:: print

   Replication for MongoDB Deployments
   -----------------------------------

.. only:: website

   Further Reading on Replication in MongoDB
   -----------------------------------------

.. toctree::
   :maxdepth: 1

   /core/replication
   /administration/replica-sets
   /reference/replication
