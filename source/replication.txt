===========
Replication
===========

.. default-domain:: mongodb

.. only:: print

   Introduction
   ------------

Replication is the process of duplicating data from one system to
another. Database systems, including MongoDB, use replication to
maintain multiple copies of a single data set. With multiple copies of
the data, replication makes the deployment resilient to the loss of any
particular copy or instance. In practice, all production
database deployments, including MongoDB, use replication.

**Replication in MongoDB**

   MongoDB provides replication by writing the data set on one system,
   called a *primary*, and copies the data set to additional systems,
   called *secondaries*. This configuration is a *replica set*. Each
   replica set has a :term:`primary` and one or more :term:`secondaries
   <secondary>`.

   While all members can accept read operations, only the primary can
   accept write operations. Writing to a single instance ensures that
   no operations conflict, which provides strict consistency among
   members. Because secondaries replicate asynchronously, they do not
   always reflect the most up-to-date write operations issued by
   clients.

   For more information, see :doc:`/core/replica-set-members` and
   :doc:`/core/replica-set-mechanics`.

**Failover and Recovery**

   Replica sets provide automatic failover and recovery to support
   autonomous operation. If the primary of a set becomes unavailable,
   the set will elect one of the secondaries to act as primary.

   Given automatic failover, applications do not need to include logic
   for handling these kinds of failure. While administrators should
   always investigate network interruptions and other system errors
   that cause failover, these events do not require direct intervention.

   For more information, see :doc:`/core/replica-set-failover`.

**Replica Set Operations**

   Replica sets provide architectural flexibility to support the
   requirements of your application. For example, you may distribute
   replica sets across multiple data centers and geographical locations
   to provide redundancy and to increase data locality for distributed
   applications. The interfaces for replica sets provide semantics for
   targeting read and write operations to the replica set with an
   awareness of location and set configuration.

   For more information, see :doc:`/core/replica-set-architectures`
   and :doc:`/applications/replication`.

.. only:: print

   Replication for MongoDB Deployments
   -----------------------------------

.. only:: website

   Further Reading on Replication in MongoDB
   -----------------------------------------

.. toctree::
   :maxdepth: 1

   /core/replication
   /administration/replica-sets
   /applications/replication
   /reference/replication
