========
Sharding
========

.. default-domain:: mongodb

.. _sharding-background:

.. only:: print

   Introduction
   ------------

Sharding is the process of storing data records across multiple
machines and is MongoDB's approach to meeting the demands of data
growth. As the size of the data increases, a single machine may not be
sufficient to store the data nor provide an acceptable read and write
throughput. Sharding solves the problem with horizontal scaling. With
sharding, you add more machines to support data growth and the demands
of read and write operations.

**Sharding in MongoDB**

   MongoDB uses a range-based approach to sharding a collection of data
   records. A common field(s) from these data records defines a space
   of values. MongoDB segments this space into non-overlapping ranges,
   and the field(s) that defines this space is the :term:`shard key`.
   The segmented ranges define the logical :term:`chunks <chunk>`. Each
   chunk represents a smaller range of values within the shard key
   range and each chunk of data records refers to all the data records
   whose shard key value falls within a single range.

   MongoDB distributes the data records by chunks across multiple
   machines or :term:`shards <shard>`. A database server called the
   :term:`config server <config database>` maintains the distribution
   details, such as range definition for a chunk. To shield the
   distribution details from client applications, a router called
   :term:`mongos` directs the queries to the appropriate shards.
   Together, the :term:`shards <shard>`, the :term:`config server(s)
   <config database>`, and the :term:`mongos` form a :term:`sharded
   cluster`.

   For more information, see  ...

**Application Transparency**

   Applications do not need to know the details of the sharding.
   Applications issue queries to the router :program:`mongos`. If the
   router can determine from the query which shard(s) contains the
   pertinent data records, :program:`mongos` will target only those
   shard(s). Otherwise, :program:`mongos` will route the queries to all
   the shards that contain data records for the collection.

   For more information, see  ...

**Automatic Data Distribution and Balancing**

   MongoDB ensures a balanced distribution of the data through two
   automatic processes: migrating and splitting. Migrating physically
   moves chunks between shards to ensure a balanced distribution of chunks
   across shards. Splitting modifies a chunk's range definition to create
   two chunks from one to ensure similar data volume sizes for the chunks.
   Splitting does not involve physical movement of data on disk.

   For more information ...

**Data Distribution and Balancing Controls**

   Although the data distribution and balancing is automatic, MongoDB
   provides users with certain controls over the behavior of these
   processes.

   For instance, MongoDB allows for *hashed shard key* which consists of a
   single field whose hashed values define a key space. The hashed
   values introduces a measure of randomness to the value to ensure that
   the data records are more evenly distributed across shards. With an
   even distribution of data records, you can reduce the frequency and
   need to balance data across shards.

   You can also tag a shard and then associate specific ranges of the
   shard key with that tag. With this association, you can control the
   balancing process so that in a geographically distributed cluster, the
   most relevant portions of the data set reside on the shards with the
   greatest proximity to the application servers.

   For more information ... 

.. only:: print

   Sharding Concepts and Deployments in MongoDB
   --------------------------------------------

.. only:: website

   Further Reading on Sharding in MongoDB
   --------------------------------------

.. toctree::
   :maxdepth: 1

   /core/sharding
   /administration/sharded-clusters
   /reference/sharding
