================
Production Notes
================

.. default-domain:: mongodb

Overview
--------

This page details system configurations that affect MongoDB,
especially in production.

Backups
-------

To make backups of your MongoDB database, please refer to the
:ref:`backups section <backup-overview>`.

Networking
----------

Always run MongoDB in a *trusted environment*, with network rules that
prevent access from *all* unknown machines, systems, or networks. As
with any sensitive system dependent on network access, your MongoDB
deployment should only be accessible to specific systems that require
access: application servers, monitoring services, and other MongoDB
components.

See documents in the :doc:`/security` section for additional
information, specifically:

- :ref:`security-port-numbers`
- :ref:`security-firewalls`
- :doc:`/tutorial/configure-linux-iptables-firewall`
- :doc:`/tutorial/configure-windows-netsh-firewall`

MongoDB on Linux
----------------

If you use the Linux kernel, the MongoDB user community has recommended
Linux kernel 2.6.36 or later for running MongoDB in production.

Because MongoDB preallocates its database files before using them, your should
use the Ext4 and XFS file systems if using the Linux kernel.

If you use the Ext4 file system, you must use Linux kernel 2.6.23 or
newer for efficient filesystem preallocation.

If you use the XFS file system, you must use Linux kernel 2.6.25 or
newer for efficient file preallocation.

For MongoDB on Linux use the following recommended configurations:

- Turn off ``atime`` for the storage volume with the :term:`database
  files <dbpath>`.

- Set file descriptor limit and user process limit to 20,000 (see
  :ref:`etc/limits` and :term:`ulimit`). A low ulimit will affect
  MongoDB when under heavy use and will produce weird errors.

- Do not use large virtual memory pages, MongoDB performs better with
  smaller virtual memory pages.

- Disable NUMA in your BIOS. If that is not possible see :ref:`NUMA
  <production-numa>`.

- Ensure that readahead settings for the block devices that store the
  database files are acceptable. See the :ref:`Readahead
  <production-readahead>` section

- Use NTP to synchronize time between your hosts. MongoDB uses
  distributed locks that requires hosts to be synchronized, especially
  :term:`config servers`.

.. _production-readahead:

MongoDB on Virtual Environments
-------------------------------

The section describes considerations when running MongoDB in some of the
more common virtual environments.

EC2
~~~

MongoDB is compatible with EC2 and requires no configuration changes
specific to the environment.

VMWare
~~~~~~

MongoDB is compatible with VMWare. Some in the MongoDB community have
run into issues with the VMWare's memory overcommit feature and suggest
disabling the feature.

You can clone a virtual machine running MongoDB. You might use this to
spin up a new virtual host that will be added as a member of a replica
set. If Journaling is enabled, the clone snapshot will be consistent. If
not using journaling, stop :program:`mongod`, clone, and then restart.

OpenVZ
~~~~~~

The MongoDB community has encountered issues running MongoDB on OpenVZ.

Disk and Storage Systems
------------------------

iostat
~~~~~~

On Linux, use the iostat command to check if disk I/O is a bottleneck
for your database. Specify a number of seconds when running iostat to
avoid displaying stats covering the time since server boot.

For example:

.. code-block:: bash

   iostat -xm 2

Use the mount command to see what device your :term:`data directory
<dbpath` resides on.

Key fields from ``iostat``:

- %util: this is the most useful field for a quick check, it
  indicates what percent of the time the device/drive is in use. If
  the number if near 100%, your server may be physical disk I/O
  bound. (There are some volume situations where this statistic
  overstates, but most often it is correct.)

- avgrq-sz: average request size. The smaller this number, the more
  random your IO operations are. This is in sectors : typically
  sectors are 512 bytes, so multiply by 0.5 to see average request
  size in kilobytes.

Hardware Requirements and Limitations
-------------------------------------

MongoDB is designed specifically with commodity hardware in mind (to
facilitate cloud computing), and has few hardware requirements or
limitations.

When installing hardware for MongoDB, consider the following:

- As with all software, more RAM and a faster CPU clock speed are
  important to productivity.

- Because databases do not perform high amounts of computation,
  increasing the number cores helps but does not provide a high level of
  marginal return.

- MongoDB has good results and good price/performance with SATA SSD
  (Solid State Disk) and with PCI (Peripheral Component Interconnect).

- Commodity (SATA) spinning drives are often a good option as the
  speed increase for random I/O for more expensive drives is not that
  dramatic (only on the order of 2x) – spending that money on SSDs or
  RAM may be more effective.

.. _production-numa:

MongoDB on NUMA-Based Hardware
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB and NUMA, Non-Uniform Access Memory, do not work well
together. If possible, use non-NUMA architectures because NUMA does
not offer MongoDB deployments advantages, since memory access is not
localized in a database like MongoDB.

If you are running MongoDB on NUMA hardware, we recommend disabling NUMA
for MongoDB and running with an interleave memory policy. Operational
problems in MongoDB will manifest in strange ways, such as slow
performance for periods of time or high system processor usage.

.. note::

   On Linux, :program:`mongod` v2.0+ checks these settings on startup
   and prints a warning if the system is NUMA-based.

To turn off NUMA for MongoDB, use the ``numactl`` command and start
:program:`mongod` in the following manner:

.. code-block:: sh

   numactl --interleave=all /usr/bin/local/mongod

Adjust the ``proc`` settings using the following command:

.. code-block:: sh

   echo 0 > /proc/sys/vm/zone_reclaim_mode

You can change ``zone_reclaim_mode`` without restarting mongod. For
more information, see documentation on `Proc/sys/vm
<http://www.kernel.org/doc/Documentation/sysctl/vm.txt>`_.

See the `The MySQL “swap insanity” problem and the effects of the NUMA
architecture <http://jcole.us/blog/archives/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/>`_
post, which describes the effects of NUMA on databases. This blog post
addresses the impact on NUMA for MySQL, but the issues for MongoDB
users are similar. The post introduces the NUMA architecture and its
goals, and illustrates how these goals are not compatible with
production databases.
