.. index:: sharding; architecture
.. index:: architectures; sharding
.. _sharding-architecture:

===========================
Shard Cluster Architectures
===========================

.. default-domain:: mongodb

This document describes the organization and design of :term:`shard
cluster` deployments.

.. seealso:: The :doc:`/administration/sharding` document, the
   ":ref:`Sharding Requirements <sharding-requirements>`" section,
   and the ":ref:`Sharding Tutorials <sharding-tutorials>`" for more
   information on deploying and maintaining a :term:`shard cluster`.

Deploying a Test Cluster
------------------------

.. warning:: Use this architecture for testing and development only.

You can deploy a very minimal :term:`shard cluster` for testing
and development. Such a cluster will have the following components:

- 1 :ref:`config server <sharding-config-server>`.

- At least one :program:`mongod` instance (either :term:`replica sets <replica set>`
  or as a standalone node.)

- 1 :program:`mongos` instance.

.. _sharding-production-deployment:

Deploying a Production Cluster
------------------------------

When deploying a shard cluster to production, you must ensure that the data
is redundant and that your individual nodes are highly available. To that end,
a production-level shard cluster should have the following:

- 3 :ref:`config servers <sharding-config-server>`, each residing on a separate system.

- 3 member :term:`replica set <replica set>` for each shard.

- :program:`mongos` instances. Typically, you will deploy a single
  :program:`mongos` instance on every application server. Alternatively,
  you may deploy several `mongos` nodes and let your application connect
  to these via a load balancer.

.. seealso:: ":doc:`/administration/replication-architectures`"
   and ":doc:`/administration/replica-sets`."

.. seealso:: The ":ref:`sharding-procedure-add-shard`" and
   ":ref:`sharding-procedure-remove-shard`" procedures for more
   information.

Sharded and Non-Sharded Data
----------------------------

Sharding operates on the collection level. You can shard multiple
collections within a database, or have multiple databases with
sharding enabled. [#sharding-databases]_ However, in production
deployments some databases and collections will use sharding, while
other databases and collections will only reside on a single database
instance or replica set (i.e. a :term:`shard`.)

.. note::

   Regardless of the data architecture of your :term:`shard cluster`,
   ensure that all queries and operations use the :term:`mongos`
   router to access the data cluster. Use the :program:`mongos` even
   for operations that do not impact the sharded data.

Every database has a "primary" [#overloaded-primary-term]_ shard that
holds all un-sharded collections in that database. All collections
that *are not* sharded reside on the primary for their database. Use
the :dbcommand:`moveprimary` command to change the primary shard for a
database. Use the :dbcommand:`printShardingStatus` command or the
:method:`sh.status()` to see an overview of the cluster, which contains
information about the chunk and database distribution within the
cluster.

.. warning::

   The :dbcommand:`moveprimary` command can be expensive because
   it copies all non-sharded data to the new shard, during which
   that data will be unavailable for other operations.

When you deploy a new :term:`shard cluster`, the "first shard" becomes
the primary for all databases before enabling sharding. Databases
created subsequently, may reside on any shard in the cluster.

.. [#sharding-databases] As you configure sharding, you will use the
   :dbcommand:`enablesharding` command to enable sharding for a
   database. This simply makes it possible to use the
   :dbcommand:`shardcollection` on a collection within that database.

.. [#overloaded-primary-term] The term "primary" in the context of
   databases and sharding, has nothing to do with the term
   :term:`primary` in the context of :term:`replica sets <replica set>`.

Failover scenarios within MongoDB
---------------------------------

A properly deployed MongoDB shard cluster will not have a single point
of failure. This section describes potential points of failure within
a shard cluster and its recovery method.

For reference, a properly deployed MongoDB shard cluster consists of:

   - 3 :term:`config database`,

   - 3 member :term:`replica set` for each shard and

   - :program:`mongos` running on each application server.

Scenarios:

- A :term:`mongos` or the application server failing.

  As each application server is running its own :program:`mongos`
  instance, the database is still accessible for other application
  servers. :program:`mongos` is stateless, so if it fails, no critical
  information is lost. When :program:`mongos` restarts, it will retrieve a copy
  of the configuration from the :term:`config database` and resume
  working.

  Suggested user intervention: restart application servers and/or
  :program:`mongos`.

- A single :term:`mongod` suffers a failure in a shard.

  A single :term:`mongod` instance failing will be recovered by a
  :term:`secondary` member of the shard replica set. As each shard
  will have a single :term:`primary` and two :term:`secondary` members
  with the exact same copy of the information, any member will be able
  to replace the failed member.

  Suggested course of action: investigate failure and replace member
  as soon as possible. Additional loss of members on same shard will
  reduce availablility.

- All three replica set members of a shard fail. 

  All data within that shard will be unavailable, but the shard
  cluster will still be operational for applications. Data on other
  shards will be accessible and new data can be written to other shard
  members.

- A :term:`config database` suffers a failure.

  As the :term:`config database` is deployed in a 3 member 
