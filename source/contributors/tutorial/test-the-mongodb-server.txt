.. _testing-the-mongodb-server:

=======================
Test the MongoDB Server
=======================

.. default-domain:: mongodb

As you work, you should periodically run the existing test suite to
ensure that you have not unintentionally broken anything. If you intend
to make a change that will break an existing test, update the test
appropriately.

We have three main "categories" of tests [#style-checking]_: JavaScript
tests, (new-style) C++ unit tests, and (old-style) C++ db tests. Avoid
writing new db tests whenever possible as we are moving towards
deprecating and deleting all db tests in favor of unit tests.

JavaScript tests are mainly for `integration testing
<http://en.wikipedia.org/wiki/Integration_testing>`_, while C++ tests
are for `unit tests <http://en.wikipedia.org/wiki/Unit_testing>`_.
Therefore, when changing a component of the codebase, you will likely
want to run a combination of C++ and JavaScript tests.

For more information on writing your own tests, refer to
:ref:`writing-tests-for-server-code`.

We suggest that you test your changes on whatever operating systems you
have access to, as we will test your patch on multiple systems before
accepting it.

.. [#style-checking] We use ``cpplint`` to perform some basic style-checking.

Running JavaScript Tests
------------------------

All JavaScript tests are in `the jstests directory
<https://github.com/mongodb/mongo/tree/master/jstests>`_. These tests
exist to test the binaries as-is, rather than building new "test"
binaries. In the ``jstests`` directory, subdirectories exist for the
different test suites, grouped roughly by what they test. The
``jstests/core`` directory is the "default" directory for
general-purpose tests.

Execute the JavaScript tests using the :program:`mongo` shell, as in:

.. code-block:: sh

   mongo jstests/core/basic1.js
   mongo jstests/core/count.js

Different tests assume different environments. For instance, some tests
may require authentication and access control, others require SSL
encrypted connections.

The program:`mongo` shell has helpers to spawn new processes. For
example, certain JavaScript tests set up a sharded and/or replicated
environment or run other Mongo binaries. For more information on how
that happens, see :ref:`writing-tests-for-server-code`.

During development, you may wish to run a small selection of tests
instead of the full suite. Often, the names of the test files give a
good clue as to what they test. Alternatively, to get a targeted subset
of test files to run, you can also run the following in the ``jstests``
directory where ``<command>`` is the shell helper corresponding to the
code path youâ€™re changing:

.. code-block:: sh

   git grep -l <command>

``smoke.py``
~~~~~~~~~~~~

With :file:`smoke.py`, you can run a subsets of the tests in
:file:`jstests/`. You can find :file:`smoke.py` in the ``buildscripts``
directory.

When :file:`smoke.py` runs tests, for most suites, it starts up an
instance of :program:`mongod`, runs the tests, and then shuts down the
:program:`mongod`. You can run :file:`smoke.py` while running other
instances of MongoDB on the same machine; it uses ports in the 30000
range and its own data directories.

.. note::

   By default, :file:`smoke.py` will run tests that create data in a subdirectory of
   :file:`/data/db`, which may interfere with other MongoDB instances
   you are running. To change the directory in which the smoke tests
   create databases, use ``--smoke-db-prefix=/some/other/path``.

You must run :file:`smoke.py` from the top-level directory of a MongoDB
source repository. This directory must contain at least the
:program:`mongo` and :program:`mongod` binaries. For certain tests, you
will also need to build the tools and :program:`mongos`.

To run :file:`smoke.py`, you need a recent version of `PyMongo
<http://api.mongodb.org/python/current/installation.html>`_.

To see the possible options for :file:`smoke.py`, run:

.. code-block:: sh

   python buildscripts/smoke.py --help

To run specific tests, use the :option:`--mode=files` option:

.. code-block:: sh

   python buildscripts/smoke.py --mode=files jstests/core/find1.js

You can specify as many files as you want.

Running C++ DB Tests
--------------------

All db tests are in `the dbtests directory
<https://github.com/mongodb/mongo/tree/master/src/mongo/dbtests>`_.
These tests are "heavy": they depend on a large portion of the kernel
code. In this sense, the old-style "unit tests" are closer to
integration tests than true unit tests. Running a db test requires a
great deal of setup; for example, initializing the global authorization
manager and creating at least one thread.

Compile C++ db tests by calling from the root directory:

.. code-block:: sh

   scons dbtest

This compiles the source for all db tests into a single executable
called ``dbtest``. To list the available old style unit tests, call:

.. code-block:: sh

   ./dbtest --list

To run a specific test, call:

.. code-block:: sh

   ./dbtest <testname>

Running C++ Unit Tests
----------------------

New-style unit tests are in the same directory as the files they test.
The test files take their name from the files that they test but
include ``_test``; e.g. ``foo_test.cpp`` to test ``foo.cpp``.

Unlike db tests, the new-style tests are standalone: each one is an
independent SCons target. These tests are enumerated in
``build/unittests.txt``.

To run all new-style C++ unit tests, you can use SCons:

.. code-block:: sh

   scons smokeCppUnittests

In some cases, you may just want to run one or two of the unit tests.
Here is an example of explicitly building and running a single C++ unit
test:

.. code-block:: sh

   scons ./build/unittests/mutable_bson_test
   ./build/unittests/mutable_bson_test