==============================
Geospatial Indexes and Queries
==============================

.. default-domain:: mongodb

MongoDB offers a number of indexes and query mechanisms to handle
geospatial information. This section introduces MongoDB's geospatial
features.

Surfaces
--------

Before storing your location data and writing queries, you must decide
the type of surface to use to perform calculations. The type you choose
affects how you store data, what type of index to build, and the syntax
of your queries.

MongoDB offers two surface types:

- **Spherical**

  To calculate geometries and distances on the earth, store your
  location data on a spherical surface. Spherical surface calculations
  requires slighly larger data sets but provide accurate data for
  calculations on the earth.

  The default datum for a sphere in MongoDB 2.4 is WGS84 - SRID 4326.
  Coordinate-axis order is "longitude, latitude."

  If you perform calculations on a sphere, store your location data as
  GeoJSON objects and use a ``2dsphere`` index. See
  :doc:`/applications/2dsphere`.

- **Flat**

  To calculate distances on a Euclidean plane, store your location data
  as points on a flat surface. Use the ``2d`` index. See
  :doc:`/applications/2d`.

Location Data
-------------

If you choose spherical surface calculations, you store location data as

- :term:`GeoJSON` objects (preferred).

  Queries on GeoJSON objects always calculate on a sphere.

  .. versionadded:: 2.4 The storage and querying of GeoJSON objects
     is new in version 2.4. Prior to version 2.4, all geospatial data was
     stored as coordinate pairs.

- :term:`Legacy coordinate pairs <legacy coordinate pairs>`

  MongoDB supports spherical surface calculations on legacy coordinate
  pairs by converting the data to the GeoJSON Point type.

If you choose flat surface calculations, you can store data only as
:term:`legacy coordinate pairs`.

Query Operations
----------------

MongoDB's geospatial query operators let you query for:

- **Inclusion**. MongoDB can query for locations contained entirely
  within a specified geometry. Inclusion queries use the
  :operator:`$geoWithin` operator.

- **Intersection**. MongoDB can query for locations that intersect with
  a specified geometry. These queries apply only to data on a spherical
  surface. These queries use the :operator:`$geoIntersects` operator.

- **Proximity**. MongoDB can query for the points nearest to another
  point. Proximity queries use the :operator:`$near` operator.

Geospatial Indexes
------------------

MongoDB provides the following geospatial index types to support the
geospatial queries:

- :doc:`2dsphere </applications/2dsphere>`, which supports:

  - Calculations on a sphere

  - Both GeoJSON objects and legacy coordinate pairs

  - A compound index with scalar index fields (i.e. ascending or
    descending) as a prefix or suffix of the ``2dsphere`` index field

  .. versionadded:: 2.4
     ``2dsphere`` indexes are not available before version 2.4.

- :doc:`2d </applications/2d>`, which supports:

  - Calculations using flat geometry

  - Legacy coordinate pairs (i.e., geospatial points on a flat
    coordinate system)

  - A compound index with only one additional field, as a suffix of the
    ``2d`` index field

See the following pages for complete documentation of geospatial indexes
and queries:

.. toctree::
   :maxdepth: 1

   /applications/2d
   /applications/2dsphere
   /applications/geohaystack
   /reference/geospatial-queries
   /tutorial/calculate-distances-using-spherical-geometry-with-2d-geospatial-indexes
   /core/geospatial-indexes
