======================
Server-side JavaScript
======================

.. default-domain:: mongodb

For the most part, you will implement all application logic and
administrative operations for MongoDB based applications with driver
:term:`drivers <driver>` or the :program:`mongo` shell which are all
database clients. However, in some cases it makes more sense to
execute some operation and application operations within the
:program:`mongod` process itself.

This document addresses the various methods provided by MongoDB for
running JavaScript inside of the :program:`mongod` code.

.. note:: Executing JavaScript in the :program:`mongod` process takes
   a JavaScript lock. Each :program:`mongod` instance can only execute
   one JavaScript process at a time.

.. _server-side-map-reduce:

Map-Reduce
----------

MongoDB performs the execution of JavaScript functions for
:doc:`/applications/map-reduce` operations on the server. These
JavaScript functions cannot access the database for any reason, and
cannot perform any :doc:`read operations </core/read-operations>`.

See the :method:`db.collection.mapReduce()` and the
:doc:`/applications/map-reduce` documentation for more information,
including examples of map-reduce. See the :ref:`map-reduce concurrency
<map-reduce-concurrency>` section, in particular for information about
the concurrency information for
map-reduce.

.. _server-side-eval:

``eval`` Command
----------------

The :dbcommand:`eval` command, and the corresponding :program:`mongo`
shell method :method:`db.eval()`, evaluates JavaScript functions on the
database server. This command may be useful if you need to make very
small modifications to a
large amount
of data, because it avoids network transfer overhead, which would
become a bottleneck for equivalent client-side operations.

.. warning::

   By default, :dbcommand:`eval` command requires a write lock. As such
   :dbcommand:`eval` will block all other read and write operations
   while it runs.

See :dbcommand:`eval` command and :method:`db.eval()` documentation for
more information, including examples.

Running ``.js`` Files with the ``mongo`` Shell Instance
-------------------------------------------------------

.. note::

   The pattern described in this section does not execute JavaScript
   inside of a :program:`mongod`, but provides an alternate method for
   avoiding network overhead.

If you cannot use :dbcommand:`eval` because of the JavaScript lock,
you may consider running JavaScript code from a ``.js`` file in a
:program:`mongo` shell instance running on the same host as the
:program:`mongod` to perform these kinds of administrative tasks.

When you run :program:`mongo` shell on the same host as the
:program:`mongod`, the network connection is via the localhost
interface which is fast and has low latency. Additionally, this method
of running JavaScript does does not require the JavaScript lock within
the :program:`mongod` instance.

.. _server-side-where:

``$where`` Operator
-------------------

To construct :doc:`MongoDB queries </core/read-operations>`, that are
not possible using the available :doc:`query operators
</reference/operators>` you can use the :operator:`$where`
operator. These query statements make it possible to constrain the
query selection using arbitrary JavaScript. You can use
:operator:`$where` to construct a SQL-like ``WHERE`` clause; however,
use the standard operators whenever possible, as they offer superior
performance.

.. warning::

   Do not write to the database within the :operator:`$where`
   JavaScript function.

See :operator:`$where` documentation for more information, including
examples.

.. _storing-server-side-javascript:

Storing JavaScript Functions  Server-Side
-----------------------------------------

.. note::

   In most cases you should store all application code, including
   server-side code as for :dbcommand:`eval` operations, together in a
   single version control system. Avoid storing JavaScript within the
   server side. when possible.

MongoDB provides support for a special collection named
:data:`system.js <<database>.system.js>` that you can use to store
special JavaScript functions for reuse. Documents in the
:data:`system.js <<database>.system.js>` have the following form:

.. code-block:: javascript

      {
        _id : "<name>" ,
        value : <function>
      }

To store a function, you can use the :method:`db.collection.save()`, as
in the following example:

.. code-block:: javascript

   db.system.js.save(
      {
        _id : "myAddFunction" ,
        value : function (x, y){ return x + y; }
      }
   );

- The ``_id`` field holds the name of the function and is unique per
  database.

- The ``value`` field holds the function definition.

Once you save a function in the :data:`system.js
<<database>.system.js>` collection, you can use the function from any
JavaScript context (e.g. :ref:`eval <server-side-eval>`, :ref:`$where
<server-side-where>`, :ref:`map-reduce <server-side-map-reduce>`).

Consider the following example from the :program:`mongo` shell that
first saves a function named ``echoFunction`` to the ``system.js``
collection and calls the function using :ref:`db.eval()
<server-side-eval>`:

.. code-block:: javascript

   db.system.js.save(
                      { _id: "echoFunction",
                        value : function(x) { return x; }
                      }
                    )

   db.eval( "echoFunction( 'test' )" )

See `storefunc.js <http://github.com/mongodb/mongo/tree/master/jstests/storefunc.js>`_
for a full example.

.. versionadded:: 2.2
   In the :program:`mongo` shell, you can use
   :method:`db.loadServerScripts()` to load all the scripts saved in
   the ``system.js`` collection for the current database. Once loaded,
   you can invoke the functions directly in the shell, as in the
   following example:

.. code-block:: javascript

   db.loadServerScripts()

   echoFunction(3)

Concurrency
-----------

Refer to the individual method or operator documentation for any
concurrency information. See also the :ref:`concurrency table
<faq-concurrency-operations-locks>`.
