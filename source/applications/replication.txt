=========================================
Application Development with Replica Sets
=========================================

.. default-domain:: mongodb

From the perspective of the client applications, whether a MongoDB
instance is a single server (i.e. "standalone") or a replica set is
mostly irrelevant. While specific configuration depends to some extent
on the client :doc:`drivers </applications/drivers>`, there is often
minimal or no differences between applications running with
:term:`replica sets <replica set>` or standalone instances.

This document, however, addresses several topics that will help
application developers take advantage of replica sets.

.. _replica-set-write-concern:

Write Concern
-------------

When a :term:`client` sends a write operation to a database server,
the operation will return without waiting for the operation to succeed
or return. To verify that the operation is successful, use the
:dbcommand:`getLastError` command. :dbcommand:`getLastError` is
configurable and can wait to return for journal writes or full disk
flush. For replica sets, :dbcommand:`getLastError` can return only
when the write operation has propagated to more than one node, or a
majority of nodes in the set.

Many drivers have a "safe" or "write concern" mode that automatically
issues a :dbcommand:`getLastError` command following write
operations to ensure that they succeed. "Safe mode,"
provides confirmation of write operations to clients, which is often
the expected method of operation, and is particularly useful when
using standalone nodes.

However, safe writes can take longer to return and are not required in
all applications. Using the ``w: "majority"`` option for
:dbcommand:`getLastError`, write operations to a replica set will
return only after a write operation has replicated to a majority of
the members of the set. At the :program:`mongo` shell, use the
following command to ensure that writes have propagated to a majority
of the nodes in the replica set:

.. code-block:: javascript

   db.runCommand( { getLastError: 1, w: "majority" } )
   db.getLastError("majority")

You may also specify ``w: 2`` so that the write operation replicates
to a second node before the command returns.

.. note::

   :dbcommand:`getLastError` assumes the current host,
   therefore, ``w: 2`` waits until the :term:`primary` and one other
   member of the replica set commits the write operation. The current
   primary always counts as ``w: 1``.

You can also configure a "default" :dbcommand:`getLastError` behavior on the
replica set configuration. For instance:

.. code-block:: javascript

   cfg = rs.conf()
   cfg.settings.getLastErrorDefaults = {w: "majority", fsync: false, j: true}
   rs.reconfig(cfg)

When the new configuration is active, the effect of the
:dbcommand:`getLastError` operation will wait until the write
operation has succeeded on a majority of the nodes before writing. By
specifying ``fsync: false`` and ``j: true`` a successful commit of
the operation to the journal is all that :dbcommand:`getLastError`
requires to return succesullly, rather than a full flush to disk. Use this the
:data:`getLastErrorDefaults`" setting on the sever level to define the
standards for a set-wide "safe mode." The default setting will only
affect :dbcommand:`getLastError` commands with *no* other
arguments.

.. index:: read preference
.. index:: slaveOk

.. _replica-set-read-preference:
.. _slaveOk:

Read Preference
---------------

By default, applications direct queries (i.e. read operations) to the :term:`primary` member in
a :term:`replca set`. To distribute reads to :term:`secondary` members, issue the
following command in the :program:`mongo` shell to enable secondary
reads:

.. code-block:: javascript

   rs.slaveOk()

MongoDB :term:`drivers` allow client applications to configure a
:term:`read preference` on a per-connection or per-operation
basis. See ":func:`rs.slaveOk()`" for more information about secondary
read operations in the :program:`mongo` shell, as well as the
appropriate :ref:`driver` API documentation for more information about read
preference configuration.

MongoDB does not guarantee that secondary members will be consistent with the state
of the primary member in a replica set. As a result, setting a :term:`read preference`
that allows reading from secondary members, accepts the possibility of
:term:`eventually consistent <eventual consistency>` read
operations. Do not allow secondary reads, unless you can accept
eventual consistency for these operations.

In many cases, your application will require the :term:`strict consistency`
that primary reads provide. However, typically secondary reads are
useful for:

- running systems operations including backups and reports without
  impacting the front-end application.

- providing low-latency queries for geographically distributed
  deployments. If one secondary is closer to an application server
  than the primary or the rest of the set, you may see better
  performance for that application if you use secondary reads.

Secondary reads also provide graceful degradation in
:ref:`failover <replica-set-failover>` situations. During failover, replica sets may take
10 seconds or more to new primary member. Because there is no primary,
applications will not be unable to perform primary reads during this period.
With read preference set to read from secondary
members, your application can continue read operations using the
remaining secondary members.

Read preferences only control the consistency of query results from a
replica set. Use appropriate :ref:`write concern` policies to ensure
proper data replication and constancy.

.. note::

   Read preference have no affect on write performance or write
   operations. If a large portion of your applications traffic are
   read operations, distributing reads to secondary members may
   provide some performance improvement. However, in most cases
   :doc:`sharding </core/sharding>` will provide better support for
   larger scale operations, because shard clusters can distribute read
   and write operations across a group of machines.
