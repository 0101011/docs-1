=========================================
Application Development with Replica Sets
=========================================

.. default-domain:: mongodb

From the perspective of a client application, whether a MongoDB
instance is running as a single server (i.e. "standalone") or a cluster 
is largely transparent.  However, replica sets (and sharded clusters of 
replica sets) offer some tunable options for write and read operations.  
This document describes those options and their implications.

.. the :ref:`write-concern` tag is here for the moment. At some point
   we'll break this into its own document.

.. _write-concern:
.. _replica-set-write-concern:

Write Concern
-------------

When a :term:`client` sends a write operation to a database server, the
operation returns without waiting for the operation to succeed or
complete by default. To check if write operations have succeeded, use the
:dbcommand:`getLastError` command. getLastError supporst the following options 
which allow you to tailor a level of "write concern" for the acknowledgement:

- no options. Confirms that the server has received the write
  operations and has executed it successfully in the :program:`mongod` instances in the
  in-memory representation of the data.  This simple and relatively low latency  form 
  of getLastError/write concern detects things such as the server being 
  down or say, a duplicate key error on the write.

- "j" or "journal" option. Confirms that the write worked on the server and has
  been written to the on-disk journal. This ensures that the data
  is durable if :program:`mongod` or the server itself crashes or shuts down 
  unexcectedly.

- ``fsync`` option. Deprecated; do not use.  Forces an fsync of all server data and returns ackowledgement 
  only after completion. Use the ``j`` option instead.

- ``w`` option, for replica sets. Confirms that the write
  operation has replicated to the specified number of replica set
  members. You may specify a specific number of servers *or* specify
  ``majority`` to ensure that the write propagates to a majority of set
  members. A write is cluster-wide committed after ackowledgement by a 
  majority.  Default value is 1.

You may combine multiple options into a single getLastError command invocation. For example 
you can combine the ``j`` and ``w`` options.

Many drivers have a "safe" mode or "write concern" that automatically
issues :dbcommand:`getLastError` after write operations to ensure
the operations complete. Safe mode provides confirmation of
write operations, but safe writes can take longer
to return and are not required in all applications. Consider the
following operations:

.. code-block:: javascript

   db.runCommand( { getLastError: 1, w: "majority" } )
   db.getLastErrorObj("majority")

These equivalent :dbcommand:`getLastError` operations ensure that write
operations return only after a write operation has replicated to a
majority of the members of the set.

.. note::

    If you specify a ``w`` value greater than the number of online, non-arbiter replica set
    members, the operation blocks until those members come back online or join the set (i.e., 
    potentially indefinitely). To specify a timeout threshold for the :dbcommand:`getLastError`
    operation, use the ``wtimeout`` argument.

You can also configure your own "default" :dbcommand:`getLastError` behavior
for the replica set. Use the :data:`settings.getLastErrorDefaults`
setting in the :doc:`replica set configuration
</reference/replica-configuration>`. For instance:

.. code-block:: javascript

   cfg = rs.conf()
   cfg.settings.getLastErrorDefaults = {w: "majority", j: true}
   rs.reconfig(cfg)

When the new configuration is active, the :dbcommand:`getLastError`
operation waits for the write operation to complete on a majority
of the set members before returning. Specifying ``j: true`` makes
:dbcommand:`getLastError` wait for a complete commit of the
operations to the journal before returning.

The :data:`getLastErrorDefaults` setting affects only :dbcommand:`getLastError`
commands with *no* other arguments.

.. index:: read preference
.. index:: slaveOk

.. _replica-set-read-preference:
.. _slaveOk:

Read Preference
---------------

Read preference describes how MongoDB clients route read operations to
:term:`secondary` members of a :term:`replica set`.

.. index:: read preference; background
.. _replica-set-read-preference-background:

Background
~~~~~~~~~~

By default, an application directs its read operations to the :term:`primary`
member in a :term:`replica set`. Reading from the primary guarantees that
read operations reflect the latest version of a document. However,
for an application that does not require fully up-to-date data, you
can improve read throughput by distributing some or all reads to
secondary members of the replica set.

The following are use cases where you might use secondary reads:

- Running systems operations that do not affect the front-end
  application, operations such as backups and reports.

- Providing low-latency queries for geographically distributed
  deployments. If one secondary is closer to an application server
  than the primary, you may see better
  performance for that application if you use secondary reads.

- Providing graceful degradation in :ref:`failover
  <replica-set-failover>` situations where a set has *no* primary for 10
  seconds or more. In this use case, you should give the application the
  :readmode:`primaryPreferred` read preference, which prevents the
  application from performing reads if the set has no primary.

MongoDB :term:`drivers <driver>` allow client applications to configure
a :term:`read preference` on a per-connection, per-collection, or
per-operation basis. For more information about secondary read
operations in the :program:`mongo` shell, see the :method:`rs.slaveOk()`
method. For more information about a driver's read preference
configuration, see the appropriate :ref:`driver` API documentation.

.. note::

   Read preferences affect how an application selects which member
   to use for read operations. As a result read
   preferences dictate if the application receives stale or
   current data from MongoDB. Use appropriate :ref:`write concern
   <replica-set-write-concern>` policies to ensure proper data
   replication and constancy.

   If read operations account for a large percentage of your
   application's traffic, distributing reads to secondary members can
   improve read throughput. However, in most cases :doc:`sharding
   </core/sharding>` provides better support for larger scale
   operations, as shard clusters can distribute read and write
   operations across a group of machines.

.. index:: read preference; semantics
.. _replica-set-read-preference-semantics:
.. index:: read preference; modes
.. _replica-set-read-preference-modes:

Read Preference Modes
~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.2

MongoDB drivers :doc:`drivers </applications/drivers>` support the
following read preference modes. You can 
specify read preference on a per-collection or per-operation basis. 

The syntax to specify read preference varies by driver depending on the idioms
of the host language. 

In a similar fashion, when a client application and driver works with a sharded 
cluster via a :program:`mongos` connection, mongos honors the read preference modes in its 
own connections to the replica set underlying each :term:`shard` in the :term:`shard cluster`.

In the :program:`mongo` shell, the
:method:`readPreference() <cursor.readPreference()>` cursor method
provides access to read preferences.

Note: All read preference modes except :readmode:`primary` may return stale data, as 
secondaries may lag in their replication from the primary. Be sure your use case can tolerate 
stale data when using those modes.

For more information, see
:ref:`read preference background <replica-set-read-preference-background>`
and :ref:`read preference
behavior <replica-set-read-preference-behavior>`. See also the :api:`documentation for your driver <>`.

.. readmode:: primary

   All read operations use only the current replica set :term:`primary`.
   This is the default. If the primary is unavailable,
   read operations produce an error or throw an exception.

   :readmode:`primary` read preference modes are not compatible with
   read preferences mode that use :ref:`tag sets
   <replica-set-read-preference-tag-sets>`. If you specify a tag set
   with :readmode:`primary`, the driver produces an error.

   The :readmode:`primary` mode prioritizes data consistency over availability
   (see :term:`CAP Theorem`).

.. readmode:: primaryPreferred

   In most situations, operations read from the :term:`primary` member
   of the set. However, if the primary is unavailable, as is the case
   during :term:`failover` situations, operations read from secondary
   members.

   When the read preference includes a :ref:`tag set
   <replica-set-read-preference-tag-sets>`, the client reads first from
   the primary, if available, and then from :term:`secondaries
   <secondary>` that match the specified tags. If no secondaries have
   matching tags, the read operation produces an error.

   As secondaries may be utilized, :readmode:`primaryPreferred` mode may return stale data in certain circumstances.

.. readmode:: secondary

   Operations read *only* from the :term:`secondary` members of the set.
   If no secondaries are available, then this read operation produces an
   error or exception.

   Most sets have at least one secondary, but there are situations
   where there may be no available secondary. For example, a set
   with a primary, a secondary, and an :term:`arbiter` may not have
   any secondaries if a member is in recovering state or down.

   When the read preference includes a :ref:`tag set
   <replica-set-read-preference-tag-sets>`, the client attempts to find
   secondary members that match the specified tag set and directs reads
   to a random secondary from among the :ref:`nearest group
   <replica-set-read-preference-behavior-nearest>`. If no secondaries
   have matching tags, the read operation produces an error.

   Note: if you have multiple secondaries, keep in mind capacity when planning 
   for a secondary to be down.  For example if a set has a primary and two secondaries,
   if one secondary goes down, all secondary mode queries will go to the one remaining 
   secondary, doubling its load.

   :readmode:`secondary` mode may return stale data.

.. readmode:: secondaryPreferred

   In most situations, operations read from :term:`secondary` members,
   but in situations where the set has *only* a :term:`primary`
   instance currently online, the read operation uses the set's primary.

   When the read preference includes a :ref:`tag set
   <replica-set-read-preference-tag-sets>`, the client attempts to find
   a secondary member that matches the specified tag set and directs
   reads to a random secondary from among the :ref:`nearest group
   <replica-set-read-preference-behavior-nearest>`. If no secondaries
   have matching tags, the read operation produces an error.

   :readmode:`secondaryPreferred` mode may return stale data.

.. readmode:: nearest

   The driver reads from the *nearest* member of the :term:`set <replica
   set>` according to the :ref:`member selection
   <replica-set-read-preference-behavior-nearest>` process. Reads in
   the readmode:`nearest` mode do not consider the member's
   *type*. Reads in :readmode:`nearest` mode may read from both
   primaries and secondaries.

   Set this mode to minimize the effect of network latency
   on read operations without preference for current or stale data.

   If you specify a :ref:`tag set <replica-set-read-preference-tag-sets>`,
   the client attempts to find a secondary member that matches the
   specified tag set and directs reads to a random secondary from
   among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`.

   May return stale data.

   .. note::

      All operations read from the nearest member of the replica set
      that matches the specified read preference mode. The
      :readmode:`nearest` mode prefers low latency reads over a
      member's :term:`primary` or :term:`secondary` status.

   .. For I/O-bound users who want to distribute reads across all
      members evenly regardless of ping time, set
      secondaryAcceptableLatencyMS very high.

.. The :method:`readPreference() <cursor.readPreference()>` reference
   above will error until DOCS-364 is complete.

.. index:: tag sets
.. index:: read preference; tag sets
.. _replica-set-read-preference-tag-sets:

When to Use Read Preference
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Care must be used when specifying read preference: modes other than the default (primary) 
can (will) return stale data. This is somewhat analogous to using a cache in front of a database: 
the cache may not be immediately consistent with the database itself.

A common use case for secondary read preferences is reporting and analytics jobs.  Having these 
queries run against a secondary can be quite helpful as it keeps these jobs from affecting operational 
capacity of the primary. 

Another use case is data locality with wide area geographic distribution. In a multi data center configuration one may want to query 
a local server to avoid network latency.

Scale-out per se is not a reason to read from secondaries; instead, it is usually better to shard.  Sharding scales both reads and writes.  Use replication for high availability, disaster recovery, and data locality in distributed environments.

Tag Sets
~~~~~~~~

Tag sets allow you to specify custom :ref:`read preferences
<replica-set-read-preference>` so that your application can target read
operations to specific members, based on custom parameters. Tag sets
make it possible to ensure that read operations target members in a
particular data center or target :program:`mongod` instances designated
for a particular class of operations, such as reporting or analytics.
For information on configuring tag sets, see
:ref:`replica-set-configuration-tag-sets` in the
:doc:`/reference/replica-configuration` document.

You can specify tag sets with the following read preference modes:

- :readmode:`primaryPreferred`
- :readmode:`secondary`
- :readmode:`secondaryPreferred`
- :readmode:`nearest`

You cannot specify tag sets with the :readmode:`primary` read preference mode.

Tags apply only when :ref:`selecting
<replica-set-read-preference-behavior-member-selection>` a
:term:`secondary` member of a set, *except* for the when in the
:readmode:`nearest` mode.

All interfaces use the same :ref:`member selection logic
<replica-set-read-preference-behavior-member-selection>` to choose the
member to which to direct read operations, basing the choice on read
preference mode and tag sets.

For more information on how read preferences :ref:`modes
<replica-set-read-preference-modes>` interact with tag sets, see the
documentation for each read preference mode.

.. index:: read preference; behavior
.. _replica-set-read-preference-behavior:

Behavior
~~~~~~~~

.. versionchanged:: 2.2

.. _replica-set-read-preference-behavior-retry:

Auto-Retry
``````````

Connection between MongoDB drivers and :program:`mongod` instances in
a :term:`replica set` must balance two concerns:

#. The client should attempt to prefer current results, and any
   connection should read from the same member of the replica set as
   much as possible.

#. The client should minimize the amount of time that the database is
   inaccessible as the result of a connection issue, networking
   problem, or :term:`failover` in a replica set.

As a result, MongoDB drivers and :program:`mongos`:

- Reuse a connection to specific :program:`mongod` for as long as
  possible after establishing a connection to that instance. This
  connection is *pinned* to this :program:`mongod`.

- Attempt to reconnect to a new member, obeying existing :ref:`read
  preference modes <replica-set-read-preference-modes>`, if connection
  to :program:`mongod` is lost.

  Reconnections are transparent to the application itself. If
  the connection permits reads from :term:`secondary` members, after
  reconnecting, the application can receive two sequential reads
  returning from different secondaries. Depending on the state of the
  individual secondary member's replication, the documents can reflect
  the state of your database at different moments.

- Return an error *only* after attempting to connect to three members
  of the set that match the :ref:`read preference mode <replica-set-read-preference-modes>`
  and :ref:`tag set <replica-set-read-preference-tag-sets>`.
  If there are fewer than three members of the set, the
  client will error after connecting to all existing members of the
  set.

  After this error, the driver selects a new member using the
  specified read preference mode. In the absence of a specified read
  preference, the driver uses :readmode:`PRIMARY`.

- After detecting a failover situation, [#fn-failover]_ the driver
  attempts to refresh the state of the replica set as quickly as
  possible.

.. [#fn-failover] When a :term:`failover` occurs, all members of the set
   close all client connections that produce a socket error in the
   driver. This behavior prevents or minimizes :term:`rollback`.

.. _replica-set-read-preference-behavior-requests:

Request Length
``````````````

MongoDB assumes that connections between the client and database are
long-lived and that the client resuses a single connection and
corresponding thread for many operations. When you set a :ref:`read
preference mode <replica-set-read-preference-modes>`, the mode
persists for all operations that use the thread. A read preference
mode persists on a per-connection basis until:

- The application sets a new read preference mode, in a new
  operation.

  This behavior permits clients to set read preferences on a per
  operation basis.

- The application (i.e. driver) connection thread goes away, as
  the result of normal application processes.

  Typically this triggers a :ref:`retry
  <replica-set-read-preference-behavior-retry>`, which may be
  transparent to the application.

- The client receives a socket exception, as is the case when
  there's a connection error or when the :program:`mongod` closes
  connections during a :term:`failover`.

As a result, unless you explicitly set read preference modes on your
connections or operations, read operations may run with unexpected
read preference modes.

.. index:: read preference; ping time
.. index:: read preference; nearest
.. index:: read preference; member selection
.. _replica-set-read-preference-behavior-ping-time:
.. _replica-set-read-preference-behavior-nearest:
.. _replica-set-read-preference-behavior-member-selection:

Member Selection
````````````````

Both clients, by way of their drivers, and :program:`mongos` instances for
shard clusters send periodic "ping," messages to all member of the
replica set to determine latency from the application to each
:program:`mongod` instance.

For any operation that targets a member *other* than the
:term:`primary`, the driver:

#. Assembles a list of suitable members, taking into account member type
   (i.e. secondary, primary, or all members.)

#. Determines which suitable member is the closest to the
   client in absolute terms.

#. Builds a list of members that are within a defined ping distance (in
   milliseconds) of the "absolute nearest" member. [#acceptable-secondary-latency]_

#. Selects a member from these hosts at random. The member receives the read operation.

Once the application selects a member of the set to use for read
operations, the driver continues to use this connection for read
preference until the application specifies a new read preference or
something interrupts the connection. See ":ref:`replica-set-read-preference-behavior-requests`"
for more information.

.. [#acceptable-secondary-latency] Applications can configure the
   threshold used in this stage. The default "acceptable latency" is
   15 milliseconds. For :program:`mongos` you can use the
   :option:`--localThreshold <mongos --localThreshold>` or
   :setting:`localThreshold` runtime options to set this value.

.. index:: read preference; sharding
.. index:: read preference; mongos
.. _replica-set-read-preference-behavior-sharding:
.. _replica-set-read-preference-behavior-mongos:

Sharding and ``mongos``
```````````````````````

.. versionchanged:: 2.2
   Before version 2.2, :program:`mongos` did not support the
   :ref:`read preference mode semantics <replica-set-read-preference-modes>`.

In most :term:`shard clusters <shard cluster>`, a :term:`replica set`
provides each shard where read preferences are also applicable. Read
operations in a shard cluster, with regard to read preference, are
identical to unsharded replica sets.

Unlike simple replica sets, in shard clusters, all interactions with
the shards pass from the clients to the :program:`mongos` instances
that are actually connected to the set members. :program:`mongos` is
responsible for the application of the read preferences, which is
transparent to applications.

There are no configuration changes required for full support of read
preference modes in sharded environments, as long as the
:program:`mongos` is at least version 2.2. All :program:`mongos`
maintain their own connection pool to the replica set members. As a
result:

- A request without a specified preference has
  :readmode:`primary`, the default, unless, the :program:`mongos`
  reuses an existing connection that has a different mode set.

  Always explicitly set your read preference mode to prevent
  confusion.

- All :readmode:`nearest` and latency calculations reflect the
  connection between the :program:`mongos` and the :program:`mongod`
  instances, not the client and the :program:`mongod` instances.

  This produces the desired result, because all results must pass
  through the :program:`mongos` before returning to the client.

Database Commands
`````````````````

Because some :term:`database commands <database command>` read and
return data from the database, all of the official drivers support
full :ref:`read preference mode semantics <replica-set-read-preference-modes>`
for the following commands:

- :dbcommand:`group`
- :dbcommand:`mapReduce` [#inline-map-reduce]_
- :dbcommand:`aggregate`
- :dbcommand:`collStats`
- :dbcommand:`dbStats`
- :dbcommand:`count`
- :dbcommand:`distinct`
- :dbcommand:`geoNear`
- :dbcommand:`geoSearch`
- :dbcommand:`geoWalk`

.. [#inline-map-reduce] Only "inline" :dbcommand:`mapReduce`
   operations that do not write data support read preference,
   otherwise these operations must run on the :term:`primary`
   members.
