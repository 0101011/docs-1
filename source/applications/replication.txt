=========================================
Application Development with Replica Sets
=========================================

.. default-domain:: mongodb

From the perspective of a client application, whether a MongoDB instance
is running as a single server (i.e. "standalone") or a replica set is
largely irrelevant. However, from the perspective of the application
developer, replica sets offer certain options not available in
standalone instances. This document describes those options.

.. _replica-set-write-concern:

Write Concern
-------------

When a :term:`client` sends a write operation to a database server, the
operation returns without waiting for the operation to succeed or
complete. To check if write operations have succeeded, use the
:dbcommand:`getLastError` command. Set the command's options as follows,
according to your level of write concern:

- no options. Confirms that the server has received the write
  operations and has modified the :program:`mongod` instances in the
  in-memory representation of the data.

- "j" or "journal" option. Confirms that the server has
  committed the data to the on-disk journal. This ensures that the data
  is durable in the event that :program:`mongod` experiences an
  unexpected shut down.

- ``fsync`` option. Confirms that the :program:`mongod`
  instance has flushed the write operation to disk. Do not use this
  operation in normal production situations: use ``j`` to ensure this
  level of durability.

- ``w`` option, for replica sets. Confirms that the write
  operation has replicated to the specified number of replica set
  members. You may specify a specific number of servers *or* specify
  ``majority`` to ensure that the write propagates to a majority of set
  members.

Many drivers have a "safe" mode or "write concern" that automatically
issues :dbcommand:`getLastError` after write operations to ensure
the operations complete. Safe mode provides confirmation of
write operations to the client, but safe writes can take longer
to return and are not required in all applications. Consider the
following operations:

.. code-block:: javascript

   db.runCommand( { getLastError: 1, w: "majority" } )
   db.getLastErrorObj("majority")

These equivalent :dbcommand:`getLastError` operations ensure that write
operations return only after a write operation has replicated to a
majority of the members of the set. You might also specify ``w: 2`` so
that write operations replicate to a second member before the command
returns.

.. note::

   :dbcommand:`getLastError` assumes the primary, which
   is equivalent to ``w: 1``. ``w: 2`` waits until 2 members of the
   set, i.e. the :term:`primary` and another member, receive the write
   before confirming the write operation.

   If you specify a ``w`` value greater than the number of running set
   members, the operation blocks until those numbers join the set. To
   specify a timeout threshold for the :dbcommand:`getLastError`
   operation, use the ``wtimeoute`` argument.

   ``w: 0`` is valid but has no effect and is equivalent to a no-op.

You can also configure a "default" :dbcommand:`getLastError` behavior
for the replica set. Use the :data:`settings.getLastErrorDefaults`
setting in the :doc:`replica set configuration
</reference/replica-configuration>`. For instance:

.. code-block:: javascript

   cfg = rs.conf()
   cfg.settings.getLastErrorDefaults = {w: "majority", j: true}
   rs.reconfig(cfg)

When the new configuration is active, the :dbcommand:`getLastError`
operation waits for the write operation to complete on a majority
of the set members before returning. By specifying ``j: true``,
:dbcommand:`getLastError` waits for a complete commit of the
operations to the journal before returning.

To define the standards for a set-wide "safe mode", use the
:data:`getLastErrorDefaults` setting in the :term:`replica
set` configuration. The default setting only affects :dbcommand:`getLastError`
commands with *no* other arguments.

.. index:: read preference
.. index:: slaveOk

.. _replica-set-read-preference:
.. _slaveOk:

Read Preference
---------------

Read preference describes how MongoDB clients route read operations to
:term:`secondary` members of a :term:`replica set`.

.. index:: read preference; background
.. _replica-set-read-preference-background:

Background
~~~~~~~~~~

By default, applications direct their read operations to the :term:`primary`
member in a :term:`replica set`. Reading from the primary guarantees that
read operations reflect the latest version of a document. However,
for applications that do not require fully up-to-date data, you
can improve read throughput by distributing some or all reads to
secondary members of the replica set.

The following are use cases where you might use secondary reads:

- Running systems operations that do not affect the front-end
  applications, operations such as backups and reports.

- Providing low-latency queries for geographically distributed
  deployments. If one secondary is closer to an application server
  than the primary, you may see better
  performance for that application if you use secondary reads.

- Providing graceful degradation in :ref:`failover
  <replica-set-failover>` situations where a set has *no* primary for 10
  seconds or more. In this use case, you should give applications the
  :readmode:`primaryPreferred` read preference, which prevents the
  applications from performing reads if the set has no primary.

MongoDB :term:`drivers <driver>` allow client applications to
configure a :term:`read preference` on a per-connection, per-collection, or
per-operation basis. For more
information about secondary read operations in the :program:`mongo`
shell, see the :func:`rs.slaveOk()` method.
For more information about a driver's read preference configuration, see
the appropriate :ref:`driver` API documentation.

.. note::

   Read preferences affect how an application selects which member
   to use for read operations. As a result read
   preferences dictate if the application receives stale or
   current data from MongoDB. Use appropriate :ref:`write concern
   <replica-set-write-concern>` policies to ensure proper data
   replication and constancy.

   If read operations account for a large percentage of your
   application's traffic, distributing reads to secondary members may
   improve read throughput. However, in most cases :doc:`sharding
   </core/sharding>` provides better support for larger scale
   operations, because shard clusters can distribute read and write
   operations across a group of machines.

.. index:: read preference; semantics
.. _replica-set-read-preference-semantics:
.. index:: read preference; modes
.. _replica-set-read-preference-modes:

Read Preference Modes
~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.2

All MongoDB drivers :doc:`drivers </applications/drivers>` support the
following read preference modes. These semantics make it possible to
specify read preference on a per-collection or per-operation
basis. The member of the :term:`replica set` that the client reads from
can affect how current or stale the result set is. For more information, see :ref:`read
preference background <replica-set-read-preference-background>` and
:ref:`read preference behavior <replica-set-read-preference-behavior>`.
For preferences specific to your driver, see the :api:`documentation for your driver <>`.
:program:`mongos` also supports
all read-preference modes in its connections to the replica sets that
provide each :term:`shard` in a :term:`shard cluster`.

All MongoDB drivers provide five read
preference modes, which are constants set in the drivers
themselves. While the names are the same, the exact syntax depends the idioms
of the host language. In the :program:`mongo` shell, the
:func:`readPreference() <cursor.readPreference()>` cursor method
provides access to read preferences, which have the following names.

.. readmode:: primary

   All read operations from the client
   use the :term:`primary` member only.

   This is the default read preference.

   If the primary is unavailable, all operations produce an error or
   throw an exception. :readmode:`primary` read preference modes are not
   compatible with read preferences modes that use :ref:`tag sets
   <replica-set-read-preference-tag-sets>` If you specify a tag set with
   :readmode:`primary`, the driver produces an error.

   The :readmode:`primary` mode sacrifices availability for
   consistency, in terms of the :term:`CAP Theorem`.

.. readmode:: primaryPreferred

   Operations read from the :term:`primary` in
   most situations. However, if the primary is unavailable, as is the
   case during :term:`failover` situations, then these read operations
   can read from secondary members.

   When the read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`,
   the client reads first from the primary, if it is available, and
   then from those :term:`secondaries <secondary>` that match the specified
   tags. If no secondaries match,
   the read operation produces an error.

   The :readmode:`primaryPreferred` mode sacrifices consistency for
   greater availability, in terms of the :term:`CAP Theorem`.

.. readmode:: secondary

   With the :readmode:`secondary` read preference mode, operations
   read from the :term:`secondary` member of the set if available.
   If there are no secondaries available, the
   operations produce errors.

   Most sets have at least one secondary, but there are situations
   where there may not be an available secondary. For example, a set
   with a primary, a secondary, and an :term:`arbiter` may not have
   any secondaries if a member is ever in recovering mode.

   When the read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`,
   the client attempts to find a secondary members that match the
   specified tag set and directs reads to a random secondary from
   among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`.
   If there are no secondaries with tags that match the specified tag
   set, this read operation produces an error.

   The :readmode:`secondary` mode sacrifices consistency for
   greater availability, in terms of the :term:`CAP Theorem`.

.. readmode:: secondaryPreferred

   With the :readmode:`secondaryPreferred`, operations read from
   :term:`secondary` members, but in situations where the set *only*
   has a :term:`primary` instance, the read operation uses the
   set's primary.

   When :readmode:`secondaryPreferred` reads from a secondary and the
   read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`,
   the client attempts to find secondary members that match the
   specified tag set and directs reads to a random secondary from
   among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`.
   If there are no secondaries with tags that match the specified tag
   set, this read operation produces an error.

   The :readmode:`secondaryPreferred` mode sacrifices consistency for
   greater availability, in terms of the :term:`CAP Theorem`.

.. readmode:: nearest

   With the :readmode:`nearest`, the driver reads from the
   *nearest* member of the :term:`set <replica set>` according to
   the :ref:`member selection <replica-set-read-preference-behavior-nearest>`
   process :readmode:`nearest` read operations will not have any
   consideration for the *type* of the set member. Reads in
   :readmode:`nearest` mode may read from both primaries and
   secondaries.

   Set this mode when you want minimize the effect of network latency
   on read operations without preference for current or stale data.

   If you specify a :ref:`tag set <replica-set-read-preference-tag-sets>`,
   the client attempts to find a secondary members that match the
   specified tag set and directs reads to a random secondary from
   among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`.

   .. note::

      All operations read from the nearest member of the replica set
      that matches the specified read preference mode.
      :readmode:`nearest` prefers low latency reads over a
      member's :term:`primary` or :term:`secondary` status.

   .. For I/O-bound users who want to distribute reads across all
      members evenly regardless of ping time, set
      secondaryAcceptableLatencyMS very high.

.. The :func:`readPreference() <cursor.readPreference()>` reference
   above will error until DOCS-364 is complete.

.. index:: tag sets
.. index:: read preference; tag sets
.. _replica-set-read-preference-tag-sets:

Tag Sets
~~~~~~~~

Tag sets allow you to specify custom :ref:`read preferences
<replica-set-read-preference>`, so that your application can target
read operations to specific members based on custom parameters. Tag
sets make it possible to ensure that read operations target members of
the set in a particular data center, or :program:`mongod` instances
designated for a particular class of operations, such as reporting or
analytics. The :doc:`/reference/replica-configuration` document
contains a section on :ref:`tag set configuration
<replica-set-configuration-tag-sets>`.

Read preference :ref:`modes <replica-set-read-preference-modes>` interact
with tag sets, as specified in the documentation of each read
preference mode. The :readmode:`primary` read preference mode is
incompatible with tag sets, but you may specify a tag set with one of
each of the following read preference modes:

- :readmode:`primaryPreferred`
- :readmode:`secondary`
- :readmode:`secondaryPreferred`
- :readmode:`nearest`

Tags only apply when :ref:`selecting <replica-set-read-preference-behavior-member-selection>`
a :term:`secondary` member of the set, *except* for the
:readmode:`nearest` mode. See the documentation of each read preference mode for more
information on the interaction of the read preference mode and tag
sets. All interfaces use the same :ref:`member selection logic
<replica-set-read-preference-behavior-member-selection>` to choose a
member to direct read operations to based on read preference mode and
tag sets.

.. index:: read preference; behavior
.. _replica-set-read-preference-behavior:

Behavior
~~~~~~~~

.. versionchanged:: 2.2

.. _replica-set-read-preference-behavior-retry:

Auto-Retry
``````````

Connection between MongoDB drivers and :program:`mongod` instances in
a :term:`replica set` must balance two concerns:

#. The client should attempt to prefer current results and any
   connection should read from the same member of the replica set as
   much as possible.

#. The client should minimize the amount of time that the database is
   inaccessible as the result of a connection issue, networking
   problem, or :term:`failover` in a replica set.

As a result, MongoDB drivers and :program:`mongos` will:

- reuse a connection to specific :program:`mongod` for as long as
  possible after establishing a connection to that instance. This
  connection is *pinned* to this :program:`mongod`.

- attempt to reconnect to a new member, obeying existing :ref:`read
  preference mode <replica-set-read-preference-modes>` when it lose a
  connection to its :program:`mongod`.

  These reconnections are transparent to the application itself. If
  the connection permits reads from :term:`secondary` members, after
  reconnecting, the application can receive two sequential reads
  returning from different secondaries. Depending on the state of the
  individual secondary member's replication, the documents can reflect
  the state of your database at different moments.

- return an error *only* after attempting to connect to three members
  of the set that match the :ref:`read preference mode <replica-set-read-preference-modes>`
  and :ref:`tag set <replica-set-read-preference-tag-sets>`.
  If there are fewer than three members of the set, the
  client errors after connecting to all existing members of the
  set.

  After this error, the driver selects a new member using the
  specified read preference mode, or in absence of a specified read
  preference :readmode:`PRIMARY`.

- after detecting a failover situation, [#fn-failover]_ the driver
  attempts to refresh its state of the replica set as quickly as
  possible.

.. [#fn-failover] When a :term:`failover` occurs, all members of the set
   closes all client connections producing a socket error in the
   driver. This behavior prevents or minimized :term:`rollback`.

.. _replica-set-read-preference-behavior-requests:

Request Length
``````````````

MongoDB assumes that connections between the client and database are
long-lived and that the client reuses a single connection and
corresponding thread for many operations. When you set a :ref:`read
preference mode <replica-set-read-preference-modes>`, that mode
persists for all operations that use this thread. A read preference
mode persists on a per-connection basis until:

- the application sets a new read preference mode, in a new
  operation.

  This behavior permits clients to set read preferences on a per
  operation basis.

- the application (i.e. driver) connection thread goes away, as
  the result of normal application processes.

  Typically this triggers a :ref:`retry
  <replica-set-read-preference-behavior-retry>`, which may be
  transparent to the application.

- the client receives a socket exception, as is the case when
  there's a connection error, or when the :program:`mongod` closes
  connections during a :term:`failover`.

As a result, unless you explicitly set read preference modes on your
connections or operations, read operations may run with unexpected
read preference modes.

.. index:: read preference; ping time
.. index:: read preference; nearest
.. index:: read preference; member selection
.. _replica-set-read-preference-behavior-ping-time:
.. _replica-set-read-preference-behavior-nearest:
.. _replica-set-read-preference-behavior-member-selection:

Member Selection
````````````````

Clients by way of their drivers, and :program:`mongos` instances for
shard clusters, send periodic "ping," messages to all member of the
replica set to determine latency from the application to each
:program:`mongod` instance.

For any operation that targets a member *other* than the
:term:`primary`, the driver:

#. assembles a list of suitable members, taking account member type
   (i.e. secondary, primary, or all members.)

#. determines which of these suitable members is the closest to the
   client in absolute terms.

#. builds a list of members that are within a defined ping distance (in
   milliseconds) of the "absolute nearest" member. [#acceptable-secondary-latency]_

#. selects a member to perform the read operation on from these hosts
   at random.

Once the application selects a member of the set to use for read
operations, the driver continues to use this connection for read
preference until the application specifies a new read preference or
something interrupts the connection. See :ref:`replica-set-read-preference-behavior-requests`
for more information.

.. [#acceptable-secondary-latency] Applications can configure the
   threshold used in this stage. The default "acceptable latency" is
   15 milliseconds. For :program:`mongos` you can use the
   :option:`--localThreshold <mongos --localThreshold>` or
   :setting:`localThreshold` runtime options to set this value.

.. index:: read preference; sharding
.. index:: read preference; mongos
.. _replica-set-read-preference-behavior-sharding:
.. _replica-set-read-preference-behavior-mongos:

Sharding and ``mongos``
```````````````````````

.. versionchanged:: 2.2
   Before version 2.2, :program:`mongos` did not support the
   :ref:`read preference mode semantics <replica-set-read-preference-modes>`.

In most :term:`shard clusters <shard cluster>`, a :term:`replica set`
provides each shard, where read preferences are also applicable. Read
operations in a shard cluster, with regard to read preference, are
identical to unsharded replica sets.

Unlike simple replica sets, in shard clusters, all interactions with
the shards pass from the clients to the :program:`mongos` instances
that are actually connected to the set members. :program:`mongos` is
responsible for the application of the read preferences, which is
transparent to applications.

There are no configuration changes required for full support of read
preference modes in sharded environments, as long as the
:program:`mongos` is at least version 2.2. All :program:`mongos`
maintain their own connection pool to the replica set members, as a
result:

- a request without a specified preference has
  :readmode:`primary`, the default, unless, the :program:`mongos`
  reuses and existing connection that has a different mode set.

  Always explicitly set your read preference mode to prevent
  confusion.

- all :readmode:`nearest` and latency calculations reflect the
  connection between the :program:`mongos` and the :program:`mongod`
  instances, not the client and the :program:`mongod` instances.

  This produces the desired result, because all results must pass
  through the :program:`mongos` before returning to the client.

Database Commands
`````````````````

Because some :term:`database commands <database command>` read and
return data from the database, all of the official drivers support
full :ref:`read preference mode semantics <replica-set-read-preference-modes>`
for the following commands:

- :dbcommand:`group`
- :dbcommand:`mapReduce` [#inline-map-reduce]_
- :dbcommand:`aggregate`
- :dbcommand:`collStats`
- :dbcommand:`dbStats`
- :dbcommand:`count`
- :dbcommand:`distinct`
- :dbcommand:`geoNear`
- :dbcommand:`geoSearch`
- :dbcommand:`geoWalk`

.. [#inline-map-reduce] Only "inline" :dbcommand:`mapReduce`
   operations that do not write data support read preference,
   otherwise these operations must run on the :term:`primary`
   members.
