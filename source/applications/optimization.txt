============
Optimization
============

.. default-domain:: mongodb

This section describes techniques for optimizing database performance.

.. seealso:: :ref:`aggregation-optimize-performance`

Use Indexes
-----------

For a regularly issued query, create an index on the query's fields so
that MongoDB searches the index, not the collection. Searching an index
is much faster than searching a collection.

For example, if you have a ``posts`` database containing blog posts, and if
you regularly issue a query that sorts on the ``timestamp`` field:

.. code-block:: javascript

   db.posts.find().sort( { timestamp : -1 } )

Then your first optimization should be to create an index on the key
used for the sorting:

.. code-block:: javascript

   db.posts.ensureIndex( { timestamp : 1 } )

With the new index, MongoDB can sort based on index information, rather than by accessing
each document in the collection directly.

Indexes speed performance for any field that is part of the query
specification, including fields used by :doc:`aggregation operators
</reference/simple-aggregation>`.

For more information on using indexes to improve performance, see
:ref:`indexes-create-to-match-queries`.

Limit Results
-------------

MongoDB :term:`cursors <cursor>` return results in groups of multiple
documents. If you know the number of results you want, you can reduce
the demand on network and database resources by issuing the
:method:`cursor.limit()` method.

For example, if you need only 10 results from your previous query to the
``posts`` database, you would issue the following command:

.. code-block:: javascript

   db.posts.find().sort( { timestamp : -1 } ).limit(10)

For more information on limiting results, see :method:`cursor.limit()`

Use Projections to Return Only Necessary Data
---------------------------------------------

When you need only certain fields from documents, you can achieve better
performance by returning only the fields you need:

For example, if in your previous query to the ``posts`` database, you
need only the ``timestamp``, ``title``, ``author``, and ``abstract``
fields, you would issue the following command:

.. code-block:: javascript

   db.posts.find( {}, { timestamp : 1 , title : 1 , author : 1 , abstract : 1} ).sort( { timestamp : -1 } ).limit(10)

For more information on using projections, see
:ref:`read-operations-projection`.

Use the Database Profiler to Evaluate Performance
-------------------------------------------------

.. todo Add link below to Database Profiler when that doc is migrated.
   The link below to `database-profiling` is NOT the link to the DP doc.

MongoDB includes a database profiler that shows performance
characteristics of each operation against the database. Use the profiler
to locate any queries or write operations that are running slow. You can
used this information, for example, to determine what indexes to create.

For more information, see :ref:`database-profiling`.

Use :method:`db.currentOp()` to Evaluate Performance
----------------------------------------------------

The :method:`db.currentOp()` method reports on current operations
running on a :program:`mongod` instance. For more information, see
:doc:`/reference/current-op`.

Use :operator:`explain <$explain>` to Evaluate Performance
----------------------------------------------------------

Use :method:`explain <cursor.explain()>` to get more information on the
performance of your queries.

Use :operator:`hint <$hint>` to Select a Particular Index
---------------------------------------------------------

In most cases the :ref:`query optimizer
<read-operations-query-optimization>` selects the best index. But
:method:`hint <cursor.hint()>` might help when you query on multiple
fields that are indexed in separate indexes. You can :method:`hint
<cursor.hint()>` to select the index to use, potentially improving
performance.

Use the Increment Operator to Perform Operations on the Server Side
-------------------------------------------------------------------

Use MongoDB's :operator:`$inc` operator to increment fields. The
operator increments fields on the server side, which can be much faster
than updating a document on the client side.

Perform Server Side Code Execution
----------------------------------

When appropriate, perform an operation on the database server to
eliminate client/server network turnarounds. For more information, see
:wiki:`Server-side+Code+Execution`.

Use Capped Collections
----------------------

:doc:`/core/capped-collections` are circular fixed-size collections that
keep documents well-ordered, even without the use of an index. This
means that capped collections can receive very high-speed reads and
writes.

These collections are particularly useful for keeping log files but are
not limited to that purpose. Use capped collections where appropriate.

Use Natural Order
-----------------

To return documents in the order they exist on disk, use the
:operator:`$natural` operator. :term:`Natural order <natural order>`
does not use indexes but can be fast for operations where the first or
last items on disk are required.
