============================
Introduction to MongoDB
============================

.. default-domain:: mongodb


Welcome to MongoDB. This guide provides a brief introduction to
MongoDB. We will introduce major concepts and walk you through the process of
installing and using MongoDB.

What is MongoDB
---------------

MongoDB is an open-source document database that provides high
performance, high availability, and easy scalability.

.. COMMENT Just seeing what happens if I move up the document section
   since we talk about documents in the bulleted list

Document Database
~~~~~~~~~~~~~~~~~

A record in MongoDB is a document, which is a data structure composed
of field and value pairs, similar to a JSON object. The values for
fields can include other documents, arrays, and arrays of documents.

.. include:: /images/crud-annotated-document.rst

Documents provide flexibility to contain fields and values of varying
types as well as contain varying number of fields and values. Documents
also facilitate the addition of new fields and values as well as change
the types of values.

The advantages of using documents are:

- Documents (objects) map nicely to programming language data types.

- Embedded documents and arrays reduce need for joins.

- Dynamic schema makes polymorphism easier.

.. COMMENT I guess for me, I like to know about MongoDB records and
   what it does for me. Basically, just enough to get me curious as well as on my way.
   I rewrote a bit about the relational database, but
   I don't know if I want to read about that in getting started. So I
   commented it out.

.. I commented out your paragraph for now.
   An easy way to catagorize databases is how a databases defines a record. The
   simpliest of records is a key value. This is a structureless records accessible
   through a single value. A relational database is a fixed structure with
   multiple keys each with a single value. A record in MongoDB is a document. A
   document is flexible like a key value, but contains many keys like a relational
   database. Unlike a realational database each key can contain many values each
   of which could be a document itself. While not a perfect analogy, an easy way
   to think of a document is a JSON object.

Key Features
~~~~~~~~~~~~

High Performance
````````````````

- Embedding reduces io on server
- Indexes can include keys from embedded documents and arrays.
- Optional streaming writes (no acknowledgments).

High Availability
``````````````````

- Replicated servers with automatic master failover.

Easy Scalability
````````````````

- Automatic sharding distributes collection data across machines.
- Eventually-consistent reads can be distributed over replicated servers.
