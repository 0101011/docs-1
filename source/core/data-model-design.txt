.. _data-modeling-decisions:

=================
Data Model Design
=================

.. default-domain:: mongodb

Data modeling design decisions involve determining how to structure your
documents to model the data effectively. The primary decision is
whether to :ref:`embed <data-modeling-embedding>` or to :ref:`use
references <data-modeling-referencing>`.

.. _data-modeling-embedding:

Embedding
---------

With MongoDB, you can choose to de-normalize your data and create a
nested data structure, taking advantage of MongoDB's support for
embedded documents. To de-normalize data, simply store related data in
a single :term:`document`, creating embedded subdocuments as needed.

With a de-normalized data structure that keeps related data together,
read and write operations are more likely to involve a single
document. These operations are less expensive for the
server than operations that involve multiple documents.

In general, use embedded data models when:

- you have "contains" relationships between entities. See
  :ref:`data-modeling-example-one-to-one`.

- you have one-to-many relationships where the "many" objects always
  appear with or are viewed in the context of their parent documents.
  See :ref:`data-modeling-example-one-to-many`.

In general, embedding provides better performance for read operations,
as well as the ability to request and retrieve related data in a
single database operation.

However, embedding related data in documents can lead to situations where
documents grow after creation. Document growth can impact write
performance and lead to data fragmentation. Furthermore, documents in
MongoDB must be smaller than the :limit:`maximum BSON document size
<BSON Document Size>`. For larger documents, consider using
:doc:`GridFS </core/gridfs>`.

.. seealso::

   - :term:`dot notation` for information on "reaching into" embedded
     sub-documents.

   - :ref:`read-operations-arrays` for more examples on accessing arrays.

   - :ref:`read-operations-subdocuments` for more examples on accessing
     subdocuments.

.. _data-modeling-referencing:

Referencing
-----------

Normalized data models describe relationships using :doc:`references
</reference/database-references>` between documents.

In general, use normalized data models:

- when embedding would result in duplication of data but would not
  provide sufficient read performance advantages to outweigh the
  implications of the duplication.

- to represent more complex many-to-many relationships.

- to model large hierarchical data sets (see :ref:`data-modeling-trees`).

Referencing provides more flexibility than embedding; however,
client-side applications must issue follow-up queries to resolve the
references. In other words, using references requires more roundtrips
to the server.

See :ref:`data-modeling-publisher-and-books` for an example of
referencing.

.. _data-modeling-atomicity:

Atomicity
---------

In MongoDB, operations are atomic at the :term:`document` level: no
single write operation can atomically affect more than one document or
more than one collection. [#record-atomicity]_ In consequence, the
need for atomic operations should influence decisions to use embedded
or referenced relationships when designing a data model for MongoDB.

Fields that need to be modified together atomically should be embedded
in the same document; fields that can be modified non-atomically can
be located in separate documents. See
:ref:`data-modeling-atomic-operation` for an example of atomic updates
within a single document.

.. [#record-atomicity] Document-level atomic operations include all
   operations within a single MongoDB document record: operations that
   affect multiple sub-documents within that single record are still
   atomic.
