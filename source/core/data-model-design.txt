.. _data-modeling-decisions:

=================
Data Model Design
=================

.. default-domain:: mongodb

Effective data models support your application needs. The key
consideration for the structure of your documents is the decision to
:ref:`embed <data-modeling-embedding>` or to :ref:`use references
<data-modeling-referencing>`.

.. _data-modeling-embedding:

Denormalized Data Models
------------------------

With MongoDB, you can choose to denormalize your data and create a
nested data structure, taking advantage of MongoDB's support for
embedded documents. To denormalize data, simply store related data in
a single :term:`document`, creating embedded subdocuments as needed.

With a de-normalized data structure that keeps related data together,
read and write operations are more likely to involve a single
document. These operations are less expensive for the
server than operations that involve multiple documents.

In general, use embedded data models when:

- you have "contains" relationships between entities. See
  :ref:`data-modeling-example-one-to-one`.

- you have one-to-many relationships where the "many" objects always
  appear with or are viewed in the context of their parent documents.
  See :ref:`data-modeling-example-one-to-many`.

In general, embedding provides better performance for read operations,
as well as the ability to request and retrieve related data in a
single database operation.

However, embedding related data in documents can lead to situations where
documents grow after creation. Document growth can impact write
performance and lead to data fragmentation. Furthermore, documents in
MongoDB must be smaller than the :limit:`maximum BSON document size
<BSON Document Size>`. For larger documents, consider
:doc:`GridFS </core/gridfs>`.

To interact with embedded documents, use :term:`dot notation` to "reach
into" embedded documents. See :ref:`query for data in arrays
<read-operations-arrays>` and :ref:`query data in sub-documents
<read-operations-subdocuments>` for more examples on accessing data in
arrays and embeded documents.

.. _data-modeling-referencing:

Normalized Data Models
----------------------

Normalized data models describe relationships using :doc:`references
</reference/database-references>` between documents.

In general, use normalized data models:

- when embedding would result in duplication of data but would not
  provide sufficient read performance advantages to outweigh the
  implications of the duplication.

- to represent more complex many-to-many relationships.

- to model large hierarchical data sets (see :ref:`data-modeling-trees`).

Referencing provides more flexibility than embedding. However,
client-side applications must issue follow-up queries to resolve the
references. In other words, normalized data models can require more
roundtrips to the server.

See :ref:`data-modeling-publisher-and-books` for an example of
referencing.
