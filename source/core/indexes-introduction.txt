.. index:: index; overview
.. _index-overview-synopsis:

Index Introduction
==================

.. default-domain:: mongodb

An index is a data structure that allows you to quickly locate documents
based on the values stored in certain specified fields. Fundamentally,
indexes in MongoDB are similar to indexes in other database systems.
MongoDB supports indexes on any field or sub-field contained in
documents within a MongoDB collection.

MongoDB defines index on a per-:term:`collection` level. You can create
indexes on multiple fields using :doc:`compound indexes </core/index-compound>`

Indexes enhance query performance, often dramatically. However, each
index also incurs some overhead for every write operation. Consider the
queries, the frequency of these queries, the size of your working set,
the insert load, and your application's requirements as you create
indexes in your MongoDB environment.

All MongoDB indexes use a B-tree data structure. MongoDB can use this
representation of the data to optimize query responses. Every query,
including update operations, uses one and only one index. The
:ref:`query optimizer <read-operations-query-optimization>` selects the
index empirically by occasionally running alternate query plans and by
selecting the plan with the best response time for each query plan. You
can override the query optimizer using the :method:`cursor.hint()`
method.

An index "covers" a query if all the fields in the :ref:`query
<read-operations-query-document>` are part of that index and all the
fields returned in the documents that match the query are in the same
index.

When an index covers a query, the server can both match the :ref:`query
conditions <read-operations-query-document>` **and** return the results
using only the index; MongoDB does not need to look at the documents,
only the index, to fulfill the query. Querying the index can be faster
than querying the documents outside of the index.

Using queries with good index coverage reduces the number of full
documents that MongoDB needs to store in memory, thus maximizing
database performance and throughput.

If an update does not change the size of a document or cause the
document to outgrow its allocated area, then MongoDB will update an
index *only if* the indexed fields have changed. This improves
performance. Note that if the document has grown and must move, all
index keys must then update.
