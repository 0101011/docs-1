.. index:: index; overview
.. _index-overview-synopsis:

==================
Index Introduction
==================

.. default-domain:: mongodb

Indexes can improve the performance of read and write operations to the
database. An index is a data structure [#b-tree]_ that stores the value
of the specified field or fields. Read and write operations that select
on the indexed fields can have dramatically better performance than
those operations that scan the whole :term:`collection`. Additionally,
sort operations that sort documents based on an indexed field provide
improved performance.

Index Types
-----------

Fundamentally, indexes in MongoDB are similar to indexes in other
database systems. MongoDB defines indexes at the :term:`collection`
level and supports indexes on any field or sub-field of the documents
in a MongoDB collection.

.. include:: /images/index-ascending.rst

For all collections, MongoDB creates a default index on the ``_id``
field. This serves as (words).  See :doc:`/core/index-types` for more
information on the ``_id`` index.

In addition to supporting indexes on a single field, MongoDB supports
creating an index on multiple fields. For these :doc:`compound indexes
</core/index-compound>`, the order of the fields as well as the sort
order of the indexed fields are important.

.. include:: /images/index-compound-key.rst

If an indexed field contains an array, MongoDB stores each element of
the array separately in a :doc:`multikey index </core/index-multikey>`.

.. include:: /images/index-multikey.rst

MongoDB also provides specific index types to support enhanced search
on string data and geospatial data. :ref:`Text indexes
<create-text-index>` support search of string content, while
:doc:`geospatial indexes </applications/geospatial-indexes>` support
queries on geospatial data.

Finally, the :doc:`hashed index </core/index-hashed>` stores the
*hashed* value of the field in the index rather than the value of the
field. Hashed indexes are primarily used in :doc:`sharded clusters
</core/sharding>`. :doc:`Sharding </core/sharding>` a collection based
on the hashed shard key provides a more consistently random distribution of
data.

Index Properties
----------------

MongoDB includes index properties to control the behavior of
indexes. 
For instance, the :doc:`unique </core/index-unique>` property for an
index causes MongoDB to reject duplicate values for the indexed field.
To create a :doc:`unique index </core/index-unique>` on a field that
already has duplicate values, see
:ref:`index-creation-duplicate-dropping` for index creation options.

:doc:`TTL indexes </core/index-ttl>` automatically remove documents
from a collection after a certain amount of time.

Specifying the :doc:`sparse </core/index-sparse>` property for an index
ensures that the index only contain entries for documents that have the
indexed field. You can combine the sparse index option with the unique
index option to reject documents that have duplicate values for a field
but ignore documents that do not have the key.

Covered Queries
---------------

An index "covers" a query if all the fields in the :ref:`query
<read-operations-query-document>` are part of that index and all the
fields returned in result set are also part of that same index.

When an index covers a query, the server can both match the :ref:`query
conditions <read-operations-query-document>` **and** return the results
using only the index. To fulfill the query, MongoDB only needs to look
at the index and not at the documents. Querying the index can be faster
than querying the documents outside of the index.

Using queries with good index coverage reduces the number of full
documents that MongoDB needs to store in memory, thus maximizing
database performance and throughput.

Considerations for Index Creation
---------------------------------

Each index incurs some overhead for every write operation. If an update
does not change the size of a document or cause the document to outgrow
its allocated area, then MongoDB will update an index *only if* the
indexed fields have changed. If the document has grown and must move,
then all index keys must update. As such, when creating indexes for a
collection, consider the queries, the frequency of these queries, the
size of your working set, and the insert load. See
:doc:`/applications/indexes/` for more information.

By default, creating an index is a blocking operation. For a large
collection, the index creation can take a long time to complete. To use
your :program:`mongod` instance during the index build, MongoDB
provides the ``background`` option. See
:ref:`index-creation-background` for details. See
:doc:`/core/index-creation` for other options available.

Query Plan
----------

In MongoDB, a :ref:`query optimizer
<read-operations-query-optimization>` processes queries and chooses the
most efficient query plan for a query given the available indexes. The
query system then uses this query plan each time the query runs. The
query optimizer occasionally reevaluates query plans as the content of
the collection changes to ensure optimal query plans. 

For details, see :ref:`query optimizer
<read-operations-query-optimization>`.

.. [#b-tree] MongoDB indexes use a B-tree data structure.
