.. index:: index; overview
.. _index-overview-synopsis:

==================
Index Introduction
==================

.. default-domain:: mongodb

To resolve queries, MongoDB must evaluate each document in a
collection to select those documents that match the query
statement. These *collection scans* are inefficient and require the
:program:`mongod` to process a large volume of data for each
operation.

*Indexes* are special data structures [#b-tree]_ that store a small
portion of the collection's data set in an easy to transverse form
that supports the efficient resolution of queries. The index stores
the value of a specific field or set of fields, ordered by the value
of the field.

Fundamentally, indexes in MongoDB are similar to indexes in other
database systems. MongoDB defines indexes at the :term:`collection`
level and supports indexes on any field or sub-field of the documents
in a MongoDB collection.

If an appropriate index exists for a query, MongoDB can use the index
to limit the number of documents it must inspect. In some cases
MongoDB can use information from the index to confirm that a document
matches a query, and does not need to introspect the document
itself. Consider the following diagram of a query that selects
documents using a query.

.. include:: /images/index-with-query.rst

Consider the documentation of the :ref:`query optimizer
<read-operations-query-optimization>` for more information on the
relationship between queries and indexes.

.. tip:: Create indexes to support primary, common, and user-facing
   queries. Having these indexes will ensure that MongoDB only scans
   the smallest possible number of documents.

Indexes can also optimize the performance of other operations in
specific situations:

**Sorted Results**
   MongoDB can use indexes to return documents sorted by the index key
   directly from the index without needing to sort the documents when
   processing the query.

**Covered Results**
   When a query includes a :term:`projection` that *only* includes
   indexed fields, MongoDB will return results directly from the index
   *without* scanning any documents or bringing documents into
   memory. These covered queries can be *very* efficient.

.. [#b-tree] MongoDB indexes use a B-tree data structure.

Index Types
-----------

MongoDB provides support for a number of different index types that
support specific kinds data and queries. See :doc:`/core/index-types`
for additional documentation.

Default ``_id``
~~~~~~~~~~~~~~~

All MongoDB collections have an index on the ``_id`` field that exists
by default. If applications do not specify a value for ``_id`` the
driver or the :program:`mongod` will create an ``_id`` field with an
:term:`ObjectID` value.

The ``_id`` index is *unique*, and prevents clients from inserting two
documents with the same value for the ``_id`` field.

Single Field
~~~~~~~~~~~~

MongoDB supports user defined indexes on a :doc:`single field of a
document </core/index-single>`. The ``_id`` index is a single field
index. Consider the following illustration of a single-field index:

.. include:: /images/index-ascending.rst

Compound Index
~~~~~~~~~~~~~~

MongoDB *also* supports user-defined indexes on multiple fields. These
:doc:`compound indexes </core/index-compound>` behave like
single-field indexes; *however*, the query can select documents based
on additional fields. Consider the following illustration of a
compound index:

.. include:: /images/index-compound-key.rst

Multikey Index
~~~~~~~~~~~~~~

To index content stored in arrays, MongoDB creates separate index
entries for *every* value of the array. These :doc:`multi-key indexes
</core/index-multikey>` allow queries to select documents based on
ranges of values in arrays. Consider the following illustration of a
multikey index:

.. include:: /images/index-multikey.rst

Geospatial Index
~~~~~~~~~~~~~~~~

To support efficient queries of geospatial coordinate data, MongoDB
provides two special indexes: :doc:`2d indexes </core/2d>` that uses
planar geometry when returning results and :doc:`2sphere indexes
</core/2dsphere>` that use spherical geometry to return results.

See :doc:`/core/geospatial-indexes` for a high level introduction to
geospatial indexes.

Text Indexes
~~~~~~~~~~~~

MongoDB provides a *beta* ``text`` index type that supports searching
for sting content in a collection. These text indexes only store the
important words and do not index *stop* worlds (e.g. "the", "a", "or")
and *stem* the words in a collection to only store root words.

See :doc:`/core/text-search` for more information on text indexes and
search.

Hashed Indexes
~~~~~~~~~~~~~~

To support :ref:`hash based sharding <sharding-hashed-sharding>`,
MongoDB provides a :doc:`hashed index </core/index-hashed>` type,
which indexes the hash of the value of a field. These indexes have a
more random distribution of values along their range, but *only*
support equality matches and cannot support range-based queries.

Index Properties
----------------

Unique Indexes
~~~~~~~~~~~~~~

The :doc:`unique </core/index-unique>` property for an index causes
MongoDB to reject duplicate values for the indexed field.  To create a
:doc:`unique index </core/index-unique>` on a field that already has
duplicate values, see :ref:`index-creation-duplicate-dropping` for
index creation options. Other than the unique constraint, unique
indexes are functionally interchangeable with other MongoDB
indexes.

Sparse Indexes
~~~~~~~~~~~~~~

The :doc:`sparse </core/index-sparse>` property of an index ensures
that the index only contain entries for documents that have the
indexed field. Documents that *do not* have a specific field are not
included in the index.

You can combine the sparse index option with the unique index option
to reject documents that have duplicate values for a field but ignore
documents that do not have the indexed key.
