================================
Replica Set Data Synchronization
================================

.. default-domain:: mongodb

In order to maintain up-to-date copies of their data, set members
:term:`sync`, or copy, :term:`oplog` entries from other members.
Members sync data at two different points: :ref:`initial sync
<replica-set-initial-sync>` and :ref:`replication
<replica-set-replication>`.

.. _replica-set-initial-sync:

Initial Sync
------------

Initial sync occurs when a new member or a restored member joins a set.
Initial sync populates this member with the replica set's data. When a
new or restored member joins or rejoins a set, the member waits to
receive heartbeats from other members. By default, the member syncs
from the *closest* member of the set that is either the primary or
another secondary with more recent oplog entries than the member
itself. This prevents two secondaries from syncing from each other.

.. _replica-set-replication:

Replication
-----------

Replication occurs continually after the initial sync and keeps the
members updated with changes to the replica set's data. In most cases,
secondaries synchronize from the primary. Secondaries will change sync
targets in certain situations and base changes on ping time and
freshness. This happens automatically.

.. COMMENT: 2013-05-23 > Removed following internal mechanics information.

   In MongoDB 2.0, secondaries will change sync targets only if the
   connection the sync target drops or produces an error.
   Secondaries will stop syncing from a member if
   the connection used to poll oplog entries is unresponsive for 30
   seconds. If a connection times out, the member may select a new
   member to sync from.

   If you have two secondary members in one data center and a primary in
   a second facility, and if you start all three instances at roughly
   the same time (i.e. with no existing data sets or oplog), both
   secondaries will likely sync from the primary, as neither secondary
   has more recent oplog entries.
   If you restart one of the secondaries, then when it rejoins the set
   it will likely begin syncing from the other secondary because of
   proximity.

   If you have a primary in one facility and a secondary in an
   alternate facility, and if you add another secondary to the alternate
   facility, the new secondary will likely sync from the existing
   secondary because it is closer than the primary.

.. END-COMMENT

For a member to sync from another, the
:data:`~local.system.replset.members[n].buildIndexes` field for both
members must have the same value, either ``true`` or ``false``.

Beginning in version 2.2, secondaries prefer not to sync from
:ref:`delayed members <replica-set-delayed-members>` or :ref:`hidden
members <replica-set-hidden-members>`.

Consistency and Durability
--------------------------

.. TODO continue

In a replica set, only the primary can accept write operations. Writing
only to the primary provides :term:`strict consistency` among members.

:term:`Journaling <journal>` provides single-instance write durability.
Without journaling, if a MongoDB instance terminates
ungracefully, you should assume that the database is in a corrupt or
inconsistent state.

.. _replica-set-internals-multi-threaded-replication:

Multithreaded Replication
-------------------------

MongoDB applies write operations in batches using a multithreaded
approach to improve concurrency. MongoDB batches operations by
namespace. You can have multiple batches for a namespace. The
replication process divides the batches among a group of threads. The
application of the write operations to a namespace is in order.

While applying a batch of operations to a namespace, MongoDB block all
reads. This ensures that reads to a secondary never return data that
reflect an in-between state that never existed on the primary.

Pre-Fetching Indexes to Improve Replication Throughput
------------------------------------------------------

To help improve the performance of applying the write operations,
MongoDB fetches all the memory pages that hold data and indexes that
the operations in the batch will affect. The prefetch stage minimizes
the amount of time MongoDB must hold the write lock to apply the
operations. See the :setting:`replIndexPrefetch` setting to modify the
index fetching behavior.

By default, secondaries will in most cases pre-fetch :ref:`indexes`
associated with the affected document to improve replication throughput.

You can limit this feature to pre-fetch only the index on the ``_id``
field, or you can disable this feature entirely. For more information,
see :setting:`replIndexPrefetch`.
