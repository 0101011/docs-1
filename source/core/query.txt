.. index:: read operations; query
.. _read-operations-query-operations:
.. _read-operations-queries:

=======
Queries
=======

.. default-domain:: mongodb

Queries are the primary operation that applications use to retrieve
data from a database. In MongoDB, all queries select documents from a
single :term:`collection`. 

Queries can specify criteria to match documents from the collection.
Queries can *project*, or specify, the fields from the matching
documents to return to the client. Applications may also add modifiers
to queries to limit the number of results or request a sorted result
set.

Consider the following diagram of the query process that specifies a
query criteria and a sort modifier:

.. include:: /images/crud-query-stages.rst

In the diagram, the query selects from the ``users`` collection. The
criteria matches the documents that have ``age`` greater than ``18``.
Then the :method:`~db.cursor.sort()` modifer sorts the results by
``age`` in ascending order.

Consider the following diagram of the query process that specifies a
query criteria and a projection:

.. include:: /images/crud-query-w-projection-stages.rst

In the diagram, the query selects from the ``users`` collection. The
criteria matches the documents that have ``age`` equal to ``18``. Then
the projection specifies that only the ``name`` field should return in
the matching documents.

For additional examples of queries and projections see,
:doc:`/tutorial/query-documents` and
:doc:`/tutorial/project-fields-from-query-results`.

Queries
-------

Consider the following components of MongoDB query operation:

.. include:: /images/crud-annotated-mongodb-find.rst

The same query in SQL is a follows:

.. include:: /images/crud-annotated-sql-select.rst

MongoDB provides two main query operations: the
:method:`db.collection.find()` method, which returns a cursor, and the
:method:`db.collection.findOne()` method, which returns a single
document. Both query methods accept projections and query modifiers.

Consider the following example: 

.. example:: 
   
   .. code-block:: javascript

      db.records.find( { "user_id": { $lt: 42} }, { "username": 1 } )

   This query selects the documents in the ``records`` collection that
   match the condition ``user_id`` less than ``42``, and returns only
   the ``_id`` and ``username`` fields.

Query Behavior
~~~~~~~~~~~~~~

Remember the following properties of MongoDB queries:

- All queries in MongoDB address a *single* collection.

- The order of documents returned by a query is not defined and is not
  necessarily consistent unless you specify a :method:`~cursor.sort()`.

- Operations that :doc:`modify existing documents
  </tutorial/modify-documents>` (i.e. *updates*,) select documents to
  update using the same syntax for query criteria as other queries.

- The :pipeline:`$match` stage in the :doc:`aggregation framework
  </core/aggregation>` pipeline provides access to MongoDB queries in
  the context of data aggregation operations.

Projections
-----------

By default, a query in MongoDB returns the complete content of all
matching documents. If you only need to use a subset of the document's
fields, you can limit the fields that MongoDB returns to your
application. These :term:`projections <projection>` minimize the
amount of data that your application has to promise, and increase the
overall efficiency of your application. 

Define projections as the *second* argument to the
:method:`~db.collection.find()` and :method:`~db.collection.findOne()`
methods. For example:

.. example:: 

   .. code-block:: javascript

      db.records.find( { "user_id": { $lt: 42} }, { "_id": 0, "name": 1 , "email": 1 })

   This query selects a number of documents in the ``records``
   collection that match the query ``{ "user_id": { $lt: 42} }``, but
   only returns the ``name`` and  ``email`` fields.

Projection Statements
~~~~~~~~~~~~~~~~~~~~~

To include a field in a projection, specify the field name with the
value ``1``. To exclude a field from a projection specify the field
name and the value ``0``.

.. important:: You *cannot* combine inclusion and exclusion semantics
   in a single projection with the *exception* of the ``_id`` field.

For more examples of queries with projection statements, sees
:doc:`/tutorial/project-fields-from-query-results`.

Projection Behavior
~~~~~~~~~~~~~~~~~~~

Remember the following properties of MongoDB projections:

- In MongoDB, the ``_id`` field is always included in results unless
  explicitly excluded.

- Projections can either exclude a selection of fields , or include a
  specific subset of fields from the result documents. Except for
  excluding the ``_id`` field in inclusive projections, you cannot
  mix exclusive and inclusive projections.

- The :projection:`$elemMatch`, :projection:`$slice`, :projection:`$`
  provide additional control over the projection of data from arrays
  in result documents.

- The :pipeline:`$project` stage in the :doc:`aggregation framework
  </core/aggregation>` pipeline provides related functionality in the
  context of data aggregation operations.
