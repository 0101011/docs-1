.. index:: read operations; query
.. _read-operations-query-operations:
.. _read-operations-queries:

=======
Queries
=======

.. default-domain:: mongodb

Queries are the primary operation that applications use to retrieve
data from a database. In MongoDB, queries select documents from a
single :term:`collection`.

Queries can specify criteria, or conditions, that identify the
documents that MongoDB returns to the clients. A query may also include
a *projection* that specifies the fields from the matching documents to
return. You can also add to the queries various modifiers, such as
limit, sort and skip.

Consider the following diagram of the query process that specifies a
query criteria and a sort modifier:

.. include:: /images/crud-query-stages.rst

In the diagram, the query selects from the ``users`` collection. The
criteria matches the documents that have ``age`` greater than ``18``.
Then the :method:`~db.cursor.sort()` modifer sorts the results by
``age`` in ascending order.

Consider the following diagram of the query process that specifies a
query criteria and a projection:

.. include:: /images/crud-query-w-projection-stages.rst

In the diagram, the query selects from the ``users`` collection. The
criteria matches the documents that have ``age`` equal to ``18``. Then
the projection specifies that only the ``name`` field should return in
the matching documents.

For additional examples of queries and projections see,
:doc:`/tutorial/query-documents` and
:doc:`/tutorial/project-fields-from-query-results`.

Queries
-------

For query operations, MongoDB provides the
:method:`db.collection.find()` method which returns a :doc:`cursor
</core/cursors>`. [#find-one]_ The method can accept query criteria,
projections, and modifiers.

The following diagram highlights the components of a MongoDB query
operation:

.. include:: /images/crud-annotated-mongodb-find.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-select.rst

.. example::

   .. code-block:: javascript

      db.users.find( { age: { $gt: 18 } }, { name: 1, address: 1, _id: 0 } ).limit(5)

   This query selects the documents in the ``users`` collection that
   match the condition ``age`` is greater than ``18``. The query
   returns at most ``5`` matching documents (or more precisely, a
   cursor to those documents). The matching documents will return with
   only the ``name`` and the ``address`` fields.

.. [#find-one] MongoDB also provides the :method:`db.collection.findOne()` method
   that returns a single document. Internally, the
   :method:`db.collection.findOne()` method is the
   :method:`db.collection.find()` method with the :method:`limit(1)
   <cursor.limit()>` modifier attached.


Query Behavior
~~~~~~~~~~~~~~

MongoDB queries exhibit the following behavior:

- All queries in MongoDB address a *single* collection.

- The order of documents returned by a query is not defined and is not
  necessarily consistent unless you specify a :method:`~cursor.sort()`.

- Operations that :doc:`modify existing documents
  </tutorial/modify-documents>` (i.e. *updates*) use the same query
  syntax as queries to select documents to update.

- To specify query condition in the :doc:`aggregation framework
  </core/aggregation>` pipeline, see :pipeline:`$match`.
  
.. _projections:

Projections
-----------

By default, a query in MongoDB returns all fields of the matching
documents. To limit the fields that MongoDB returns to your
application, include a :term:`projection` in your query. 

To include a field in a projection, specify the field name with the
value ``1``. To exclude a field from a projection specify the field
name and the value ``0``. These projections minimize the amount of data
that your application has to process and increase the overall
efficiency of your application.

Define projections as the *second* argument to the
:method:`~db.collection.find()` method.

.. example::

   .. code-block:: javascript

      db.records.find( { "user_id": { $lt: 42} }, { "_id": 0, "name": 1 , "email": 1 } )

   This query selects a number of documents in the ``records``
   collection that match the query ``{ "user_id": { $lt: 42} }``, but
   only returns the ``name`` and  ``email`` fields.

For more examples of queries with projection statements, see
:doc:`/tutorial/project-fields-from-query-results`.

Projection Behavior
~~~~~~~~~~~~~~~~~~~

MongoDB projections have the following properties:

- In MongoDB, the ``_id`` field is always included in results unless
  explicitly excluded.

- Projections can either exclude a selection of fields or include a
  selection of fields from the result documents. Except for excluding
  the ``_id`` field in inclusive projections, you cannot mix exclusive
  and inclusive projections.

- For fields that contain arrays, MongoDB provides the following
  projection operators: :projection:`$elemMatch`, :projection:`$slice`,
  :projection:`$`.

- For related projection functionality in the :doc:`aggregation
  framework </core/aggregation>` pipeline, see :pipeline:`$project`.
