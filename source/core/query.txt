.. index:: read operations; query
.. _read-operations-query-operations:
.. _read-operations-queries:

===============
Read Operations
===============

.. default-domain:: mongodb

Queries select documents from a single :term:`collection`.

Queries specify criteria, or conditions, that identify the documents
that MongoDB returns to the clients. A query may include a
*projection* that specifies the fields from the matching documents to
return. You can optionally modify queries to impose limits, skips, and
sort orders.

Query Statements
----------------

Consider the following diagram of the query process that specifies a
query criteria and a sort modifier:

.. include:: /images/crud-query-stages.rst

In the diagram, the query selects documents from the ``users``
collection. Using a :doc:`query selection operator
</reference/operator>` to define the conditions for matching
documents, the query selects documents that have ``age`` greater than
(i.e. :operator:`$gt`) ``18``.  Then the :method:`~db.cursor.sort()`
modifer sorts the results by ``age`` in ascending Consider.

order the following diagram of the query process that specifies a
query criteria and a projection:

.. include:: /images/crud-query-w-projection-stages.rst

In the diagram, the query selects from the ``users`` collection. The
criteria matches the documents that have ``age`` equal to ``18``. Then
the projection specifies that only the ``name`` field should return in
the matching documents.

For additional examples of queries and projections see,
:doc:`/tutorial/query-documents` and
:doc:`/tutorial/project-fields-from-query-results`.

Interface
---------

For query operations, MongoDB interfaces provide a
:method:`db.collection.find()` method that returns a :doc:`cursor
</core/cursors>`. The method can accept query criteria, projections,
and modifiers.

The following diagram highlights the components of a MongoDB query
operation:

.. include:: /images/crud-annotated-mongodb-find.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-select.rst

.. example::

   .. code-block:: javascript

      db.users.find( { age: { $gt: 18 } }, { name: 1, address: 1, _id: 0 } ).limit(5)

   This query selects the documents in the ``users`` collection that
   match the condition ``age`` is greater than ``18``. The query
   returns at most ``5`` matching documents (or more precisely, a
   cursor to those documents). The matching documents will return with
   only the ``name`` and the ``address`` fields.

Query Behavior
~~~~~~~~~~~~~~

MongoDB queries exhibit the following behavior:

- All queries in MongoDB address a *single* collection.

- The order of documents returned by a query is not defined and is not
  necessarily consistent unless you specify a
  :method:`~cursor.sort()`.

- Operations that :doc:`modify existing documents
  </tutorial/modify-documents>` (i.e. *updates*) use the same query
  syntax as queries to select documents to update.

- The :doc:`aggregation framework </core/aggregation>` pipeline,
  provides access to MongoDB queries using the see :pipeline:`$match`
  stage.

Most MongoDB interfaces also provide a
:method:`db.collection.findOne()` method as a special case of
:method:`~db.collection.find()` that returns a single document.

.. _projections:

Projections
-----------

By default, a query in MongoDB returns all fields of the matching
documents. To restrict the fields that MongoDB returns to your
application, include a :term:`projection` in your query. Projections
minimize the amount of data the database must send to the client as
well as the amount of data the application must process.

Projections can either exclude a selection of fields or include a
selection of fields from the result documents. To include a field,
specify the field name with the value ``1``. To exclude a field from a
projection specify the field name and the value ``0``

.. important:: Except for excluding the ``_id`` field in inclusive
   projections, you cannot mix exclusive and inclusive projections.

Define projections as the *second* argument to the
:method:`~db.collection.find()` method.

.. example::

   .. provide three examples here

   .. code-block:: javascript

      db.records.find( { "user_id": { $lt: 42} }, { "_id": 0, "name": 1 , "email": 1 } )

   This query selects a number of documents in the ``records``
   collection that match the query ``{ "user_id": { $lt: 42} }``, but
   only returns the ``name`` and  ``email`` fields.

For more examples of queries with projection statements, see
:doc:`/tutorial/project-fields-from-query-results`.

Projection Behavior
~~~~~~~~~~~~~~~~~~~

MongoDB projections have the following properties:

- In MongoDB, the ``_id`` field is always included in results unless
  explicitly excluded.

- For fields that contain arrays, MongoDB provides the following
  projection operators: :projection:`$elemMatch`, :projection:`$slice`,
  :projection:`$`.

- For related projection functionality in the :doc:`aggregation
  framework </core/aggregation>` pipeline, use the
  :pipeline:`$project` pipeline stage.
