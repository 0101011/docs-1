===============
read operations
===============

.. default-domain:: mongodb

read operations include all operations that return a cursor in
response to application request data (i.e. *queries*,) and also
include a number of :doc:`aggregation </aggregation>` operations that
do not return a cursor but have similar properties as queries. these
commands include :dbcommand:`aggregate`, :dbcommand:`count`, and
:dbcommand:`distinct`.

this document describes the syntax and structure of the queries
applications use to request data from mongodb and how different
factors affect the efficiency of reads.

.. note::

   all of the examples in this document use the :program:`mongo`
   shell interface. all of these operations are available in an
   idiomatic interface for each language by way of the :doc:`mongodb
   driver </applications/drivers>`. see your :api:`driver documentation <>` for
   full api documentation.

.. index:: read operations; query
.. _read-operations-query-operations:
.. _read-operations-queries:

queries in mongodb
------------------

in the :program:`mongo` shell, the :method:`find()
<db.collection.find()>` and :method:`findone()
<db.collection.findone()>` methods perform read operations. the
:method:`find() <db.collection.find()>` method has the following
syntax: [#formal-query-structure]_

.. code-block:: javascript

   db.collection.find( <query>, <projection> )

- the ``db.collection`` object specifies the database and collection
  to query. all queries in mongodb address a *single* collection.

  you can enter ``db`` in the :program:`mongo` shell to return the
  name of the current database. use the ``show collections`` operation
  in the :program:`mongo` shell to list the current collections in the
  database.

- queries in mongodb are :term:`bson` objects that use a set of
  :doc:`query operators </reference/operators>` to describe query
  parameters.

  the ``<query>`` argument of the :method:`find()
  <db.collection.find()>` method holds this query document. a read
  operation without a query document will return all documents in the
  collection.

- the ``<projection>`` argument describes the result set in the form of
  a document. projections specify or limit the fields to return.

  without a projection, the operation will return all
  fields of the documents. specify a projection if your documents are
  larger, or when your application only needs a subset of available
  fields.

- the order of documents returned by a query is not defined and is not
  necessarily consistent unless you specify a sort (:method:`sort()
  <cursor.sort()>`).

for example, the following operation on the ``inventory`` collection
selects all documents where the ``type`` field equals ``'food'`` and
the ``price`` field has a value less than ``9.95``. the projection
limits the response to the ``item`` and ``qty``, and ``_id`` field:

.. code-block:: javascript

   db.inventory.find( { type: 'food', price: { $lt: 9.95 } },
                      { item: 1, qty: 1 } )

the :method:`findone() <db.collection.findone()>` method is similar to
the :method:`find() <db.collection.find()>` method except the
:method:`findone() <db.collection.findone()>` method returns a single
document from a collection rather than a cursor. the method has the
syntax:

.. code-block:: javascript

   db.collection.findone( <query>, <projection> )

for additional documentation and examples of the main mongodb read
operators, refer to the :doc:`/applications/read` page of the
:doc:`/crud` section.

.. [#formal-query-structure] :method:`db.collection.find()` is a
   wrapper for the more formal query structure with the
   :operator:`$query` operator.

.. _read-operations-query-document:
.. _read-operations-query-argument:

query document
~~~~~~~~~~~~~~

this section provides an overview of the query document for mongodb
queries. see the preceding section for more information on
:ref:`queries in mongodb <read-operations-query-operations>`.

the following examples demonstrate the key properties of the query
document in mongodb queries, using the :method:`find()
<db.collection.find()>` method from the :program:`mongo` shell, and a
collection of documents named ``inventory``:

- an empty query document (``{}``) selects all documents in the
  collection:

  .. code-block:: javascript

     db.inventory.find( {} )

  not specifying a query document to the :method:`find()
  <db.collection.find()>` is equivalent to specifying an empty query
  document. therefore the following operation is equivalent to the
  previous operation:

  .. code-block:: javascript

     db.inventory.find()

- a single-clause query selects all documents in a collection where a
  field has a certain value. these are simple "equality" queries.

  in the following example, the query selects all documents in the
  collection where the ``type`` field has the value ``snacks``:

  .. code-block:: javascript

     db.inventory.find( { type: "snacks" } )

- a single-clause query document can also select all documents in a
  collection given a condition or set of conditions for one field in
  the collection's documents. use the :ref:`query operators
  <query-selectors>` to specify conditions in a mongodb query.

  in the following example, the query selects all documents in the
  collection where the value of the ``type`` field is either
  ``'food'`` or ``'snacks'``:

  .. code-block:: javascript

     db.inventory.find( { type: { $in: [ 'food', 'snacks' ] } } )

  .. note::

     although you can express this query using the :operator:`$or`
     operator, choose the :operator:`$in` operator rather than the
     :operator:`$or` operator when performing equality checks on the
     same field.

- a compound query can specify conditions for more than one field in
  the collection's documents. implicitly, a logical ``and`` conjunction
  connects the clauses of a compound query so that the query selects
  the documents in the collection that match all the conditions.

  in the following example, the query document specifies an equality
  match on a single field, followed by a range of values for a second
  field using a :ref:`comparison operator <query-selectors-comparison>`:

  .. code-block:: javascript

     db.inventory.find( { type: 'food', price: { $lt: 9.95 } } )

  this query selects all documents where the ``type`` field has the
  value ``'food'`` **and** the value of the ``price`` field is less
  than (:operator:`$lt`) ``9.95``.

- using the :operator:`$or` operator, you can specify a compound query
  that joins each clause with a logical ``or`` conjunction so that the
  query selects the documents in the collection that match at least one
  condition.

  in the following example, the query document selects all documents
  in the collection where the field ``qty`` has a value greater than
  (:operator:`$gt`) ``100`` **or** the value of the ``price``
  field is less than (:operator:`$lt`) ``9.95``:

  .. code-block:: javascript

     db.inventory.find( { $or: [ { qty: { $gt: 100 } },
                                 { price: { $lt: 9.95 } } ]
                        } )

- with additional clauses, you can specify precise conditions for
  matching documents. in the following example, the compound query
  document selects all documents in the collection where the value of
  the ``type`` field is ``'food'`` **and** *either* the ``qty`` has a
  value greater than (:operator:`$gt`) ``100`` *or* the value of
  the ``price`` field is less than (:operator:`$lt`) ``9.95``:

  .. code-block:: javascript

     db.inventory.find( { type: 'food', $or: [ { qty: { $gt: 100 } },
                                               { price: { $lt: 9.95 } } ]
                         } )

.. _read-operations-subdocuments:

subdocuments
````````````

when the field holds an embedded document (i.e. subdocument), you can
either specify the entire subdocument as the value of a field, or
"reach into" the subdocument using :term:`dot notation`, to specify
values for individual fields in the subdocument:

- equality matches within subdocuments select documents if the
  subdocument matches *exactly* the specified subdocument, including the
  field order.

  in the following example, the query matches all documents where
  the value of the field ``producer`` is a subdocument that contains
  *only* the field ``company`` with the value ``'abc123'`` and the field
  ``address`` with the value ``'123 street'``, in the exact order:

  .. code-block:: javascript

     db.inventory.find( {
                          producer: {
                                      company: 'abc123',
                                      address: '123 street'
                                    }
                        }
                      )

- equality matches for specific fields within subdocuments select
  documents when the field in the subdocument contains a field that
  matches the specified value.

  in the following example, the query uses the :term:`dot notation` to
  match all documents where the value of the field ``producer`` is a
  subdocument that contains a field ``company`` with the value
  ``'abc123'`` and may contain other fields:

  .. code-block:: javascript

     db.inventory.find( { 'producer.company': 'abc123' } )

.. _read-operations-arrays:

arrays
````````

when the field holds an array, you can query for values in the array,
and if the array holds sub-documents, you query for specific fields
within the sub-documents using :term:`dot notation`:

- equality matches can specify an entire array, to select an array
  that matches exactly. in the following example, the query matches all
  documents where the value of the field ``tags`` is an array and
  holds three elements, ``'fruit'``, ``'food'``, and ``'citrus'``, in
  this order:

  .. code-block:: javascript

     db.inventory.find( { tags: [ 'fruit', 'food', 'citrus' ] } )

- equality matches can specify a single element in the array. if the
  array contains at least *one* element with the specified value, as
  in the following example: the query matches all documents where
  the value of the field ``tags`` is an array that contains, as one of
  its elements, the element ``'fruit'``:

  .. code-block:: javascript

     db.inventory.find( { tags: 'fruit' } )

  equality matches can also select documents by values in an array
  using the array index (i.e. position) of the element in the array,
  as in the following example: the query uses the :term:`dot notation`
  to match all documents where the value of the ``tags`` field is an
  array whose first element equals ``'fruit'``:

  .. code-block:: javascript

     db.inventory.find( { 'tags.0' : 'fruit' } )

in the following examples, consider an array that contains
subdocuments:

- if you know the array index of the subdocument, you can specify the
  document using the subdocument's position.

  the following example selects all documents where the ``memos``
  contains an array whose first element (i.e. index is ``0``) is a
  subdocument with the field ``by`` with the value ``'shipping'``:

  .. code-block:: javascript

     db.inventory.find( { 'memos.0.by': 'shipping' } )

- if you do not know the index position of the subdocument,
  concatenate the name of the field that contains the array, with a
  dot (``.``) and the name of the field in the subdocument.

  the following example selects all documents where the ``memos`` field
  contains an array that contains at least one subdocument with the
  field ``by`` with the value ``'shipping'``:

  .. code-block:: javascript

     db.inventory.find( { 'memos.by': 'shipping' } )

- to match by multiple fields in the subdocument, you can use either
  dot notation or the :operator:`$elemmatch` operator:

  the following example uses dot notation to query for documents
  where the value of the ``memos`` field is an array that has at least
  one subdocument that contains the field ``memo`` equal to ``'on time'``
  and the field ``by`` equal to ``'shipping'``:

  .. code-block:: javascript

     db.inventory.find(
                        {
                          'memos.memo': 'on time',
                          'memos.by': 'shipping'
                        }
                      )

  the following example uses :operator:`$elemmatch` to query for
  documents where the value of the ``memos`` field is an array that
  has at least one subdocument that contains the field ``memo`` equal
  to ``'on time'`` and the field ``by`` equal to ``'shipping'``:

  .. code-block:: javascript

     db.inventory.find( { memos: {
                                   $elemmatch: {
                                                 memo : 'on time',
                                                 by: 'shipping'
                                               }
                                 }
                        }
                      )

refer to the :doc:`/reference/operator` document for the complete list
of query operators.

.. _read-operations-projection:
.. _projection:

result projections
~~~~~~~~~~~~~~~~~~

the :term:`projection` specification limits the fields to return for
all matching documents. constraining the result set by restricting the
fields to return can minimize network transit costs and the costs of
deserializing documents in the application layer.

the second argument to the :method:`find() <db.collection.find()>`
method is a projection, and it takes the form of a :term:`document` with
a list of fields for inclusion or exclusion from the result set. you
can either specify the fields to include (e.g. ``{ field: 1 }``) or specify the
fields to exclude (e.g. ``{ field: 0 }``). the ``_id`` field is implicitly
included, unless explicitly excluded.

.. note::

   you cannot combine inclusion and exclusion semantics in a single
   projection with the *exception* of the ``_id`` field.

consider the following projection specifications in :method:`find()
<db.collection.find()>` operations:

- if you specify no projection, the :method:`find()
  <db.collection.find()>` method returns all fields of all documents
  that match the query.

  .. code-block:: javascript

     db.inventory.find( { type: 'food' } )

  this operation will return all documents in the ``inventory``
  collection where the value of the ``type`` field is ``'food'``.

- a projection can explicitly include several fields. in the following
  operation, :method:`find() <db.collection.find()>` method returns
  all documents that match the query as well as ``item`` and ``qty``
  fields. the results also include the ``_id`` field:

  .. code-block:: javascript

     db.inventory.find( { type: 'food' }, { item: 1, qty: 1 } )

- you can remove the ``_id`` field by excluding it from the
  projection, as in the following example:

  .. code-block:: javascript

     db.inventory.find( { type: 'food' }, { item: 1, qty: 1, _id:0 } )

  this operation returns all documents that match the query, and
  *only* includes the ``item`` and ``qty`` fields in the result set.

- to exclude a single field or group of fields you can use a
  projection in the following form:

  .. code-block:: javascript

     db.inventory.find( { type: 'food' }, { type:0 } )

  this operation returns all documents where the value of the ``type``
  field is ``food``, but does not include the ``type`` field in the
  output.

  with the exception of the ``_id`` field you cannot combine inclusion
  and exclusion statements in projection documents.

the :projection:`$elemmatch` and :projection:`$slice` projection
operators provide more control when projecting only a portion of an
array.

.. _read-operations-indexing:

indexes
-------

indexes improve the efficiency of read operations by reducing the
amount of data that query operations need to process and thereby
simplifying the work associated with fulfilling queries within
mongodb. the indexes themselves are a special data structure that
mongodb maintains when inserting or modifying documents, and any given
index can: support and optimize specific queries, sort operations, and
allow for more efficient storage utilization. for more information
about indexes in mongodb see: :doc:`/indexes` and :doc:`/core/indexes`.

you can create indexes using the :method:`db.collection.ensureindex()` method
in the :program:`mongo` shell, as in the following prototype
operation:

.. code-block:: javascript

   db.collection.ensureindex( { <field1>: <order>, <field2>: <order>, ... } )

- the ``field`` specifies the field to index. the field may be a field
  from a subdocument, using :term:`dot notation` to specify subdocument
  fields.

  you can create an index on a single field or a :ref:`compound index
  <index-type-compound>` that includes multiple fields in the index.

- the ``order`` option is specifies either ascending ( ``1`` ) or
  descending ( ``-1`` ).

  mongodb can read the index in either direction. in most cases, you
  only need to specify :ref:`indexing order
  <index-ascending-and-descending>` to support sort operations in
  compound queries.

measuring index use
~~~~~~~~~~~~~~~~~~~

the :method:`explain() <cursor.explain()>` cursor method allows you to
inspect the operation of the query system, and is useful for analyzing
the efficiency of queries, and for determining how the query uses the
index. call the :method:`explain() <cursor.explain()>` method on a
cursor returned by :method:`find() <db.collection.find()>`, as in the
following example:

.. code-block:: javascript

   db.inventory.find( { type: 'food' } ).explain()

.. note::

   only use :method:`explain() <cursor.explain()>` to test the query
   operation, and *not* the timing of query performance. because
   :method:`explain() <cursor.explain()>` attempts multiple query
   plans, it does not reflect accurate query performance.

if the above operation could not use an index, the output of
:method:`explain() <cursor.explain()>` would resemble the following:

.. code-block:: javascript

   {
     "cursor" : "basiccursor",
     "ismultikey" : false,
     "n" : 5,
     "nscannedobjects" : 4000006,
     "nscanned" : 4000006,
     "nscannedobjectsallplans" : 4000006,
     "nscannedallplans" : 4000006,
     "scanandorder" : false,
     "indexonly" : false,
     "nyields" : 2,
     "nchunkskips" : 0,
     "millis" : 1591,
     "indexbounds" : { },
     "server" : "mongodb0.example.net:27017"
   }

the ``basiccursor`` value in the :data:`~explain.cursor` field confirms that
this query does not use an index. the :data:`explain.nscannedobjects` value shows that
mongodb must scan 4,000,006 documents to return only 5 documents. to
increase the efficiency of the query, create an index on the ``type``
field, as in the following example:

.. code-block:: javascript

   db.inventory.ensureindex( { type: 1 } )

run the :method:`explain() <cursor.explain()>` operation, as follows,
to test the use of the index:

.. code-block:: javascript

   db.inventory.find( { type: 'food' } ).explain()

consider the results:

.. code-block:: javascript

   {
     "cursor" : "btreecursor type_1",
     "ismultikey" : false,
     "n" : 5,
     "nscannedobjects" : 5,
     "nscanned" : 5,
     "nscannedobjectsallplans" : 5,
     "nscannedallplans" : 5,
     "scanandorder" : false,
     "indexonly" : false,
     "nyields" : 0,
     "nchunkskips" : 0,
     "millis" : 0,
     "indexbounds" : { "type" : [
                                   [ "food",
                                     "food" ]
                                ] },
     "server" : "mongodbo0.example.net:27017" }

the ``btreecursor`` value of the :data:`~explain.cursor` field indicates that
the query used an index. this query:

- returned 5 documents, as indicated by the :data:`~explain.n` field;

- scanned 5 documents from the index, as indicated by the
  :data:`~explain.nscanned` field;

- then read 5 full documents from the collection, as indicated by
  the :data:`~explain.nscannedobjects` field.

  this indicates that the query was not "covered," or able to complete
  only using the index, as reflected in the :data:`~explain.indexonly`. see
  :ref:`indexes-covered-queries` for more information.

.. index:: query optimizer
.. _read-operations-query-optimization:

query optimization
~~~~~~~~~~~~~~~~~~

the mongodb query optimizer processes queries and chooses the most
efficient query plan for a query given the available indexes. the
query system then uses this query plan each time the query runs. the
query optimizer occasionally reevaluates query plans as the content of
the collection changes to ensure optimal query plans.

to create a new query plan, the query optimizer:

1. runs the query against several candidate indexes in parallel.

#. the query optimizer records the matches in a common results buffer
   or buffers:

   - if the candidate plans include only :term:`ordered query plans
     <ordered query plan>`, there is a single common results buffer.
     
   - if the candidate plans include only :term:`unordered query plans
     <unordered query plan>`, there is a single common results buffer.

   - if the candidate plans include *both* :term:`ordered query plans
     <ordered query plan>` and :term:`unordered query plans
     <unordered query plan>`, there are two common results buffers, one
     for the ordered plans and the other for the unordered plans.

   if an index returns a result already returned by another index, the
   optimizer skips the duplicate match. in the case of the two buffers,
   both buffers are de-duped.

#. stops the testing of candidate plans and selects an index when one of
   the following events occur:

   - an :term:`unordered query plan` has returned all the matching results; *or*

   - an :term:`ordered query plan` has returned all the matching results; *or*

   - an :term:`ordered query plan` has returned a threshold number of matching results:

     - version 2.0: threshold is the query batch size. the default
       batch size is 101.

     - version 2.2: threshold is 101.

the selected index becomes the index specified in the query plan;
future iterations of this query or queries with the same query
pattern will use this index. query pattern refers to query select
conditions that differ only in the values, as in the following two
queries with the same query pattern:

.. code-block:: javascript

   db.inventory.find( { type: 'food' } )
   db.inventory.find( { type: 'utensil' } )

to manually compare the performance of a query using more than one
index, you can use the :method:`hint() <cursor.hint()>` and
:method:`explain() <cursor.explain()>` methods in conjunction, as in
the following prototype:

.. code-block:: javascript

   db.collection.find().hint().explain()

the following operations each run the same query but will reflect the
use of the different indexes:

.. code-block:: javascript

   db.inventory.find( { type: 'food' } ).hint( { type: 1 } ).explain()
   db.inventory.find( { type: 'food' } ).hint( { type: 1, name: 1 }).explain()

this returns the statistics regarding the execution of the query. for
more information on the output of :method:`explain()
<cursor.explain()>`, see the :doc:`/reference/explain`.

.. note::

   if you run :method:`explain() <cursor.explain()>` without including
   :method:`hint() <cursor.hint()>`, the query optimizer reevaluates
   the query and runs against multiple indexes before returning the
   query statistics.

as collections change over time, the query optimizer deletes a query
plan and reevaluates the after any of the following events:

- the collection receives 1,000 write operations.

- the :dbcommand:`reindex` rebuilds the index.

- you add or drop an index.

- the :program:`mongod` process restarts.

for more information, see :doc:`/applications/indexes`.

query operations that cannot use indexes effectively
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

some query operations cannot use indexes effectively or cannot use
indexes at all. consider the following situations:

- the inequality operators :operator:`$nin` and :operator:`$ne` are
  not very selective, as they often match a large portion of the
  index.

  as a result, in most cases, a :operator:`$nin` or :operator:`$ne`
  query with an index may perform no better than a :operator:`$nin` or
  :operator:`$ne` query that must scan all documents in a collection.

- queries that specify regular expressions, with inline javascript
  regular expressions or :operator:`$regex` operator expressions,
  cannot use an index. *however*, the regular expression with anchors
  to the beginning of a string *can* use an index.

.. _read-operations-cursors:

cursors
-------

the :method:`find() <db.collection.find()>` method returns a
:term:`cursor` to the results; however, in the :program:`mongo` shell,
if the returned cursor is not assigned to a variable, then the cursor
is automatically iterated up to 20 times [#set-shell-batch-size]_ to print
up to the first 20 documents that match the query, as in the following
example:

.. code-block:: javascript

   db.inventory.find( { type: 'food' } );

when you assign the :method:`find() <db.collection.find()>` to a
variable:

- you can call the cursor variable in the shell to iterate up to 20
  times [#set-shell-batch-size]_ and print the matching documents, as in
  the following example:

  .. code-block:: javascript

     var mycursor = db.inventory.find( { type: 'food' } );

     mycursor

- you can use the cursor method :method:`next() <cursor.next()>` to
  access the documents, as in the following example:

  .. code-block:: javascript

     var mycursor = db.inventory.find( { type: 'food' } );
     var mydocument = mycursor.hasnext() ? mycursor.next() : null;

     if (mydocument) {
         var myitem = mydocument.item;
         print(tojson(myitem));
     }

  as an alternative print operation, consider the ``printjson()``
  helper method to replace ``print(tojson())``:

  .. code-block:: javascript

     if (mydocument) {
         var myitem = mydocument.item;
         printjson(myitem);
     }

- you can use the cursor method :method:`foreach() <cursor.foreach()>`
  to iterate the cursor and access the documents, as in the following
  example:

  .. code-block:: javascript

     var mycursor =  db.inventory.find( { type: 'food' } );

     mycursor.foreach(printjson);

see :ref:`javascript cursor methods <js-query-cursor-methods>` and your
:doc:`driver </applications/drivers>` documentation for more
information on cursor methods.

.. [#set-shell-batch-size] you can use the ``dbquery.shellbatchsize`` to
   change the number of iteration from the default value ``20``. see
   :ref:`mongo-shell-executing-queries` for more information.

iterator index
~~~~~~~~~~~~~~

in the :program:`mongo` shell, you can use the :method:`toarray()
<cursor.toarray()>` method to iterate the cursor and return the
documents in an array, as in the following:

.. code-block:: javascript

   var mycursor = db.inventory.find( { type: 'food' } );
   var documentarray = mycursor.toarray();
   var mydocument = documentarray[3];

the :method:`toarray() <cursor.toarray()>` method loads into ram all
documents returned by the cursor; the :method:`toarray()
<cursor.toarray()>` method exhausts the cursor.

additionally, some :doc:`drivers </applications/drivers>` provide
access to the documents by using an index on the cursor (i.e.
``cursor[index]``). this is a shortcut for first calling the
:method:`toarray() <cursor.toarray()>` method and then using an index
on the resulting array.

consider the following example:

.. code-block:: javascript

   var mycursor = db.inventory.find( { type: 'food' } );
   var mydocument = mycursor[3];

the ``mycursor[3]`` is equivalent to the following example:

.. code-block:: javascript

   mycursor.toarray() [3];

.. todo link to toarray() method once page exists

.. _cursor-behaviors:

cursor behaviors
~~~~~~~~~~~~~~~~

consider the following behaviors related to cursors:

- by default, the server will automatically close the cursor after 10
  minutes of inactivity or if client has exhausted the cursor. to
  override this behavior, you can specify the ``notimeout`` :wiki:`wire
  protocol flag <mongo wire protocol>` in your query; however, you
  should either close the cursor manually or exhaust the cursor. in the
  :program:`mongo` shell, you can set the ``notimeout`` flag:

  .. code-block:: javascript

     var mycursor = db.inventory.find().addoption(dbquery.option.notimeout);

  see your :doc:`driver </applications/drivers>` documentation for
  information on setting the ``notimeout`` flag. see
  :ref:`cursor-flags` for a complete list of available cursor flags.

- because the cursor is not isolated during its lifetime, intervening
  write operations may result in a cursor that returns a single
  document [#single-document-def]_ more than once. to handle this
  situation, see the information on :ref:`snapshot mode
  <faq-developers-isolate-cursors>`.

- the mongodb server returns the query results in batches:

  - for most queries, the *first* batch returns 101 documents or just
    enough documents to exceed 1 megabyte. subsequent batch size is 4
    megabytes. to override the default size of the batch, see
    :method:`cursor.batchsize()` and :method:`cursor.limit()`.

  - for queries that include a sort operation *without* an index, the
    server must load all the documents in memory to perform the sort
    and will return all documents in the first batch.

  - batch size will not exceed the :ref:`maximum bson document size
    <limit-bson-document-size>`.

  - as you iterate through the cursor and reach the end of the returned
    batch, if there are more results, :method:`cursor.next()` will
    perform a :data:`getmore operation <explain.op>` to retrieve the next batch.

    to see how many documents remain in the batch as you iterate the
    cursor, you can use the :method:`cursor.objsleftinbatch()` method,
    as in the following example:

    .. code-block:: javascript

       var myCursor = db.inventory.find();

       var myFirstDocument = myCursor.hasNext() ? myCursor.next() : null;

       myCursor.objsLeftInBatch();

- You can use the command :dbcommand:`cursorInfo` to retrieve the
  following information on cursors:

  - total number of open cursors

  - size of the client cursors in current use

  - number of timed out cursors since the last server restart

  Consider the following example:

  .. code-block:: javascript

     db.runCommand( { cursorInfo: 1 } )

  The result from the command returns the following documentation:

  .. code-block:: javascript

     { "totalOpen" : <number>, "clientCursors_size" : <number>, "timedOut" : <number>, "ok" : 1 }

.. [#single-document-def] A single document relative to value of the
   ``_id`` field. A cursor cannot return the same document more than
   once *if* the document has not changed.

.. _cursor-flags:

Cursor Flags
~~~~~~~~~~~~

The :program:`mongo` shell provides the following cursor flags:

- ``DBQuery.Option.tailable``
- ``DBQuery.Option.slaveOk``
- ``DBQuery.Option.oplogReplay``
- ``DBQuery.Option.noTimeout``
- ``DBQuery.Option.awaitData``
- ``DBQuery.Option.exhaust``
- ``DBQuery.Option.partial``

.. _read-operations-aggregation:

Aggregation
~~~~~~~~~~~

.. versionchanged:: 2.2

MongoDB can perform some basic data aggregation operations on results
before returning data to the application. These operations are not
queries; they use :term:`database commands <database command>` rather than queries, and
they do not return a cursor. However, they still require MongoDB to read data.

Running aggregation operations on the database side can be more
efficient than running them in the application layer and can reduce
the amount of data MongoDB needs to send to the application. These
aggregation operations include basic grouping, counting, and even
processing data using a map reduce framework. Additionally, in 2.2
MongoDB provides a complete aggregation framework for more rich
aggregation operations.

The aggregation framework provides users with a "pipeline" like
framework: documents enter from a collection and then pass through a
series of steps by a sequence of :ref:`pipeline operators
<aggregation-pipeline-operator-reference>` that manipulate and
transform the documents until they're output at the end. The
aggregation framework is accessible via the :dbcommand:`aggregate`
command or the :method:`db.collection.aggregate()` helper in the
:program:`mongo` shell.

For more information on the aggregation framework see
:doc:`/aggregation`.

Additionally, MongoDB provides a number of simple data aggregation
operations for more basic data aggregation operations:

- :method:`~cursor.count()`

- :dbcommand:`distinct`

- :method:`~db.collection.group()`

- :dbcommand:`mapReduce` (See also
  :doc:`/applications/map-reduce`.)

.. index:: read operation; architecture
.. _read-operations-architecture:

Architecture
------------

.. index:: read operation; connection pooling
.. index:: connection pooling; read operations
.. _read-operations-connection-pooling:

Read Operations From Sharded Clusters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:term:`Sharded clusters <sharded cluster>` allow you to partition a
data set among a cluster of program:`mongod` in a way that is nearly
transparent to the application. See the :doc:`/sharding` section of
this manual for additional information about these deployments.

For a sharded cluster, you issue all operations to one of the
:program:`mongos` instances associated with the
cluster. :program:`mongos` instances route operations to the
:program:`mongod` in the cluster and behave like :program:`mongod`
instances to the application. Read operations to a sharded collection
in a sharded cluster are largely the same as operations to a :term:`replica
set` or :term:`standalone` instances. See the section on :ref:`Read
Operations in Sharded Clusters <sharding-read-operations>` for more
information.

In sharded deployments, the :program:`mongos` instance routes
the queries from the clients to the :program:`mongod` instances that
hold the data, using the cluster metadata stored in the :ref:`config
database <sharding-config-server>`.

For sharded collections, if queries do not include the :ref:`shard key
<sharding-shard-key>`, the :program:`mongos` must direct the query to
all shards in a collection. These *scatter gather* queries can be
inefficient, particularly on larger clusters, and are unfeasible for
routine operations.

For more information on read operations in sharded clusters, consider
the following resources:

- :ref:`An Introduction to Shard Keys <sharding-shard-key>`
- :ref:`Shard Key Internals and Operations <sharding-internals-shard-keys>`
- :ref:`Querying Sharded Clusters <sharding-internals-querying>`
- :ref:`sharding-mongos`

Read Operations from Replica Sets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:term:`Replica sets <replica set>` use :term:`read preferences <read
preference>` to determine where and how to route read operations to
members of the replica set. By default, MongoDB always reads data from
a replica set's :term:`primary`. You can modify that behavior by
changing the :ref:`read preference mode
<replica-set-read-preference-modes>`.

You can configure the :ref:`read preference mode
<replica-set-read-preference-modes>` on a per-connection or
per-operation basis to allow reads from :term:`secondaries
<secondary>` to:

- reduce latency in multi-data-center deployments,

- improve read throughput by distributing high read-volumes (relative
  to write volume),

- for backup operations, and/or

- to allow reads during :ref:`failover <replica-set-failover>`
  situations.

Read operations from secondary members of replica sets are not
guaranteed to reflect the current state of the primary, and the state
of secondaries will trail the primary by some amount of time. Often,
applications don't rely on this kind of strict consistency, but
application developers should always consider the needs of their
application before setting read preference.

For more information on :ref:`read preferences <read-preference>` or
on the read preference modes, see :ref:`read-preference` and
:ref:`replica-set-read-preference-modes`.
