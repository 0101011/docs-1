====================
Aggregation Pipeline
====================

.. versionadded:: 2.1

.. default-domain:: mongodb

The aggregation pipeline is a framework for performing aggregation
tasks, modeled on the concept of data processing pipelines. Using this
framework, MongoDB passes the documents of a single :term:`collection`
through a :ref:`pipeline <aggregation-pipeline>`. The pipeline
transforms the documents into aggregated results.

The aggregation pipeline provides an alternative to :term:`map-reduce`
and may be the preferred solution for many aggregation tasks where the
complexity of map-reduce may be unwarranted.

.. _aggregation-pipeline:

Pipeline
--------

Conceptually, documents from a collection pass through an aggregation
pipeline, which transforms these objects as they pass through. For
those familiar with UNIX-like shells (e.g. bash,) the concept is
analogous to the pipe (i.e. ``|``). In a shell environment, the pipe
redirects a stream of characters from the output of one process to the
input of the next. 

The MongoDB aggregation pipeline starts with the documents of a
collection and streams the documents from one :ref:`pipeline operator
<aggregation-pipeline-operator-reference>` to the next to process the
documents. Each operator in the pipeline transforms each document as it
passes through the pipeline. Pipeline operators do not need to produce
one output document for every input document. Operators may generate
new documents or filter out documents. Pipeline operators can be
repeated in the pipe.

.. include:: /includes/warning-aggregation-types.rst

.. seealso:: :ref:`aggregation-pipeline-operator-reference`

.. _aggregation-expressions:

Pipeline Expressions
--------------------

Pipeline operator expressions provide the specifications for the
transformation to the input documents. The aggregation pipeline defines
expressions using a document structure. The expressions can contain
fields, values, and :ref:`operators
<aggregation-expression-operators>`. In an expression, to access the
fields that existed in the input collection, prefix the field name with
``$`` and enclose in quotes. To access new fields created in the
pipeline, use the field name without modification.

Pipeline expressions can only operate on the current document in the
pipeline and cannot refer to data from other documents.

Generally, expressions are stateless and are only evaluated when seen
by the aggregation process with one exception: :term:`accumulator`
expressions. The accumulator expressions, used with the
:pipeline:`$group` pipeline operator, maintain their state (e.g.
totals, maximums, minimums, and related data) as documents progress
through the pipeline.

For the expression operators, see
:ref:`aggregation-expression-operators`.

``aggregate`` Command
---------------------

To use the aggregation pipeline, MongoDB interfaces provide the
:dbcommand:`aggregate` command. In the :program:`mongo` shell, MongoDB
provides the :method:`db.collection.aggregate()` wrapper.

The arguments to the :method:`~db.collection.aggregate()` method
specify a sequence of :ref:`pipeline operations
<aggregation-pipeline-operator-reference>`. The result of the method is
a document and is subject to the :ref:`BSON Document size
<limit-bson-document-size>` limit, which is currently 16 megabytes.

.. example:: Consider a collection named ``articles`` that contains
   documents of the following format: 

   .. code-block:: javascript

      {
        title : "this is my title" ,
        author : "bob" ,
        posted : new Date () ,
        pageViews : 5 ,
        tags : [ "fun" , "good" , "sport" ] ,
        comments : [
                     { author :"joe" , text : "this is cool" } ,
                     { author :"sam" , text : "this is bad" }
        ],
        other : { foo : 5 }
      }

   The following aggregation pivots the data to group authors by
   individual tags:

   .. code-block:: javascript

      db.articles.aggregate(
        { $project : {
                       author : 1,
                       tags : 1,
                     }
        },
        { $unwind : "$tags" },
        { $group : {
                     _id : { tags : "$tags" },
                     authors : { $addToSet : "$author" }
                   } 
        }
      )

   The aggregation pipeline begins with the collection ``articles`` and
   selects the ``author`` and ``tags`` fields using the
   :pipeline:`$project` pipeline operator. The :pipeline:`$unwind`
   operator produces one output document per tag. Finally, the
   :pipeline:`$group` pipeline operator groups authors by tags.

   The operation returns the following document:
   
   .. code-block:: javascript
   
      {
         "result" : [
                      {
                        "_id" : { "tags" : "good" },
                        "authors" : [ "bob", "mike", ... ]
                      },
                      {
                        "_id" : { "tags" : "fun" },
                        "authors" : [ "bob", "al" ]
                      },

                      ...

                    ],
         "ok" : 1
      }

   The returned document contains two fields:

   - ``result`` field, which holds an array of documents returned by
     the :ref:`pipeline <aggregation-pipeline>`, and

   - ``ok`` field, which holds the value ``1``, indicating success.
