========================
Aggregation Introduction
========================

.. default-domain:: mongodb

*Aggregations* are operations that process a number of data records and
return a computed result. MongoDB provides a rich set of aggregation
operations that examine and perform calculations on the data sets.
Running data aggregation on the :program:`mongod` instance simplifies
application code and limits resource requirements. 

Like queries, aggregation operations in MongoDB use :term:`collections
<collection>` of documents as an input and return results in the form
of one or more documents.

Aggregation Modalities
----------------------

Pipelines
~~~~~~~~~

MongoDB 2.2 introduced a new aggregation framework, modeled on the
concept of data processing pipelines. Documents enter a multi-staged
pipe, which transforms the documents into an aggregated result. 

The most basic pipeline stages provide filters that operate like
queries and also provide document transformations that modify the form
of the output document as sophisticated :term:`projections
<projection>`.

Other stages provide tools for grouping and sorting documents by
specific field or fields as well as tools for aggregating the contents
of arrays, including arrays of documents. In addition, pipeline stages
can use :ref:`operators <aggregation-expression-operators>` that
provide various functionalities, such as calculating the average or
concatenating a string.

The pipeline executes data aggregation efficiently, using native
operations within MongoDB, and is the preferred method for data
aggregation starting from MongoDB 2.2.

<Picture>

Map-Reduce
~~~~~~~~~~

In general, map-reduce operations perform aggregation operations in two
stages. For every input document, the map stage associates a value to a
key. The reduce stage "reduces" the values for each key into a single
object. Like other aggregation operations, map-reduce can specify a
query condition to select the input as well as sort and limit the
results.

Map-reduce uses custom JavaScript functions to perform the map and
reduce operations. You can also create a custom JavaScript function to
modify the output, such as adding new fields to the output. With the
custom JavaScript functions, map-reduce provides greater flexibility
and capabilities than the aggregation pipeline. Map-reduce can also
handle larger data sets than the aggregation pipeline. However,
map-reduce is less efficient and more complex than the aggregation
pipeline. 

Starting in MongoDB 2.4, certain :program:`mongo` shell functions and
properties are inaccessible in map-reduce operations. Also in MongoDB
2.4, multiple JavaScript operations can run at the same time. But
before MongoDB 2.4, JavaScript code executed in a single thread,
raising concurrency issues for map-reduce.

<Picture>

Generic Aggregation Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For a number of common generic aggregation operations, MongoDB provides
special purpose database commands to facilitate these operations. These
common aggregation operations are: returning a count of matching
documents, returning the distinct values for a field, and aggregation
based on groups of values. All of these operations aggregate documents
from a single collection. While these operations provide simple access
to common aggregation processes, they lack the flexibility and
capabilities of the aggregation pipeline and map-reduce.

<Picture --- maybe>

Additional Features
-------------------

Aggregation returns its result in a document. As such, its results are
subject to the BSON document size limit, which is currently 16
megabytes. The map-reduce can output the results to a table or return
the results inline. The inline result is also subject to the BSON
document size limit. For the special purpose database commands, refer
to the individual commands for size limits on the results.

Both the aggregation pipeline and map-reduce can operate on a sharded
collection. The special group command cannot operate on a sharded
collection.

For a comparison of various features of aggregation pipeline,
map-reduce, and the special group functionality, see
:doc:`/reference/aggregation-commands-comparison`.
