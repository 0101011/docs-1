========================
Aggregation Introduction
========================

.. default-domain:: mongodb

*Aggregations* are operations that process a number of data records and
return a computed result. MongoDB provides a rich set of aggregation
operations that examine and perform calculations on the data sets.
Running data aggregation on the :program:`mongod` instance simplifies
application code and limits resource requirements. 

Like queries, aggregation operations in MongoDB use :term:`collections
<collection>` of documents as an input and return results in the form
of one or more documents.

Aggregation Modalities
----------------------

Aggregation Pipelines
~~~~~~~~~~~~~~~~~~~~~

MongoDB 2.2 introduced a new :doc:`aggregation framework
</core/aggregation-pipeline>`, modeled on the concept of data
processing pipelines. Documents enter a multi-staged pipe, which
transforms the documents into an aggregated result.

The most basic pipeline stages provide *filters* that operate like
queries and *document transformations* that modify the form
of the output document as sophisticated :term:`projections
<projection>`.

Other stages provide tools for grouping and sorting documents by
specific field or fields as well as tools for aggregating the contents
of arrays, including arrays of documents. In addition, pipeline stages
can use :ref:`operators <aggregation-expression-operators>` for
tasks such as calculating the average or concatenating a string.

The pipeline aggregates data efficiently using native
operations within MongoDB, and is the preferred method for data
aggregation starting from MongoDB 2.2.

.. include:: /images/aggregation-pipeline.rst

Map-Reduce
~~~~~~~~~~

MongoDB also provides :doc:`map-reduce </core/map-reduce>` operations
to perform aggregation. Map-reduce operations associate or *map* a
value to a key, and then reduces the values to a single object for the
key. Like other aggregation operations, map-reduce can specify a query
condition to select the input documents as well as sort and limit the
results.

Map-reduce uses custom JavaScript functions to perform the map and
reduce operations. You can also create a custom JavaScript function to
modify the output, such as adding new fields to the output. With the
custom JavaScript functions, map-reduce provides greater flexibility
and capabilities than the aggregation pipeline. Map-reduce can also
handle larger data sets than the aggregation pipeline. However,
map-reduce is less efficient and more complex than the aggregation
pipeline. 

Starting in MongoDB 2.4, certain :program:`mongo` shell functions and
properties are inaccessible in map-reduce operations. MongoDB 2.4 also
provides support for multiple JavaScript operations to run at the same
time. Before MongoDB 2.4, JavaScript code executed in a single
thread, raising concurrency issues for map-reduce.

.. include:: /images/map-reduce.rst

Single Purpose Aggregation Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For a number of common :doc:`single purpose aggregation operations
</core/single-purpose-aggregation>`, MongoDB provides special purpose
database commands. These common
aggregation operations are: returning a count of matching documents,
returning the distinct values for a field, and grouping data based on 
the values of a field. All of these operations aggregate documents from a
single collection. While these operations provide simple access to
common aggregation processes, they lack the flexibility and
capabilities of the aggregation pipeline and map-reduce.

.. include:: /images/distinct.rst

Additional Features and Behaviors
---------------------------------

Both the aggregation pipeline and map-reduce can operate on a
:doc:`sharded collection </core/sharding-introduction>`. Map-reduce
operations can also output to a sharded collection. See
:doc:`/core/aggregation-pipeline-sharded-collections` and
:doc:`/core/map-reduce-sharded-collections` for details.

The aggregation pipeline can use indexes to improve its performance
during some of its stages. In addition, the aggregation pipeline has an
internal optimization phase. See
:ref:`aggregation-pipeline-operators-and-performance` and
:doc:`/core/aggregation-pipeline-optimization-phase` for details.

For a feature comparison of the aggregation pipeline,
map-reduce, and the special group functionality, see
:doc:`/reference/aggregation-commands-comparison`.
