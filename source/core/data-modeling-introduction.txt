==========================
Data Modeling Introduction
==========================

.. default-domain:: mongodb

Data in MongoDB has a *flexible schema*. Unlike SQL databases, where
you must determine and declare a table's schema before inserting data,
MongoDB's ':term:`Collections <collection>` do not enforce
:term:`document` structure. This means that documents in the same
collection do not need to have the same set of fields or structure,
and common fields in a collection's documents may hold different types
of data.

The flexible schema enables documents to only contain the fields that
are relevant to the entity or object represented by the document.  In
practice, *most* documents in a collection share a similar structure,
but they need not.

Schema flexibility means that
you can model your documents in MongoDB so that they can closely
resemble and reflect application-level objects.

Considerations
--------------

As in all data modeling, when developing data models (i.e. *schema
designs*) for MongoDB, you must consider the inherent properties and
requirements of the application objects and the relationships between
application objects. MongoDB data models should also reflect how data
will grow and change over time, and the kinds of queries your
application will perform.

These considerations and requirements force developers to make a
number of multi-factored decisions when modeling data.

Flat or Embedded Structures?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With MongoDB, you can choose between normalizing your data, creating a
flat structure, or de-normalizing your data and creating a nested data
structure, taking advantage of MongoDB's support for embedded documents.

Fully normalized data models describe relationships using
:doc:`references </reference/database-references>` between
documents. By contrast, de-normalized models may store redundant
information across related collections, but keep related data together
in one document.

Indexes
~~~~~~~

Determining the best indexes for your application is essential to the
performance of your database. Data models should take indexing needs
into account, and the data structure should facilitate index use.
The :doc:`indexing strategy </applications/indexes>` document
discusses the considerations that should be taken into account when
designing indexes.

Document Growth
~~~~~~~~~~~~~~~





- representation of data in arrays in :term:`BSON`.

Although a number of data models may be functionally equivalent for a
given application, different data models may have significant impacts on
MongoDB and application performance.

In addition, consider the
:ref:`data-modeling-examples` section which provides more concrete
examples of all the discussed patterns.
