==========================
Data Modeling Introduction
==========================

.. default-domain:: mongodb

Data in MongoDB has a *flexible schema*. :term:`Collections
<collection>` do not enforce :term:`document` structure. This means
that:

- documents in the same collection do not need to have the same set of
  fields or structure, and

- common fields in a collection's documents may hold different types
  of data.

Each document only needs to contain relevant fields to the entity or
object that the document represents. In practice, *most* documents in a
collection share a similar structure. 

Schema flexibility means that
you can model your documents in MongoDB so that they can closely
resemble and reflect application-level objects.

As in all data modeling, when developing data models (i.e. *schema
designs*) for MongoDB, you must consider the inherent properties and
requirements of the application objects and the relationships between
application objects. MongoDB data models must also reflect:

- how data will grow and change over time, and

- the kinds of queries your application will perform.

These considerations and requirements force developers to make a
number of multi-factored decisions when modeling data, including:

- normalization and de-normalization.

  These decisions reflect the degree to which the data model should
  store related pieces of data in a single document. Fully normalized
  data models describe relationships using :doc:`references
  </reference/database-references>` between documents, while
  de-normalized models may store redundant information across related
  models.

- :doc:`indexing strategy </applications/indexes>`.

- representation of data in arrays in :term:`BSON`.

Although a number of data models may be functionally equivalent for a
given application, different data models may have significant impacts on
MongoDB and application performance.

In addition, consider the
:ref:`data-modeling-examples` section which provides more concrete
examples of all the discussed patterns.
