.. _sharding-internals-config-database:

========================
Sharded Cluster Metadata
========================

.. default-domain:: mongodb

:doc:`Config servers </core/sharded-cluster-config-servers>` store the
metadata for a sharded cluster. A production sharded cluster has exactly
three config servers. Config servers store the cluster metadata in the
:doc:`/reference/config-database`. The :program:`mongos` instances cache
this data and use it to determine which :term:`shard` is responsible for
which :term:`chunk`.

Sharded cluster metadata comprises information about the :term:`sharded
cluster's <sharded cluster>` partitioned data sets. The config database
stores the relationship between :term:`chunks <chunk>` and where they
reside within a :term:`sharded cluster`. Without a config database, the
:program:`mongos` instances would be unable to route queries or write
operations within the cluster.

.. important:: Always back up the ``config`` database before
   performing any maintenance on the config server.

To access the ``config`` database, issue the following command from the
:program:`mongo` shell:

.. code-block:: javascript

   use config

In general, you should *never* manipulate the content of the config
database directly. The ``config`` database contains the following
collections:

- :data:`~config.changelog`
- :data:`~config.chunks`
- :data:`~config.collections`
- :data:`~config.databases`
- :data:`~config.lockpings`
- :data:`~config.locks`
- :data:`~config.mongos`
- :data:`~config.settings`
- :data:`~config.shards`
- :data:`~config.version`

For full documentation of these
collections and their role in sharded clusters,
see :doc:`/reference/config-database`.

For further information on when metadata is accessed and updated, see
:ref:`config-server-read-write-ops`.
