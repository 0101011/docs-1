.. index:: index; sparse
.. _index-type-sparse:

==============
Sparse Indexes
==============

.. default-domain:: mongodb

Sparse indexes only contain entries for documents that have the indexed
field, even if the index field contains a null value. The index skips
over any document that is missing the indexed field. The index is
"sparse" because it does not include all documents of a collection. By
contrast, non-sparse indexes contain all documents in a collection,
storing null values for those documents that do not contain the indexed
field.

The following example in the :program:`mongo` shell creates a sparse
index on the ``xmpp_id`` field of the ``members`` collection:

.. code-block:: javascript

   db.addresses.ensureIndex( { "xmpp_id": 1 }, { sparse: true } )

By default, ``sparse`` is ``false`` on MongoDB indexes.

.. warning::

   Using these indexes will sometimes result in incomplete results
   when filtering or sorting results, because sparse indexes are not
   complete for all documents in a collection.

.. example:: Sparse index on a collection can results in incomplete results.

   Consider a collection ``score`` that contains the following documents:

   .. code-block:: javascript

      { "_id" : ObjectId("523b6e32fb408eea0eec2647"), "userid" : "newbie" }
      { "_id" : ObjectId("523b6e61fb408eea0eec2648"), "userid" : "abby", "score" : 82 }
      { "_id" : ObjectId("523b6e6ffb408eea0eec2649"), "userid" : "nina", "score" : 90 }

   The collection has a sparse index on the field ``score``:

   .. code-block:: javascript

       db.scores.ensureIndex( { score: 1 } , { sparse: true } )

   Then, the following query to return all documents in the ``scores``
   collection sorted by the ``score`` field results in incomplete
   results:

   .. code-block:: javascript

      db.scores.find().sort( { score: -1 } )

   Because the document for the userid ``"newbie"`` does not contain
   the ``score`` field, the query, which uses the sparse index, will
   return incomplete results that omit that document:

   .. code-block:: javascript

      { "_id" : ObjectId("523b6e6ffb408eea0eec2649"), "userid" : "nina", "score" : 90 }
      { "_id" : ObjectId("523b6e61fb408eea0eec2648"), "userid" : "abby", "score" : 82 }

.. note::

   Do not confuse sparse indexes in MongoDB with `block-level`_
   indexes in other databases. Think of them as dense indexes with a
   specific filter.

   You can combine the sparse index option with the :ref:`unique
   indexes <index-type-unique>` option so that :program:`mongod` will
   reject documents that have duplicate values for a field, but that
   ignore documents that do not have the key.

   .. _`block-level`: http://en.wikipedia.org/wiki/Database_index#Sparse_index
