.. index:: read operations; query
.. _read-operations-query-operations:
.. _read-operations-queries:

===============================
MongoDB Queries and Projections
===============================

.. default-domain:: mongodb

In the :program:`mongo` shell, the :method:`find()
<db.collection.find()>` and :method:`findOne()
<db.collection.findOne()>` methods perform read operations. The
:method:`find() <db.collection.find()>` method has the following
syntax: [#formal-query-structure]_

.. code-block:: javascript

   db.collection.find( <query>, <projection> )

- The ``db.collection`` object specifies the database and collection
  to query. All queries in MongoDB address a *single* collection.

.. TODO: why would you need to find the name of the current database?

  You can enter ``db`` in the :program:`mongo` shell to return the
  name of the current database. Use the ``show collections`` operation
  in the :program:`mongo` shell to list the current collections in the
  database.

- Find queries in MongoDB are :term:`BSON` objects that use a set of
  :doc:`query operators </reference/operator>` to describe query
  parameters.

  - The ``<query>`` argument of the :method:`find()
    <db.collection.find()>` method holds this query document. A read
    operation without a query document will return all documents in the
    collection.

  - The ``<projection>`` argument describes the result set in the form
    of a document. Projections specify or limit the fields to return.

    Without a projection, the operation will return all fields of the
    documents. Specify a projection if your documents are larger, or
    when your application only needs a subset of available fields.

- The order of documents returned by a query is not defined and is not
  necessarily consistent unless you specify a sort (:method:`sort()
  <cursor.sort()>`).

For example, the following operation on the ``inventory`` collection
selects all documents where the ``type`` field equals ``'food'`` and
the ``price`` field has a value less than ``9.95`` (using the
:operator:`$lt` operator). The projection limits the response to the
``item`` and ``qty``, and ``_id`` field:

.. code-block:: javascript

   db.inventory.find( { type: 'food', price: { $lt: 9.95 } },
                      { item: 1, qty: 1 } )

The :method:`findOne() <db.collection.findOne()>` method is similar to
the :method:`find() <db.collection.find()>` method except the
:method:`findOne() <db.collection.findOne()>` method returns a single
document from a collection rather than a cursor. The method has the
syntax:

.. code-block:: javascript

   db.collection.findOne( <query>, <projection> )

For additional documentation and examples of the main MongoDB read
operators, refer to the :doc:`/core/read` page of the
:doc:`/crud` section.

.. [#formal-query-structure] :method:`db.collection.find()` is a
   wrapper for the more formal query structure with the
   :operator:`$query` operator.

.. _read-operations-query-document:
.. _read-operations-query-argument:

Query Documents
---------------

This section provides an overview of the query document for MongoDB
queries. See the preceding section for more information on
:ref:`queries in MongoDB <read-operations-query-operations>`.



.. _read-operations-projection:
.. _projection:

Projections
-----------

The :term:`projection` specification limits the fields to return for
all matching documents. Restricting the fields to return can minimize
network transit costs and the costs of deserializing documents in the
application layer.

The second argument to the :method:`find() <db.collection.find()>`
method is a projection, and it takes the form of a :term:`document` with
a list of fields for inclusion or exclusion from the result set. You
can either specify the fields to include (e.g. ``{ field: 1 }``) or specify the
fields to exclude (e.g. ``{ field: 0 }``). The ``_id`` field is, by
default, included in the result set. To exclude the ``_id`` field from
the result set, you need to specify in the projection document the
exclusion of the ``_id`` field (i.e. ``{ _id: 0 }``).

.. note::

   You cannot combine inclusion and exclusion semantics in a single
   projection with the *exception* of the ``_id`` field.
