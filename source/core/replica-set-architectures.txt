.. _replica-set-deployment-overview:
.. _replica-set-architecture:

====================================
Replica Set Deployment Architectures
====================================

.. default-domain:: mongodb

The architecture and design of the :term:`replica set` deployment can
have a great impact on the set's capacity and capability. This section
provides an overview of the architectural possibilities for
replica set deployments. However, for most production deployments a
conventional 3-member replica set with
:data:`~local.system.replset.members[n].priority` values of ``1`` is
sufficient.

It always makes sense to let the application requirements dictate the
architecture of the MongoDB deployment. Avoid adding unnecessary
complexity to your deployment.

Plan a Replica Set Deployment
-----------------------------

When developing an architecture for your replica set, consider the
following factors:

Run an Odd Number of Members to Ensure Successful Elections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ensure that the members of the replica set will always be able to elect
a :term:`primary`. Run an odd number of members or run an
:term:`arbiter` on one of your application servers if you have an even
number of members.

Distribute the Replica Set Geographically
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider keeping one or two members of the set in an off-site data
center, but make sure to configure the member
:data:`local.system.replset.members[n].priority` to prevent it from
becoming primary.

Ensure One Location in a Geographically Distributed System has a Quorum
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With geographically distributed members, know where the "quorum" of
members will be in the case of any network partitions. Attempt to ensure
that the set can elect a primary among the members in the primary data
center.

Run Hidden and Delayed Members for Dedicated Functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider including a :ref:`hidden <replica-set-hidden-members>` or
:ref:`delayed member <replica-set-delayed-members>` in your replica set
to support dedicated functionality, like backups, reporting, and
testing.

Use Tags to Ensure Write Operations Propagate Efficiently
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create custom write concerns with :ref:`replica set tags
<replica-set-configuration-tag-sets>` to ensure that applications can
control the threshold for a successful write operation. Use these write
concerns to ensure that operations propagate to specific data centers or
to machines of different functions before returning successfully.

Add Additional Members to Load Balance on Read-Heavy Deployments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For those deployments that rely heavily on distributing reads to
secondary instances, add additional members to the set as load
increases. As your deployment grows, consider adding or moving replica
set members to secondary data centers or to geographically distinct
locations for additional redundancy. While many architectures are
possible, always ensure that the quorum of members required to elect a
primary remains in your main facility.

Add New Members Ahead of Demand
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The process of establishing a new replica set member can be resource
intensive on existing members. As a result, deploy new members to
existing replica sets significantly before the current demand saturates
the existing members.

Use Journaling to Protect Against Power Failures
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Journaling is particularly useful for protection against power failures,
especially if your replica set resides in a single data center or power
circuit.

64-bit versions of MongoDB after version 2.0 have journaling enabled by
default.

Architectures
-------------

There is no single ideal :term:`replica set` architecture for every
deployment or environment. Indeed the flexibility of replica sets might
be their greatest strength. The following deployment patterns are
necessarily not mutually exclusive, and you can combine features of
each architecture in your own deployment.

.. include:: /includes/dfn-list-replica-set-architectures.rst

.. include:: /includes/toc-replica-set-architectures.rst
