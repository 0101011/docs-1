.. index:: index; sort order
.. _index-ascending-and-descending:

==========================================
Indexes with Ascending and Descending Keys
==========================================

.. default-domain:: mongodb

Indexes store references to fields in either ascending or descending
order. For single-field indexes, the order of keys doesn't matter,
because MongoDB can traverse the index in either direction. However,
for :ref:`compound indexes <index-type-compound>`, if you need to
order results against two fields, sometimes you need the index fields
running in opposite order relative to each other.

To specify an index with a descending order, use the following form:

.. code-block:: javascript

   db.products.ensureIndex( { "field": -1 } )

More typically in the context of a :ref:`compound
index<index-type-compound>`, the specification would resemble the
following prototype:

.. code-block:: javascript

   db.products.ensureIndex( { "fieldA": 1, "fieldB": -1 } )

Consider a collection of event data that includes both usernames and a
timestamp. If you want to return a list of events sorted by username
and then with the most recent events first. To create this index, use
the following command:

.. code-block:: javascript

   db.events.ensureIndex( { "username" : 1, "timestamp" : -1 } )