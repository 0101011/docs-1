.. index:: read operation; architecture
.. _read-operations-architecture:

===================
Distributed Queries
===================

.. default-domain:: mongodb

.. might make sense to break this in half and move it to
   replication/sharding and cross reference here?

Read Operations to Sharded Clusters
-----------------------------------

:term:`Sharded clusters <sharded cluster>` allow you to partition a data
set among a cluster of :program:`mongod` instances in a way that is
nearly transparent to the application. For an overview of sharded
clusters, see the :doc:`/sharding` section of this manual.

Read operations on sharded clusters are in general most efficient when
directed to a specific :program:`mongod` instance. A query to a sharded
cluster should include a :ref:`shard key <sharding-shard-key>`. When a
query includes a shard key, the cluster's :program:`mongos` server
routes the query from the client to the :program:`mongod` instance in
the cluster that holds the data. The :program:`mongos` routes the query
based on the cluster metadata stored in the :ref:`config database
<sharding-config-server>`.

If a query does not include the shard key, the :program:`mongos` must
direct the query to all shards in the collection. These *scatter gather*
queries can be inefficient, particularly on larger clusters, and are
unfeasible for routine operations.

For more information on read operations in sharded clusters, see the
:doc:`/core/sharded-cluster-query-router` and :ref:`sharding-shard-key`
sections.

.. index:: read operation; connection pooling
.. index:: connection pooling; read operations
.. _read-operations-connection-pooling:

Read Operations to Replica Sets
-------------------------------

:term:`Replica sets <replica set>` use :term:`read preferences <read
preference>` to determine where and how to route read operations to
members of the replica set. By default, MongoDB always reads data from
a replica set's :term:`primary`. You can modify that behavior by
changing the :ref:`read preference mode
<replica-set-read-preference-modes>`.

You can configure the :ref:`read preference mode
<replica-set-read-preference-modes>` on a per-connection or
per-operation basis to allow reads from :term:`secondaries
<secondary>` to:

- reduce latency in multi-data-center deployments,

- improve read throughput by distributing high read-volumes (relative
  to write volume),

- for backup operations, and/or

- to allow reads during :ref:`failover <replica-set-failover>`
  situations.

Read operations from secondary members of replica sets are not
guaranteed to reflect the current state of the primary, and the state
of secondaries will trail the primary by some amount of time. Often,
applications don't rely on this kind of strict consistency, but
application developers should always consider the needs of their
application before setting read preference.

For more information on read preference or on the read preference
modes, see :doc:`/core/read-preference` and
:ref:`replica-set-read-preference-modes`.
