==================
Data Modifications
==================

.. default-domain:: mongodb

Three categories of data modifications are create, update, and delete
operations. These operations insert, modify, and remove
:term:`documents <document>` in a :term:`collection`. A document is the
equivalent of an :term:`RDBMS` record, and a collection is the
equivalent of an RDBMS table.

Create Methods
--------------

Create operations add new documents into a collection. In MongoDB, the
:method:`db.collection.insert()` method adds new documents into a
collection. Create operations in MongoDB is analogous to the SQL
``INSERT`` statement.

In addition, both the :method:`db.collection.update()` method and the
:method:`db.collection.save()` method can perform an ``upsert`` which
can also insert new documents. An ``upsert`` is an operation that
performs either an update of an existing document or an insert of a new
document if the document to modify does not exist. See
:method:`db.collection.update()` and :method:`db.collection.save()` for
details on performing an upsert with these methods.

Update Methods
--------------

*Update* operations modify existing :term:`documents <document>` in a
:term:`collection`. In MongoDB, :method:`db.collection.update()` and
the :method:`db.collection.save()` method perform update operations.
See :method:`db.collection.update()` and :method:`db.collection.save()`
for details on performing an update with these methods. Update
operations in MongoDB is analogous to the SQL ``UPDATE`` statement.

Delete Method
-------------

*Delete* operations remove documents from a collection. In MongoDB,
:method:`~db.collection.remove()` performs delete operations. Delete
operations in MongoDB is analogous to the SQL ``DELETE`` statement.

Behaviors
---------

- The modification of a single document, or record, is atomic.

- When a single write operation modifies multiple documents, the
  operation as a whole is not atomic.

- .. include:: /includes/fact-write-concern.rst

Create Behaviors
~~~~~~~~~~~~~~~~

- If you add a new document *without* the :term:`_id` field, the client
  library or :program:`mongod` instance adds an ``_id`` field and
  populates the field with a unique :term:`ObjectId <objectid>`.

- If you specify the ``_id`` field, the value must be unique within the
  collection. For operations with :ref:`write concern <write-concern>`,
  if you try to create a document with a duplicate ``_id`` value,
  :program:`mongod` returns a duplicate key exception.
  
Update Behaviors
~~~~~~~~~~~~~~~~

- By default, the :method:`db.collection.update()` method updates a
  **single** document, but by using the ``multi`` option,
  :method:`~db.collection.update()` can update all documents that match
  the query criteria in the collection.

- The :method:`db.collection.save()` method only updates a single
  document.

- The :method:`db.collection.update()` method either updates specific
  fields in the existing document or replaces the document. See
  :method:`db.collection.update()` for details.

- The :method:`db.collection.save()` method replaces the document. See
  :method:`db.collection.save()` for details.
