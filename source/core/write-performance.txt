==============================
Write Performance and Behavior
==============================

.. default-domain:: mongodb

Document Insertion
------------------

If you add a new document *without* the :term:`_id` field, the client
library or :program:`mongod` instance adds an ``_id`` field and
populates the field with a unique :term:`ObjectId <objectid>`.

If you specify the ``_id`` field, the value must be unique within the
collection. For operations with :ref:`write concern <write-concern>`,
if you try to create a document with a duplicate ``_id`` value,
:program:`mongod` returns a duplicate key exception.
  
Document Update and Modification
--------------------------------

By default, the :method:`db.collection.update()` method updates a
**single** document. However, with the ``multi`` option,
:method:`~db.collection.update()` can update all documents in a
collection that match a query.

:method:`db.collection.save()` method replaces a document, and can
only update a single document. See :method:`db.collection.save()`
and :doc:`/tutorial/insert-documents` for more information

The :method:`db.collection.update()` method either updates specific
fields in the existing document or replaces the document. See
:method:`db.collection.update()` for details.

.. include:: /includes/fact-update-field-order.rst

.. _write-operations-isolation:

Isolation of Write Operations
-----------------------------

The modification of a single document, is always atomic even if the
write operation modifies multiple sub-documents *within* that
document. For write operations that modify multiple documents, the
operation as a whole is not atomic, and other operations may
interleave.

No other operations are atomic; however, you can attempt to isolate a
write operation that affects multiple documents using the
:doc:`isolation operator </reference/operator/isolated>`.

To isolate a sequence of write operations from other read and write
operations, see :doc:`/tutorial/perform-two-phase-commits`.

.. _write-operations-indexing:

Performance of Write Operations and Indexes
-------------------------------------------

After every insert, update, or delete operation, MongoDB must update
*every* index associated with the collection in addition to the data
itself. Therefore, every index on a collection adds some amount of
overhead for the performance of write operations. [#exceptions]_

In general, the performance gains that indexes provide for *read
operations* are worth the insertion penalty; however, when optimizing
write performance, be careful when creating new indexes and always
evaluate the indexes on the collection and ensure that your queries are
actually using these indexes.

For more information on indexes in MongoDB, see :doc:`/indexes` and
:doc:`/applications/indexes`.

.. [#exceptions] The overhead for :ref:`sparse indexes <index-type-sparse>`
   inserts and updates to un-indexed fields is less than for non-sparse
   indexes. Also for non-sparse indexes, updates that don't change the
   record size have less indexing overhead.

Write Concern
-------------

.. include:: /includes/fact-write-concern.rst

