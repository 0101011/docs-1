.. index:: sharding; architecture
.. index:: architectures; sharding
.. _sharding-architecture:

=============================
Sharded Cluster Architectures
=============================

.. default-domain:: mongodb

.. contents:: Architectures
   :backlinks: none
   :local:
    
This document describes requirements, organization and design of
:term:`sharded cluster` deployments.

.. include:: /images/sharded-cluster.rst

.. _sharding-requirements-infrastructure:

Sharded Cluster Components
--------------------------

A :term:`sharded cluster` has the following components:

Config Servers
~~~~~~~~~~~~~~

A production sharded cluster has exactly 3 config servers.

:term:`Config servers <config database>` are special purpose
:program:`mongod` instances store the metadata for the cluster. The
:program:`mongos` instances cache this data and use it to determine
which :term:`shard` is responsible for which :term:`chunk`.

For development and testing purposes you may deploy a cluster with a single
configuration server process, but always use exactly three config
servers for redundancy and safety in production.

.. see:: :doc:`/core/sharded-cluster-config-servers`

.. class:: hidden

   .. toctree::
      :titlesonly:

      /core/sharded-cluster-config-servers

Shard Servers
~~~~~~~~~~~~~

Each shard consists of one or more :program:`mongod` instances that
store the data for the sharded cluster.

These "normal" :program:`mongod` instances hold all of the
actual data for the cluster.

Typically each shard is a :term:`replica sets <replica set>`. Each
replica set consists of multiple :program:`mongod` instances. The
members of the replica set provide redundancy and high availability
for the data in each shard.

.. important:: MongoDB enables data :term:`partitioning <partition>`,
   or sharding, on a *per collection* basis. You *must* access all
   data in a sharded cluster via the :program:`mongos` instances as
   below.  If you connect directly to a :program:`mongod` in a sharded
   cluster you will see its fraction of the cluster's data. The data
   on any given shard may be somewhat random: MongoDB provides no
   guarantee that any two contiguous chunks will reside on a single
   shard.

.. see:: :doc:`/core/sharded-cluster-shards`

.. class:: hidden

   .. toctree::
      :titlesonly:

      /core/sharded-cluster-shards

Routing Instances (``mongos``)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:program:`mongos` routes queries in a sharded environment, and a
sharded cluster has at least one :program:`mongos` instance, although
typically clusters have many :program:`mongos` instances.

These instance direct queries from the application layer to the
shards that hold the data. The :program:`mongos` instances have no
persistent state or data files and only cache metadata in RAM from
the config servers.

.. note::

   In most situations :program:`mongos` instances use minimal
   resources, and you can run them on your application servers
   without impacting application performance. However, if you use
   the :term:`aggregation framework` some processing may occur on
   the :program:`mongos` instances, causing that :program:`mongos`
   to require more system resources.

.. see:: :doc:`/core/sharded-cluster-query-router`

.. class:: hidden

   .. toctree::
      :titlesonly:

      /core/sharded-cluster-query-router

Test Cluster Architecture
-------------------------

You can deploy a very minimal cluster for testing and
development. These *non-production* clusters have the following
components:

- One :ref:`config server <sharding-config-server>`.

- At least one shard (either :term:`replica sets
  <replica set>` or as a standalone :program:`mongod`.)

- One :program:`mongos` instance.

.. include:: /images/sharded-cluster-test-architecture.rst

.. warning:: Use the test cluster architecture for testing and development only.

.. _sharding-production-architecture:

Production Cluster Architecture
-------------------------------

In a production cluster, you must ensure that data is redundant and that
your systems are highly available. To that end, a production-level
cluster must have the following components:

- Three :ref:`config servers <sharding-config-server>`, each residing on a
  discrete system.

  A single :term:`sharded cluster` must have exclusive use of its
  :ref:`config servers <sharding-config-server>`. If you have multiple
  sharded clusters, you will need to have a group of config servers
  for each cluster.

- Two or more :term:`replica sets <replica set>` to serve as
  :term:`shards <shard>`. For information on replica sets, see
  :doc:`/replication`.

- Two or more :program:`mongos` instances. Typically, you deploy a
  single :program:`mongos` instance on each application server.
  Alternatively, you may deploy several :program:`mongos` nodes and let
  your application connect to these via a load balancer.

.. include:: /images/sharded-cluster-production-architecture.rst

Sharded and Non-Sharded Data
----------------------------

Sharding operates on the collection level. You can shard multiple
collections within a database or have multiple databases with
sharding enabled. [#sharding-databases]_ However, in production
deployments, some databases and collections will use sharding, while
other databases and collections will only reside on a single
shard. 

.. include:: /images/sharded-cluster-primary-shard.rst

Regardless of the data architecture of your :term:`sharded cluster`,
ensure that all queries and operations use the :term:`mongos` router to
access the data cluster. Use the :program:`mongos` even for operations
that do not impact the sharded data.

.. include:: /images/sharded-cluster-mixed.rst

.. [#sharding-databases] As you configure sharding, you will use the
   :dbcommand:`enableSharding` command to enable sharding for a
   database. This simply makes it possible to use the
   :dbcommand:`shardCollection` command on a collection within that database.

