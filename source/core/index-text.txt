.. _index-feature-text:

============
Text Indexes
============

.. default-domain:: mongodb

.. versionadded:: 2.4

MongoDB provides ``text`` indexes to support text search of string
content in documents of a collection. ``text`` indexes are
case-insensitive and can include any field whose value is a string or
an array of string elements. You can only access the ``text`` index
with the :dbcommand:`text` command.

.. important::

   - Before you can create a text index or :ref:`run the text command
     <text-search-text-command>`, you need to manually enable the text
     search. See :doc:`/tutorial/enable-text-search` for information on
     how to enable the text search feature.

   - .. include:: /includes/fact-text-index-limit-one.rst

.. _create-text-index:

Create Text Index
-----------------

To create a ``text`` index, use the
:method:`db.collection.ensureIndex()` method. To index a field that
contains a string or an array of string elements, include the field and
specify the string literal ``"text"`` in the index document, as in the
following example:

.. code-block:: javascript

   db.reviews.ensureIndex( { comments: "text" } )

For examples of creating ``text`` indexes on multiple fields, see
:doc:`/tutorial/create-text-index-on-multiple-fields`.

``text`` indexes drop language-specific stop words (e.g. in English,
“the,” “an,” “a,” “and,” etc.) and uses simple language-specific suffix
stemming. See :ref:`text-search-languages` for the supported languages
and :doc:`/tutorial/specify-language-for-text-index` for details on
specifying languages with ``text`` indexes.

``text`` indexes can cover a text search. If an index covers a text
search, MongoDB does not need to inspect data outside of the index to
fulfill the search. For details, see
:doc:`/tutorial/return-text-queries-using-only-text-index`.

.. _text-index-storage-requirements:

Storage Requirements and Performance Costs
------------------------------------------

``text`` indexes have the following storage requirements and
performance costs:

- ``text`` indexes change the space allocation method for all future
  record allocations in a collection to :collflag:`usePowerOf2Sizes`.

- ``text`` indexes can be large. They contain one index entry for each
  unique post-stemmed word in each indexed field for each document
  inserted.

- Building a ``text`` index is very similar to building a large
  multi-key index and will take longer than building a simple ordered
  (scalar) index on the same data.

- When building a large ``text`` index on an existing collection,
  ensure that you have a sufficiently high limit on open file
  descriptors. See the :doc:`recommended settings </reference/ulimit>`.

- ``text`` indexes will impact insertion throughput because MongoDB
  must add an index entry for each unique post-stemmed word in each
  indexed field of each new source document.

- Additionally, ``text`` indexes do not store phrases or information
  about the proximity of words in the documents. As a result, phrase
  queries will run much more effectively when the entire collection
  fits in RAM.

.. _text-search-text-command:

Text Search
-----------

Text search supports the search of string content in documents of a
collection. MongoDB provides the :dbcommand:`text` command to perform
the text search. The :dbcommand:`text` command accesses the ``text``
index.

The text search process:

- tokenizes and stems the search term(s) during both the index creation
  and the text command execution.

- assigns a score to each document that contains the search term in the
  indexed fields. The score determines the relevance of a document to a
  given search query.

By default, :dbcommand:`text` command returns at most the top 100
matching documents as determined by the scores. The command can search
for words and phrases. The command matches on the complete stemmed
words. For example, if a document field contains the word
``blueberry``, a search on the term ``blue`` will not match the
document. However, a search on either ``blueberry`` or ``blueberries``
will match.

For information and examples on various text search patterns, see
:doc:`/tutorial/search-for-text`.
