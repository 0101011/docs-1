=========================
MongoDB CRUD Introduction
=========================

.. default-domain:: mongodb

Database operations that create, read, update, or delete data from the
data set are the :term:`CRUD` operations.

Most applications use a :term:`driver` to read and write data to
MongoDB. Drivers provide an idiomatic interface to MongoDB for a
particular programming language or environment. The :program:`mongo`
shell, part of the MongoDB distribution, provides a complete
interface.  The examples in the MongoDB Manual use the
:program:`mongo` shell.

Data Structure
--------------

The MongoDB stores data in a structure that is analogous to structures
in programming languages that associate keys with values, where keys
may hold other pairs of keys and values (e.g. dictionaries, hashes,
maps, and associative arrays.) MongoDB stores data in the form of
*documents*, which are JSON-like field and value pairs. Formally,
MongoDB documents are :term:`BSON` Documents, which is a binary
representation of :term:`JSON` with additional type information.

.. include:: /images/crud-annotated-document.rst

MongoDB stores all documents in :term:`collections <collection>`. A
collection is a group of related documents that have a set of shared
common indexes. Collections are analogous to a table in relational
databases.

.. include:: /images/crud-annotated-collection.rst

MongoDB queries and data modification operations are similar to the
operations in relational databases. The MongoDB interfaces provide
methods to create, read, update, and delete documents in collections.
MongoDB also provides ways to define the behavior of read and write
operations in distributed MongoDB deployments.

Database Operations
-------------------

Query
~~~~~

All queries start with a collection of documents as the basis for
their search. Then, the query statement specifies criteria, or
conditions, that select documents from the collection.  Finally
queries may *project*, or specify fields from the matching documents
to return to the client. Applications may also add modifiers to
queries to limit the number of results or request a sorted result set.

Consider the following diagram of the query process that specifies a
query criteria and a sort modifier:

.. include:: /images/crud-query-stages.rst

Data Modification
~~~~~~~~~~~~~~~~~

Data modification refer to operations that create, update, or delete
data. In MongoDB, these operations modify the data of a single
:term:`collection`. For the update and delete operations, you can
specify the criteria to select the documents to update or remove.

Consider the following diagram of a MongoDB remove operation that
deletes from a collection all documents that meet the query criteria:

.. include:: /images/crud-remove-stages.rst

In the diagram, the remove operation selects the documents to remove
using the query criteria of ``status`` equal to ``D``. The operation
then removes these documents from the ``users`` collection.

Operation Summary
~~~~~~~~~~~~~~~~~

The following four operations 

**Create** or *insert* operations.
   Adds new documents to a collection.

**Read**, *queries*, or *find* operations.
   Fetches documents from a collection that match a specified
   criteria. Queries have optional projections so that the database
   can return only the required fields to the application. Clients may
   modify queries so that the database can limit the number of results
   or sort the result set.

**Update** operations. 
   Modifies the content of documents in a collection. Update
   operations take a query criteria to select documents for
   updating.

**Delete** or *remove* operations.
   Removes documents from a collection. Remove operations take a query
   criteria to select which documents to remove.

See :doc:`/core/data-modification` and :doc:`/core/query` for more
information.

Additional Features
-------------------

To enhance the performance of common queries and updates, MongoDB has
full support for secondary indexes. These indexes allow applications to
store a *view* of a portion of the collection in an efficient data
structure. Most indexes store an ordered representation of all values
of a field or a group of fields. Indexes may also :ref:`enforce
uniqueness <index-type-unique>`, store objects in a :doc:`geospatial
representation </applications/geospatial-indexes>`, and facilitate
:doc:`text search </core/text-search>`. See :doc:`/indexes` for more
information.

For replica sets and sharded clusters with replica set components,
applications specify :ref:`read preferences
<replica-set-read-preference>`. A read preference determines how the
client direct read operations to the set. 

Applications can also control the behavior of write operations using
:ref:`write concern <write-concern>`. Particularly useful for
deployments with replica sets, the write concern semantics allow
clients to specify the assurance that MongoDB provides when reporting
on the success of a write operation.

In addition to the basic queries, MongoDB provides several data
aggregation features. For example, MongoDB can return counts of the
number of documents that match a query, or return the number of
distinct values for a field, or process a collection of documents using
a versatile stage-based data processing pipeline or map-reduce
operations. See :doc:`/aggregation` for more information.
