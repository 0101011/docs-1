=========================
MongoDB CRUD Introduction
=========================

.. default-domain:: mongodb

The MongoDB provides methods to create, read, update, and
delete records.  MongoDB queries and data modification
operations are similar to the operations in relational databases.
MongoDB also provides ways to define the behavior of read and write
operations in distributed MongoDB deployments.

Applications use a :term:`driver` to interact with MongoDB
MongoDB. Drivers provide an idiomatic interface to MongoDB for a
particular programming language or environment. The :program:`mongo`
shell, part of the MongoDB distribution, provides a complete
interface.  The examples in the MongoDB Manual use the
:program:`mongo` shell.

Data Structure
--------------

MongoDB stores data in the form of *documents*, which are JSON-like
field and value pairs. This structure is analogous to structures in
programming languages that associate keys with values, where keys may
hold other pairs of keys and values (e.g. dictionaries, hashes, maps,
and associative arrays.)  Formally, MongoDB documents are :term:`BSON`
Documents, which is a binary representation of :term:`JSON` with
additional type information. For more information, see
:doc:`/core/document`.

.. include:: /images/crud-annotated-document.rst

MongoDB stores all documents in :term:`collections <collection>`. A
collection is a group of related documents that have a set of shared
common indexes. Collections are analogous to a table in relational
databases.

.. include:: /images/crud-annotated-collection.rst

Database Operations
-------------------

Query
~~~~~

In MongoDB a query targets a specific collection of documents. A query
specifies a criteria which the database will return all documents within
that collection meeting that critiera.  Rather than returning the full
document, queries may *project*, or specify fields from the matching
documents to return to the client. A query may be further modified to
to limit the number of results or request a sorted result
set.

The following diagram of the query process that specifies a query
criteria and a sort modifier:

.. include:: /images/crud-query-stages.rst

Data Modification
~~~~~~~~~~~~~~~~~

Data modification refer to operations that create, update, or delete
data. In MongoDB, these operations modify the data of a single
:term:`collection`. For the update and delete operations, you can
specify the criteria to select the documents to update or remove.

Consider the following diagram of a MongoDB remove operation that
deletes from a collection all documents that meet the query criteria:

.. include:: /images/crud-remove-stages.rst

In the diagram, the remove operation selects the documents to remove
using the query criteria of ``status`` equal to ``D``. The operation
then removes these documents from the ``users`` collection.

Operation Summary
~~~~~~~~~~~~~~~~~

The following four operations 

**Create** or *insert* operations.
   Adds new documents to a collection.

**Read**, *queries*, or *find* operations.
   Fetches documents from a collection that match a specified
   criteria. Queries have optional projections so that the database
   can return only the required fields to the application. Clients may
   modify queries so that the database can limit the number of results
   or sort the result set.

**Update** operations. 
   Modifies the content of documents in a collection. Update
   operations take a query criteria to select documents for
   updating.

**Delete** or *remove* operations.
   Removes documents from a collection. Remove operations take a query
   criteria to select which documents to remove.

See :doc:`/core/data-modification` and :doc:`/core/query` for more
information.

Additional Features
-------------------

To enhance the performance of common queries and updates, MongoDB has
full support for indexes. Indexes store an ordered representation of all values
of a field or a group of fields. Using an index enables the database to determine
which documents match the provided critiera without inspecting each
document in the collection. Indexes may also :ref:`enforce
uniqueness <index-type-unique>`, store objects in a :doc:`geospatial
representation </applications/geospatial-indexes>`, and facilitate
:doc:`text search </core/text-search>`. See :doc:`/indexes` for more
information.

When reading from a system comprised of more than one node, MongoDB
provides the ability for the application to specify :ref:`read preferences
<replica-set-read-preference>`. A read preference determines how the
client directs read operations to a replica set.

Applications can also control the behavior of write operations using
:ref:`write concern <write-concern>`. Particularly useful for
deployments with replica sets, the write concern semantics allow
clients to specify the assurance that MongoDB provides when reporting
on the success of a write operation.

In addition to the basic queries, MongoDB provides several data
aggregation features. For example, MongoDB can return counts of the
number of documents that match a query, or return the number of
distinct values for a field, or process a collection of documents using
a versatile stage-based data processing pipeline or map-reduce
operations. See :doc:`/aggregation` for more information.
