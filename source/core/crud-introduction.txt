==============================
Data Manipulation Introduction
==============================

.. default-domain:: mongodb

Most interactions with MongoDB happen through a client library or
:term:`driver`. The driver provides an idiomatic interface to MongoDB
for a particular programming language or environment. The
:program:`mongo` shell, which is part of the MongoDB distribution,
provides a complete interface for MongoDB used in examples throughout
the MongoDB manual.

All data records in MongoDB are :term:`BSON` :term:`documents
<document>`. These structures have fields that hold values and
correspond to dictionaries, hashes, maps, or associative arrays in
most programming languages. MongoDB stores all documents in
:term:`collections <collection>`,  which are groups of related
documents.

Broadly, manipulating data in MongoDB is similar to manipulating data
in any database. MongoDB interfaces provide methods for creating,
reading, updating, and deleting documents in a collection. MongoDB
also provides semantics for defining the behavior of read and write
operations in distributed MongoDB deployments.

Data Modification Operations
----------------------------

**Create** operations, or *inserts*, add new documents to a
collection. The :method:`db.collection.insert()` and
:method:`db.collection.save()` methods both perform inserts. See
:doc:`/core/create` for examples.

**Read** operations, or *queries*, fetch documents from a
collection. The :method:`db.collection.find One()` method returns a
single document. The :method:`db.collection.find()` method returns a
cursor to the documents. See :doc:`/core/read` for more
information. For more on cursors, see :doc:`/core/cursors`.

**Update** operations modify the content of documents in a
collection. MongoDB provides several methods that perform updates: the
:method:`db.collection.update()` method updates either one document
(default) or multiple documents. The :method:`db.collection.save()`
method can also update existing documents. See see :doc:`/core/update`
for examples and more information.

**Delete** operations, *remove* documents from a collection. In the
:program:`mongo` shell the :method:`db.collection.remove()` method
performs deletes. See :doc:`/core/delete` for examples and more
information.

Data Modification Semantics
---------------------------

MongoDB provides additional semantics to allow applications to control
the behavior of a write operations. This :ref:`write concern
<write-concern>` allows applications to specify the conditions for
a successful write operation.

For deployments that include replica sets, applications may also
specify :ref:`read preference <read-preference>` that describe to which
members of a set the application should direct read operations.

Mechanics Of Read Operation
---------------------------

Indexes support the performance of a read and write operation by
providing a data structure that allows the database to locate records
more efficiently. For some read operations, indexes sometimes *cover*
a query such that the read operations only needs to access an index to
fulfill the read operations. See :doc:`/core/read-operations-indexes`
and :doc:`/indexes` for more information.
