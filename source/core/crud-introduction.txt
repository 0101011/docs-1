=========================
MongoDB CRUD Introduction
=========================

.. default-domain:: mongodb

Queries are operations that retrieve data from a MongoDB data
store. Data manipulation operations insert, modify or remove data from
a MongoDB data store. 

Most applications use a :term:`driver` to read and write data to
MongoDB. Drivers provide an idiomatic interface to MongoDB for a
particular programming language or environment. The :program:`mongo`
shell, part of the MongoDB distribution, provides a complete interface.
The examples in the MongoDB Manual use the :program:`mongo` shell.

Data Model
----------

All data records in MongoDB are :term:`BSON` :term:`documents
<document>`. These structures consist of fields that hold values.
Documents correspond to dictionaries, hashes, maps, or associative
arrays in most programming languages. 

.. include:: /images/crud-annotated-document.rst

MongoDB stores all documents in :term:`collections <collection>`.
Collections are groups of related documents.

.. TODO add picture here

Queries and data modification in MongoDB are similar to other
databases. The MongoDB interfaces provide methods to create, read,
update, and delete documents in collections. MongoDB also provides ways
to define the behavior of read and write operations in distributed
MongoDB deployments.

Database Operations
-------------------

Query
~~~~~

All queries start with a collection of docuemnts as the basis for
their search. Then, the query statement specifies criteria, or
conditions, that select documents from the collection.  Finally
queries may *project*, or specify fields from the matching documents
to return to the client. Applications may also add modifiers to
queries to limit the number of results or request a sorted result set.

Consider the following diagram of the query process that specifies a
query criteria and a sort modifier:

.. include:: /images/crud-query-stages.rst

Data Modification
~~~~~~~~~~~~~~~~~

Consider the following diagram of an remove process that specifies a
query condition:

.. include:: /images/crud-remove-stages.rst

In this example, the remove operation selects documents to remove using
the query criteria of ``status`` equal to ``D``. The operation then
removes these documents from the ``users`` collection.

Operation Summary
~~~~~~~~~~~~~~~~~

Database operations either create, read, update, or delete data from
the data set: these operations are the :term:`CRUD`
operations`. MongoDB provides its own set of crud operations:

**Create** or *insert* operations.
   Add new documents to a collection. You can add a single document
   or multiple documents to a collection.

**Read**, *queries*, or *find* operations.
   Fetch documents from a collection.  You can specify the query
   criteria to return only documents that match the criteria. You can
   also specify or project which fields to return in the matching
   documents. You can also add modifiers to queries to limit or sort
   the result set.

**Update** operations. 
   Modify the content of documents in a collection.  MongoDB provides
   several methods that perform update. You can specify the query
   criteria to update only the documents that match the criteria. The
   operation can update a single document or multiple documents.

**Delete** or *remove* operations. 
   Remove documents from a collection. You can also specify the query
   criteria to remove only the documents that match the criteria. The
   operation can remove a single document or multiple documents from
   the collection.

See :doc:`/core/data-modification` and :doc:`/core/query` for more
information.

Additional Features
-------------------

Queries return a cursor object. These cursors are *iterables* in most
programming environments. See :doc:`/core/cursors` for more
information.

To enhance the performance of common queries and updates, MongoDB has
full support for secondary indexes. These indexes allow applications to
store a *view* of a portion of the collection in an efficient data
structure. Most indexes store an ordered representation of all values
of a field or a group of fields. Indexes may also :ref:`enforce
uniqueness <index-type-unique>`, store objects in a :doc:`geospatial
representation </applications/geospatial-indexes>`, and facilitate
:doc:`text search </core/text-search>`. See :doc:`/indexes` for more
information.

Applications can control the behavior of write operations using
:ref:`write concern <write-concern>`. The write concern semantics allow
clients to specify the guarantee that MongoDB provides when reporting
on the success of a write operation.

For replica sets, applications may also specify :ref:`read preferences
<replica-set-read-preference>`. A read preference determines how the
client direct read operations to the set.

In addition to the basic queries, MongoDB also supports data
aggregation operations. See :doc:`/aggregation` for more information.
