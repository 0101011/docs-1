======================
MongoDB Backup Methods
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

When deploying MongoDB in production, you should have a strategy for
capturing and restoring backups in the case of data loss
events. There are several ways to back up MongoDB clusters:

- :ref:`backup-with-file-copies`
- :ref:`backup-and-restore-tools`
- :ref:`backup-with-mms`
- :ref:`backup-with-mms-onprem`

.. _backup-with-file-copies:

Backup by Copying Underlying Data Files
---------------------------------------

You can create a backup by copying MongoDB's underlying data
files.

If the volume where MongoDB stores data files supports point in time
snapshots, you can use these snapshots to create backups of a MongoDB
system at an exact moment in time.

File systems snapshots are an operating system volume manager feature,
and are not specific to MongoDB. The mechanics of snapshots depend on
the underlying storage system. For example, if you use
Amazonâ€™s EBS storage system for EC2 supports snapshots. On
Linux the LVM manager can create a snapshot.

To get a correct snapshot of a running :binary:`~bin.mongod` process, you
must have journaling enabled and the journal must reside on the same
logical volume as the other MongoDB data files. Without journaling
enabled, there is no guarantee that the snapshot
will be consistent or valid.

To get a consistent snapshot of a sharded system, you must disable the
balancer and capture a snapshot from every shard and a config server at
approximately the same moment in time.

If your storage system does not support snapshots, you can copy the
files directly using ``cp``, ``rsync``, or a similar tool. Since
copying multiple files is not an atomic operation, you must stop all
writes to the :binary:`~bin.mongod` before copying the files. Otherwise, you will
copy the files in an invalid state.

Backups produced by copying the underlying data do not support point
in time recovery for replica sets and are difficult to manage for
larger sharded clusters. Additionally, these backups are larger
because they include the indexes and duplicate underlying storage
padding and fragmentation. :binary:`~bin.mongodump`, by contrast, creates
smaller backups.

For more information, see the
:doc:`/tutorial/backup-with-filesystem-snapshots` and
:doc:`/tutorial/backup-sharded-cluster-with-filesystem-snapshots` for
complete instructions on using LVM to create snapshots. Also see
:ecosystem:`Back up and Restore Processes for MongoDB on Amazon EC2
</tutorial/backup-and-restore-mongodb-on-amazon-ec2>`.

.. _backup-with-mongodump:

Backup with ``mongodump``
-------------------------

The :binary:`~bin.mongodump` tool reads data from a MongoDB database and
creates high fidelity BSON files. The :binary:`~bin.mongorestore` tool can
populate a MongoDB database with the data from these BSON files.

Use Cases
~~~~~~~~~

:binary:`~bin.mongodump` and :binary:`~bin.mongorestore` are simple and
efficient for backing up small MongoDB deployments, for partial backup
and restores based on a query, syncing from production to staging or
development environments, or changing the storage engine of a standalone.

However, these tools can be problematic for capturing backups of larger
systems, sharded clusters, or replica sets. For alternatives, see
:ref:`backup-with-mms` or :ref:`backup-with-mms-onprem`.

Data Exclusion
~~~~~~~~~~~~~~

.. include:: /includes/fact-mongodump-local-database.rst

:binary:`~bin.mongodump` only captures the documents in the database in its
backup data and does not include index data. :binary:`~bin.mongorestore` or
:binary:`~bin.mongod` must then rebuild the indexes after restoring data.

Data Compression Handling
~~~~~~~~~~~~~~~~~~~~~~~~~

When run against a :binary:`~bin.mongod` instance that uses the
:doc:`WiredTiger </core/wiredtiger>` storage engine,
:binary:`~bin.mongodump` outputs uncompressed data.

Performance
~~~~~~~~~~~

:binary:`~bin.mongodump` can adversely affect the performance of the
:binary:`~bin.mongod`. If your data is larger than system memory, the
:binary:`~bin.mongodump` will push the working set out of memory.

If applications modify data while :binary:`~bin.mongodump` is creating a
backup, :binary:`~bin.mongodump` will compete for resources with those
applications.

To mitigate the impact of :binary:`~bin.mongodump` on the performance of
the replica set, use :binary:`~bin.mongodump` to capture backups from a
:doc:`secondary </core/replica-set-secondary>` member of a replica set.

Applications can continue to modify data while :binary:`~bin.mongodump`
captures the output. For replica sets, :binary:`~bin.mongodump` provides
the :option:`--oplog <mongodump --oplog>` option to include in its
output :term:`oplog` entries that occur during the :binary:`~bin.mongodump`
operation. This allows the corresponding :binary:`~bin.mongorestore`
operation to replay the captured oplog. To restore a backup created
with :option:`--oplog <mongodump --oplog>`, use :binary:`~bin.mongorestore`
with the :option:`--oplogReplay <mongorestore --oplogReplay>` option.

However, for replica sets, consider :ref:`backup-with-mms` or
:ref:`backup-with-mms-onprem`.

See :doc:`/tutorial/backup-and-restore-tools`,
:doc:`/tutorial/backup-small-sharded-cluster-with-mongodump`,
and :doc:`/tutorial/backup-sharded-cluster-with-database-dumps`
for more information.

.. _backup-with-mms:

|MMS| Backup
----------------------------

The |mms-home|
supports the backing up and restoring of MongoDB deployments.

|MMS| continually backs up MongoDB replica sets and sharded
clusters by reading the oplog data from your MongoDB deployment.

|MMS| Backup offers point in time recovery of MongoDB replica sets and a
consistent snapshot of sharded clusters.

|MMS| achieves point in time recovery by storing oplog data so that it
can create a restore for any moment in time in the last 24 hours for a
particular replica set or sharded cluster.
Sharded cluster snapshots are difficult to achieve
with other MongoDB backup methods.

To restore a MongoDB deployment from an |MMS| Backup snapshot, you download
a compressed archive of your MongoDB data files and distribute those
files before restarting the :binary:`~bin.mongod` processes.

To get started with |MMS| Backup, sign up for |mms-home|. For
documentation on |MMS|, see the |mms-docs|.

.. include:: /includes/replacement-mms.rst

.. _backup-with-mms-onprem:

Ops Manager Backup Software
---------------------------

MongoDB Subscribers can install and run the same core software that
powers :ref:`backup-with-mms` on their own infrastructure. Ops Manager,
an on-premise solution, has
similar functionality to the cloud version and is available with
Enterprise Advanced subscriptions.

For more information about Ops Manager, see the `MongoDB Enterprise
Advanced
<https://www.mongodb.com/products/mongodb-enterprise-advanced?jmp=docs>`_ page
and the :opsmgr:`Ops Manager Manual </>`.

Further Reading
---------------

.. include:: /includes/toc/dfn-list-administration-backup-and-recovery.rst
