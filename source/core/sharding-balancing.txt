.. index:: balancing
.. _sharding-balancing:

============================
Sharded Collection Balancing
============================

.. default-domain:: mongodb

Balancing is the process MongoDB uses to redistribute data within a
:term:`sharded cluster`. When a :term:`shard` has too many
:term:`chunks <chunk>` when compared to other shards, MongoDB
automatically balances the shards. MongoDB balances the shards without
intervention from the application layer.

The balancing process attempts to minimize the impact that balancing can
have on the cluster, by:

- Moving only one chunk at a time.

- Initiating a balancing round **only** when the difference in the number of
  chunks between the shard with the greatest number and the shard with the
  lowest exceeds the :ref:`migration threshold
  <sharding-migration-thresholds>`.

You may disable the balancer on a temporary basis for
maintenance and limit the window during which it runs to prevent the
balancing process from impacting production traffic.

To disable the balancer, see :ref:`sharding-balancing-disable-temporally`.

.. seealso:: :doc:`/tutorial/manage-sharded-cluster-balancer`.

.. note::

   The balancing procedure for :term:`sharded clusters <sharded cluster>`
   is entirely transparent to the user and application layer. This
   documentation is only included for your edification and possible
   troubleshooting purposes.

.. index:: balancing; internals
.. _sharding-balancing-internals:

Cluster Balancer
----------------

The :ref:`balancer <sharding-balancing>` sub-process is responsible
for redistributing chunks evenly among the shards and ensuring that
the data of every sharded collection is evenly distributed among the
cluster's shards.

.. _sharding-internals-balancing:

A balancing round originates from an arbitrary :program:`mongos`
instance from one of the cluster's
:program:`mongos` instances. When a balancer process is active, the
responsible :program:`mongos` acquires a "lock" by modifying a
document in the ``lock`` collection in the :ref:`config-database`.

By default, the balancer process is always running. When the number of
chunks in a collection is unevenly distributed among the shards, the
balancer begins migrating :term:`chunks <chunk>` from shards with more
chunks to shards with a fewer number of chunks. The balancer will
continue migrating chunks, one at a time, until the collection's data
is evenly distributed among the shards.

While these automatic chunk migrations are crucial for distributing
data, they carry some overhead in terms of bandwidth and workload,
both of which can impact database performance. As a result, MongoDB
attempts to minimize the effect of balancing by only migrating chunks
when the distribution of chunks passes the :ref:`migration thresholds
<sharding-migration-thresholds>`.

.. _sharding-requirements-data:

Data Quantity Requirements for Sharded Clusters
-----------------------------------------------

Your cluster must manage a significant quantity of data for sharding
to have an effect on your collection. The default :term:`chunk` size
is 64 megabytes, and the :ref:`balancer
<sharding-balancing>` will not begin moving data until the imbalance
of chunks in the cluster exceeds the :ref:`migration threshold
<sharding-migration-thresholds>`.

Practically, this means that unless your cluster has many hundreds of
megabytes of data, chunks will remain on a single shard.

While there are some exceptional situations where you may need to
shard a small collection of data, most of the time the additional
complexity added by sharding the small collection is not worth the
additional complexity and overhead unless you need additional
concurrency or capacity for some reason. If you have a small data set,
usually a properly configured single MongoDB instance or replica set
will be more than sufficient for your persistence layer needs.

:term:`Chunk <chunk>` size is :option:`user configurable <mongos --chunkSize>`.
However, the default value is of 64 megabytes is ideal
for most deployments. See :ref:`sharding-chunk-size` for more information.


.. _sharding-shard-size:

Shard Size
----------

By default, MongoDB will attempt to fill all available disk space with
data on every shard as the data set grows. Monitor disk utilization in
addition to other performance metrics, to ensure that the cluster
always has capacity to accommodate additional data.

You can also configure a "maximum size" for any shard when you add the
shard using the ``maxSize`` parameter of the :dbcommand:`addShard`
command. This will prevent the :term:`balancer` from migrating chunks
to the shard when the value of :data:`~serverStatus.mem.mapped`
exceeds the ``maxSize`` setting.

.. seealso:: :ref:`sharded-cluster-config-max-shard-size` and
   :doc:`/administration/monitoring`.

Sharded and Non-Sharded Data
----------------------------

Sharding operates on the collection level. You can shard multiple
collections within a database or have multiple databases with
sharding enabled. [#sharding-databases]_ However, in production
deployments, some databases and collections will use sharding, while
other databases and collections will only reside on a single
shard.

.. include:: /images/sharded-cluster-primary-shard.rst

Regardless of the data architecture of your :term:`sharded cluster`,
ensure that all queries and operations use the :term:`mongos` router to
access the data cluster. Use the :program:`mongos` even for operations
that do not impact the sharded data.

.. include:: /images/sharded-cluster-mixed.rst

.. [#sharding-databases] As you configure sharding, you will use the
   :dbcommand:`enableSharding` command to enable sharding for a
   database. This simply makes it possible to use the
   :dbcommand:`shardCollection` command on a collection within that database.
