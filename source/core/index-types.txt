.. index:: index types
.. _index-types:

===========
Index Types
===========

.. default-domain:: mongodb

This section enumerates the types of indexes available in MongoDB.
For all collections, MongoDB creates the default :ref:`_id index
<index-type-id>`. You can create additional indexes with the
:method:`~db.collection.ensureIndex()` method on any
single field or :ref:`sequence of fields <index-type-compound>` within
any document or :ref:`sub-document <index-sub-document>`. MongoDB also
supports indexes of arrays, called :ref:`multi-key indexes
<index-type-multi-key>`.

Secondary Indexes
-----------------

All indexes in MongoDB are :term:`secondary indexes <secondary
index>`. You can create indexes on any field within any document or
sub-document. Additionally, you can create compound indexes with
multiple fields, so that a single query can match multiple components
using the index while scanning fewer whole documents.

In general, you should create indexes that support your primary, common,
and user-facing queries. Doing so requires MongoDB to scan the fewest
number of documents possible.

In the :program:`mongo` shell, you can create an index by calling the
:method:`ensureIndex() <db.collection.ensureIndex()>` method. For more
detailed instructions about building indexes, see the :doc:`Indexing
Tutorials </administration/indexes>` page.

.. index:: _id index
.. index:: _id
.. index:: index; _id
.. index:: index types; primary key
.. _index-type-id:

_id Index
~~~~~~~~~

The ``_id`` index is a :ref:`unique index <index-type-unique>`
[#unique-index-report]_ on the ``_id`` field. MongoDB creates this
index by default on all collections. You cannot delete the index on
``_id``.

While the ``_id`` index is a :term:`<secondary index>`, you can think
of the ``_id`` field as the :term:`primary key` for the collection.
Every document *must* have a unique ``_id`` field. You may store any
unique value in the ``_id`` field. The default value of ``_id`` is an
:term:`ObjectID` on every :method:`-db.collection.insert()` operation.
An :term:`ObjectId` is a 12-byte unique identifiers suitable for use as
the value of an ``_id`` field.

.. note::

   In :term:`sharded clusters <sharded cluster>`, if you do *not* use
   the ``_id`` field as the :term:`shard key`, then your application
   **must** ensure the uniqueness of the values in the ``_id`` field
   to prevent errors.  This is most-often done by using a standard
   auto-generated :term:`ObjectId`.

   Before version 2.2, :term:`capped collections <capped-collection>`
   did not have an ``_id`` field. In version 2.2 and newer, capped
   collection do have an ``_id`` field, except those in the ``local``
   :term:`database`. See :ref:`Capped Collections Reccomendations
   and Restrictions <capped-collections-reccomendations-and-restrictions>`
   for more information.

Other Secondary Indexes
~~~~~~~~~~~~~~~~~~~~~~~

.. toctree::
   :titlesonly:

   /core/index-basic
   /core/index-subdocument
   /core/index-embedded-field
   /core/index-multikey
   /core/index-compound

Index Configurations
--------------------

.. toctree::
   :titlesonly:

   /core/index-ascdesc
   /core/index-unique
   /core/index-sparse
   /core/index-hashed
   /core/index-names
