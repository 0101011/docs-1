.. index:: replica set members; arbiters
.. _replica-set-arbiter-configuration:
.. _replica-set-arbiters:

===================
Replica Set Arbiter
===================

.. default-domain:: mongodb

An arbiter does **not** have a copy of the primary's data set and
**cannot** become a primary. An arbiter exists solely to participate in
:ref:`elections of new primary <replica-set-elections>`. An election of
a new primary requires a majority, and an arbiter allows you to
construct this majority without the overhead of adding replicating
nodes to the system. For instance, if your replica set has an even
number of members, add an :doc:`arbiter
</tutorial/add-replica-set-arbiter>` to ensure that members can quickly
obtain a majority of votes in an election for primary.

.. warning::

   - Do not run arbiter processes on a system that is an active primary
     or secondary of its replica set.

   - To prevent tied :term:`elections <election>`, do not add an
     arbiter to a set if the set already has an odd number of voting
     members.

Arbiters have the following interactions with the rest of the replica
set:

- Credential exchanges that authenticate the arbiter with the replica
  set. All MongoDB processes within a replica set use keyfiles. These
  exchanges are encrypted.

  MongoDB only transmits the authentication credentials in a
  cryptographically secure exchange, and encrypts no other exchange.

- Exchanges of replica set configuration data and of votes. These are
  not encrypted.

  If your MongoDB deployment uses SSL, then all communications between
  arbiters and the other members of the replica set are secure. See the
  documentation :doc:`/tutorial/configure-ssl` for more
  information. As with all MongoDB components, run arbiters on secure
  networks.

To add an arbiter to the replica set, see
:doc:`/tutorial/add-replica-set-arbiter`.
