===========
Replication
===========

.. default-domain:: mongodb

Replication is the process of synchronizing data across multiple servers.

Purpose of Replication
----------------------

Replication provides redundancy and makes data more highly available.
With multiple copies of data on multiple database servers, replication
can protect against the loss of a database server, such as from a disk
or a network failure. And with multiple copies of data available, you
can use a copy for a dedicated function, such as reporting.

Replication can also increase read capacity. With copies of data on
different servers, applications can send read operations to different
servers. You can also have geographically distributed data servers.
Such distributions can improve data locality and availability for
distributed applications.

Replication in MongoDB
----------------------

A replica set is a group of :program:`mongod` processes. These members
maintain synchronized data sets through the replication of write
operations. The members of a replica sets can be either a primary or a
secondary.

The **primary** is the member that accepts all write operations from
client applications. The replica set can have only one primary.
Limiting write operations to a single primary provides **strict
consistency** among replica set members. The primary applies the write
operations to its data set and logs these operations to its operations
log or :doc:`oplog </core/replica-set-oplog>`. For further reading, see
:doc:`primary </core/replica-set-primary>`.

.. include:: /images/replica-set-read-write-operations-primary.rst

The **secondaries** replicate the primary's oplog and apply the
operations to their data sets to synchronize with the primary's data
set. If the primary becomes unavailable, the replica set will elect a
secondary to become primary. By default, applications read from the
primary, but applications can specify their :doc:`read preferences
</core/read-preference>` to read from secondaries. For further reading,
see :doc:`secondaries </core/replica-set-secondary>`.

.. include:: /images/replica-set-primary-with-two-secondaries.rst

Additionally, you may add a :program:`mongod` instance as an
**arbiter**. Arbiters do not maintain a data set. Arbiters only exist
to vote in elections. If your replica set has an even number of
members, add an arbiter to obtain a majority of votes in an election
for primary. Arbiters do not require dedicated hardware. For further
reading, see :doc:`arbiter </core/replica-set-arbiter>`.

.. include:: /images/replica-set-primary-with-secondary-and-arbiter.rst

.. note::
   The role of an **arbiter** is immutable. A **primary** may step down
   and rejoin as a **secondary**. And a **secondary** may become the
   new primary during the election. But, an **arbiter** always remains
   in that role.

Asynchronous Replication
~~~~~~~~~~~~~~~~~~~~~~~~

The replication of the oplog from the primary to the secondaries is
asynchronous. Asynchronous replication allows normal operation to
continue even if some members are not available. However, asynchronous
replication means that secondaries may not have applied the most recent
write operations to themselves. This means read operations to the
secondaries may not always reflect the most current data.

For further reading, see :doc:`/core/replica-set-oplog` and
:doc:`/core/replica-set-sync`.

For more details on how clients route read operations to replica sets,
see :doc:`/core/read-preference`.

Automatic Recovery from Loss of Primary
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When a primary becomes inaccessible to other members in the set, i.e.
the primary has not returned a heartbeat(ping) for more than 10
seconds, the replica set members automatically hold an election to
select one of the secondaries to become the new primary. The first
member to receive the majority of the votes becomes the primary.

.. include:: /images/replica-set-trigger-election.rst

For further reading, see :doc:`/core/replica-set-elections` and
:doc:`/core/replica-set-rollbacks`.

Additional Features
~~~~~~~~~~~~~~~~~~~

Replica sets can provide flexibility to support various application
needs. For example, in a :doc:`geographically distributed replica set
</core/replica-set-architecture-geographically-distributed>`, you may
want only the members in a specific data center to become primary in an
election. You can weight elections in favor of a particular member or
group of members by adjusting the
:data:`~local.system.replset.members[n].priority` value of the members.

For further reading, see :doc:`/core/replica-set-priority-0-member`,
:doc:`/core/replica-set-hidden-member`,
:doc:`/core/replica-set-delayed-member`.
