========================
Replication Introduction
========================

.. default-domain:: mongodb

Replication is the process of synchronizing data across multiple servers.

Purpose of Replication
----------------------

Replication provides redundancy and makes data more highly available.
By maintaining copies of the data on multiple database servers,
replication can protect against situations where a database server may
become unavailable, such as from a disk or a network failure.

Replication can also provide increased read capacity. With copies of
data on different servers, different applications can send read
operations to different servers. For geographically distributed data
servers, replication improves data locality and availability for
distributed applications. Additionally, you can use a particular copy
for dedicated functionality, such as reporting.

Replication in MongoDB
----------------------

A replica set is a group of :program:`mongod` processes that maintain
synchronized data sets through the automatic replication of write
operations.

The **primary** is the member that accepts all write operations from
client applications. The replica set can have only one primary. The
primary applies the write operations to its data set and then logs the
operations to its operations log or :doc:`oplog
</core/replica-set-oplog>`. Limiting write operations to a single
primary provides **strict consistency** among replica set members. For
more information on primary, see :doc:`primary
</core/replica-set-primary>`.

.. include:: /images/replica-set-read-write-operations-primary.rst

The **secondaries** replicate the primary's oplog and apply the
operations to their data sets to synchronize with the primary's data
set. If the primary becomes unavailable, the replica set will elect a
secondary to become primary. By default, applications read from the
primary, but applications can specify their :doc:`read preferences
</core/read-preference>` to read from secondaries. For more inforamtion
on secondaries, see :doc:`secondaries </core/replica-set-secondary>`.

.. include:: /images/replica-set-primary-with-two-secondaries.rst

Additionally, you may run a :program:`mongod` instance as an
**arbiter**. These instances exist to participate in elections but do
not maintain a data set. In general, a replica set only includes an
arbiter to ensure an odd number of members. Arbiters have minimal
resource requirements and do not require dedicated hardware. For more
information on arbiter, see :doc:`arbiter
</core/replica-set-arbiter>`.

.. include:: /images/replica-set-primary-with-secondary-and-arbiter.rst

.. note::

   The role of an **arbiter** is immutable. Whereas, a **primary** may
   step down and rejoin as a **secondary**, and a **secondary** may
   become the new primary during the election, an **arbiter** always
   remains in that role.

Asynchronous Replication
~~~~~~~~~~~~~~~~~~~~~~~~

The replication of the oplog from the primary to the secondaries is
asynchronous. Asynchronous replication allows normal operation to
continue even if some members are not available. However, asynchronous
replication means that secondaries may not always have applied the
latest write operations to themselves, and read operations to the
secondaries may not always reflect the most current data.

For information on the replication process, see
:doc:`/core/replica-set-oplog` and :doc:`/core/replica-set-sync`.

For information regarding how clients route read operations to replica
sets, see :doc:`/core/read-preference`.

Automatic Recovery from Loss of Primary
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When a primary becomes inaccessible to other members in the set, i.e.
the primary has not returned a heartbeat(ping) for more than 10
seconds, the replica set members automatically hold an election to
select one of the secondaries to become the new primary. The first
member to receive the majority of the votes becomes the primary.

.. include:: /images/replica-set-trigger-election.rst

For more information on recovery, see
:doc:`/core/replica-set-elections` and
:doc:`/core/replica-set-rollbacks`.

Additional Features of Replica Sets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Replica set configuration can provide flexibility to support various
application needs. For instance, you can weight elections in favor of a
particular member or group of members by adjusting the
:data:`~local.system.replset.members[n].priority` value of the members.
For example, in a :doc:`geographically distributed replica set
</core/replica-set-architecture-geographically-distributed>`, you can
adjust the :data:`~local.system.replset.members[n].priority` values so
that only members in a specific data center can become primary.

For more information on different configurations and architectures, see
:doc:`/core/replica-set-priority-0-member`,
:doc:`/core/replica-set-hidden-member`,
:doc:`/core/replica-set-delayed-member`, and
:doc:`/core/replica-set-architectures`.
