.. index:: read preference
.. index:: slaveOk
.. index:: read preference; background
.. _replica-set-read-preference:
.. _replica-set-read-preference-background:

===============
Read Preference
===============

.. default-domain:: mongodb

Read preference describes how MongoDB clients route read operations to
members of a :term:`replica set`.

By default, an application directs its read operations to the
:term:`primary` member in a :term:`replica set`. Reading from the
primary guarantees that read operations reflect the latest version of a
document. However, by distributing some or all reads to secondary
members of the replica set, you can improve read throughput or reduce
latency for an application that does not require fully up-to-date data .

You must exercise care when specifying read preferences: modes other
than :readmode:`primary` can *and will* return stale data because the
secondary queries will not include the most recent write operations to
the replica set's :term:`primary`.

The following are common use cases for using non-:readmode:`primary`
read preference modes:

- Running systems operations that do not affect the front-end
  application.

  Issuing reads to secondaries helps distribute load and prevent
  operations from affecting the main workload of the primary. This can
  be a good choice for reporting and analytics workloads, for example.

  .. note::

     Read preferences aren't relevant to direct connections to
     a single :program:`mongod` instance. However, in order to perform
     read operations on a direct connection to a secondary member of a
     replica set, you must set a read preference, such as
     :term:`secondary`.

- Providing local reads for geographically distributed applications.

  If you have application servers in multiple data centers, you may
  consider having a :ref:`geographically distributed replica set
  <replica-set-geographical-distribution>` and using a non primary read
  preference or the :readmode:`nearest`. This reduces network latency by
  having the application server to read from a nearby secondary, rather
  than a distant primary.

- Maintaining availability during a failover.

  Use :readmode:`primaryPreferred` if you want your application to do
  consistent reads from the primary under normal circumstances, but to
  allow stale reads from secondaries in an emergency. This provides a
  "read-only mode" for your application during a failover.

.. note::

   Using read modes other than :readmode:`primary` and
   :readmode:`primaryPreferred` to provide extra capacity is not in and
   of itself justification for non-:readmode:`primary` in many cases.
   Furthermore, :doc:`sharding </sharding>` increases read and write
   capacity by distributing read and write operations across a group of
   machines.

.. re: above note: What?

.. re: below note: This probably belongs somewhere else

Read Preference Modes
---------------------

.. versionadded:: 2.2

MongoDB :doc:`drivers </applications/drivers>` support five
read preference modes:

.. warning::

   All read preference modes except :readmode:`primary` may return
   stale data as :term:`secondaries <secondary>` replicate operations
   from the primary with some delay.

   Ensure that your application can tolerate stale data if you choose
   to use a non-:readmode:`primary` mode.

.. include:: /includes/read-preference-modes-table.rst

You can specify a read preference mode on connection objects, database
objects, collection objects, or per-operation. The syntax for specifying
the read preference mode is :api:`specific to the driver and to the
idioms of the host language <>`.

Read preference modes are also available to clients connecting to a
:term:`sharded cluster` through a :program:`mongos`. The
:program:`mongos` instance obeys specified read preferences when
connecting to the :term:`replica set` that provides each :term:`shard`
in the cluster.

In the :program:`mongo` shell, the :method:`~cursor.readPref()` cursor
method provides access to read preferences.

If read operations account for a large percentage of your
application's traffic, distributing reads to secondary members can
improve read throughput. However, in most cases :doc:`sharding
</core/sharding>` provides better support for larger scale
operations, as clusters can distribute read and write
operations across a group of machines.

For more information, see :ref:`read preference background
<replica-set-read-preference-background>` and :ref:`read preference
behavior <replica-set-read-preference-behavior>`. See also the
:api:`documentation for your driver <>`.

.. index:: tag sets
.. index:: read preference; tag sets
.. _replica-set-read-preference-tag-sets:

Tag Sets
--------

Tag sets allow you to specify custom :doc:`read preferences
</core/read-preference>`
and :ref:`write concerns <write-operations-write-concern>`
so that your application can target
operations to specific members, based on custom parameters.

Custom read preferences and write concerns evaluate tags sets in
different ways: read preferences consider the value of a tag when
selecting a member to read from. while write concerns ignore the value
of a tag to when selecting a member *except* to consider whether or not
the value is unique.

You can specify tag sets with the following read preference modes:

- :readmode:`primaryPreferred`
- :readmode:`secondary`
- :readmode:`secondaryPreferred`
- :readmode:`nearest`

Tags are not compatible with :readmode:`primary` and, in general, only
apply when :ref:`selecting <replica-set-read-preference-behavior-member-selection>`
a :term:`secondary` member of a set for a read operation. However, the
:readmode:`nearest` read mode, when combined with a tag set will select
the nearest member that matches the specified tag set, which may be a
primary or secondary.

All interfaces use the same :ref:`member selection logic
<replica-set-read-preference-behavior-member-selection>` to choose the
member to which to direct read operations, basing the choice on read
preference mode and tag sets.

For information on configuring tag sets, see the
:doc:`/tutorial/configure-replica-set-tag-sets` tutorial.

For more information on how read preference :ref:`modes
<replica-set-read-preference-modes>` interact with tag sets, see the
:doc:`documentation for each read preference mode </reference/read-preference>`.

.. index:: read preference; behavior
.. _replica-set-read-preference-behavior:

Behavior
--------

.. versionchanged:: 2.2

MongoDB drivers use the following procedures to direct operations to
replica sets and sharded clusters. To determine how to route their
operations, applications periodically
update their view of the replica set's state, identifying which members
are up or down, which member is :term:`primary`, and verifying the
latency to each :program:`mongod` instance.

.. index:: read preference; ping time
.. index:: read preference; nearest
.. index:: read preference; member selection
.. _replica-set-read-preference-behavior-ping-time:
.. _replica-set-read-preference-behavior-nearest:
.. _replica-set-read-preference-behavior-member-selection:

Member Selection
~~~~~~~~~~~~~~~~

Clients, by way of their drivers, and :program:`mongos` instances for
sharded clusters periodically update their view of the replica set's state.

When you select non-:readmode:`primary` read preference, the driver
will determine which member to target using the following process:

#. Assembles a list of suitable members, taking into account member type
   (i.e. secondary, primary, or all members.)

#. Excludes members not matching the tag sets, if specified.

#. Determines which suitable member is the closest to the
   client in absolute terms.

#. Builds a list of members that are within a defined ping distance
   (in milliseconds) of the "absolute nearest"
   member. [#acceptable-secondary-latency]_

#. Selects a member from these hosts at random. The member receives
   the read operation.

Drivers can then associate the thread or connection with the selected member.
This ":ref:`request association
<replica-set-read-preference-behavior-requests>`" is configurable by
the application. See your :doc:`driver </applications/drivers>`
documentation about request association configuration and default
behavior.

.. [#acceptable-secondary-latency] Applications can configure the
   threshold used in this stage. The default "acceptable latency" is
   15 milliseconds, which you can override in the drivers with their
   own ``secondaryAcceptableLatencyMS`` option.  For :program:`mongos`
   you can use the :option:`--localThreshold <mongos --localThreshold>`
   or :setting:`localThreshold` runtime options to set this value.

.. _replica-set-read-preference-behavior-requests:

Request Association
~~~~~~~~~~~~~~~~~~~

.. important:: *Request association* is configurable by the
   application. See your :doc:`driver </applications/drivers>`
   documentation about request association configuration and default
   behavior.

Because :term:`secondary` members of a :term:`replica set` may lag
behind the current :term:`primary` by different amounts, reads for
:term:`secondary` members may reflect data at different points in time.
To prevent sequential reads from jumping around in time, the driver
**can** associate application threads to a specific member of the set
after the first read, thereby preventing reads from other members.
The thread will continue to read from the same member until:

- The application performs a read with a different read preference,

- The thread terminates, or

- The client receives a socket exception, as is the case when there's
  a network error or when the :program:`mongod` closes connections
  during a :term:`failover`.  This triggers a :ref:`retry
  <replica-set-read-preference-behavior-retry>`, which may be
  transparent to the application.

When using request association, if the client detects that the set has
elected a new :term:`primary`, the driver will discard all associations
between threads and members.

.. _replica-set-read-preference-behavior-retry:

Auto-Retry
~~~~~~~~~~

Connections between MongoDB drivers and :program:`mongod` instances in
a :term:`replica set` must balance two concerns:

#. The client should attempt to prefer current results, and any
   connection should read from the same member of the replica set as
   much as possible.

#. The client should minimize the amount of time that the database is
   inaccessible as the result of a connection issue, networking
   problem, or :term:`failover` in a replica set.

As a result, MongoDB drivers and :program:`mongos`:

- Reuse a connection to specific :program:`mongod` for as long as
  possible after establishing a connection to that instance. This
  connection is *pinned* to this :program:`mongod`.

- Attempt to reconnect to a new member, obeying existing :ref:`read
  preference modes <replica-set-read-preference-modes>`, if the connection
  to :program:`mongod` is lost.

  Reconnections are transparent to the application itself. If
  the connection permits reads from :term:`secondary` members, after
  reconnecting, the application can receive two sequential reads
  returning from different secondaries. Depending on the state of the
  individual secondary member's replication, the documents can reflect
  the state of your database at different moments.

- Return an error *only* after attempting to connect to three members
  of the set that match the :ref:`read preference mode
  <replica-set-read-preference-modes>` and :ref:`tag set
  <replica-set-read-preference-tag-sets>`.  If there are fewer than
  three members of the set, the client will error after connecting to
  all existing members of the set.

  After this error, the driver selects a new member using the
  specified read preference mode. In the absence of a specified read
  preference, the driver uses :readmode:`primary`.

- After detecting a failover situation, [#fn-failover]_ the driver
  attempts to refresh the state of the replica set as quickly as
  possible.

.. [#fn-failover] When a :term:`failover` occurs, all members of the set
   close all client connections that produce a socket error in the
   driver. This behavior prevents or minimizes :term:`rollback`.

.. index:: read preference; sharding
.. index:: read preference; mongos
.. _replica-set-read-preference-behavior-sharding:
.. _replica-set-read-preference-behavior-mongos:

Read Preference in Sharded Clusters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionchanged:: 2.2
   Before version 2.2, :program:`mongos` did not support the
   :ref:`read preference mode semantics <replica-set-read-preference-modes>`.

In most :term:`sharded clusters <sharded cluster>`, a :term:`replica set`
provides each shard where read preferences are also applicable. Read
operations in a sharded cluster, with regard to read preference, are
identical to unsharded replica sets.

Unlike simple replica sets, in sharded clusters, all interactions with
the shards pass from the clients to the :program:`mongos` instances
that are actually connected to the set members. :program:`mongos` is
responsible for the application of the read preferences, which is
transparent to applications.

There are no configuration changes required for full support of read
preference modes in sharded environments, as long as the
:program:`mongos` is at least version 2.2. All :program:`mongos`
maintain their own connection pool to the replica set members. As a
result:

- A request without a specified preference has
  :readmode:`primary`, the default, unless, the :program:`mongos`
  reuses an existing connection that has a different mode set.

  Always explicitly set your read preference mode to prevent
  confusion.

- All :readmode:`nearest` and latency calculations reflect the
  connection between the :program:`mongos` and the :program:`mongod`
  instances, not the client and the :program:`mongod` instances.

  This produces the desired result, because all results must pass
  through the :program:`mongos` before returning to the client.

Database Commands
-----------------

Because some :term:`database commands <database command>` read and
return data from the database, all of the official drivers support
full :ref:`read preference mode semantics <replica-set-read-preference-modes>`
for the following commands:

- :dbcommand:`group`
- :dbcommand:`mapReduce` [#inline-map-reduce]_
- :dbcommand:`aggregate`
- :dbcommand:`collStats`
- :dbcommand:`dbStats`
- :dbcommand:`count`
- :dbcommand:`distinct`
- :dbcommand:`geoNear`
- :dbcommand:`geoSearch`
- :dbcommand:`geoWalk`

.. versionadded:: 2.4
   :program:`mongos` adds support for routing commands to shards using
   read preferences. Previously :program:`mongos` sent all commands to
   shards' primaries.

.. [#inline-map-reduce] Only "inline" :dbcommand:`mapReduce`
   operations that do not write data support read preference,
   otherwise these operations must run on the :term:`primary`
   members.
