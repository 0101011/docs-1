======================
Server-side JavaScript
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _server-side-javascript:

Overview
--------

MongoDB provides the following commands, methods, and operator that
perform server-side execution of JavaScript code:

- :dbcommand:`mapReduce` and the corresponding :binary:`~bin.mongo` shell
  method :method:`db.collection.mapReduce()`. ``mapReduce`` operations
  *map*, or associate, values to keys, and for keys with multiple
  values, *reduce* the values for each key to a single object. For more
  information, see :doc:`/core/map-reduce`.

- :query:`$where` operator that evaluates a JavaScript expression or a
  function in order to query for documents.

You can also specify a JavaScript file to the :binary:`~bin.mongo` shell to
run on the server. For more information, see
:ref:`running-js-scripts-in-mongo-on-mongod-host`

.. include:: /includes/extracts/admonition-js-prevalence-methods.rst

You can also disable server-side execution of JavaScript. For details,
see :ref:`disable-server-side-js`.

.. _running-js-scripts-in-mongo-on-mongod-host:

Running ``.js`` files via a ``mongo`` shell Instance on the Server
------------------------------------------------------------------

You can specify a JavaScript (``.js``) file to a :binary:`~bin.mongo` shell
instance to execute the file on the server. This is a good technique
for performing batch administrative work. When you run :binary:`~bin.mongo`
shell on the server, connecting via the localhost interface, the
connection is fast with low latency.

The :ref:`command helpers <command-helpers>` provided in the
:binary:`~bin.mongo` shell are not available in JavaScript files because
they are not valid JavaScript. The following table maps the most common
:binary:`~bin.mongo` shell helpers to their JavaScript equivalents.

.. list-table::
   :header-rows: 1

   * - Shell Helpers

     - JavaScript Equivalents

   * - ``show dbs``, ``show databases``
       

     - .. code-block:: javascript
       
          db.adminCommand('listDatabases')
       

   * - ``use <db>``
       

     - .. code-block:: javascript
       
           db = db.getSiblingDB('<db>')
       

   * - ``show collections``
       

     - .. code-block:: javascript
       
          db.getCollectionNames()
       

   * - ``show users``
       

     - .. code-block:: javascript
       
          db.getUsers()
       

   * - ``show roles``
       

     - .. code-block:: javascript
       
           db.getRoles({showBuiltinRoles: true})
       

   * - ``show log <logname>``
       

     - .. code-block:: javascript
       
          db.adminCommand({ 'getLog' : '<logname>' })
       

   * - ``show logs``
       

     - .. code-block:: javascript
       
          db.adminCommand({ 'getLog' : '*' })
       

   * - ``it``
       

     - .. code-block:: javascript
       
          cursor = db.collection.find()
          if ( cursor.hasNext() ){
             cursor.next();
          }
       

Concurrency
-----------

.. versionchanged:: 2.4

The V8 JavaScript engine, which became the default in 2.4, allows
multiple JavaScript operations to execute at the same time. Prior to
2.4, MongoDB operations that required the JavaScript interpreter had to
acquire a lock, and a single :binary:`~bin.mongod` could only run a single
JavaScript operation at a time.

Refer to the individual method or operator documentation for any
concurrency information. See also the :ref:`concurrency table
<faq-concurrency-operations-locks>`.

.. _disable-server-side-js:

Disable Server-Side Execution of JavaScript
-------------------------------------------

.. include:: /includes/fact-disable-javascript-with-noscript.rst

.. seealso:: :doc:`/tutorial/store-javascript-function-on-server`
