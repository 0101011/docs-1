====
Read
====

.. default-domain:: mongodb

*Read* operations retrieve :term:`documents <document>` from a
:term:`collection` in MongoDB. A document is the equivalent of an
:term:`RDBMS` record, and a collection is the equivalent of an RDBMS
table. For general information about read operations and the factors
that affect their performance, see :doc:`/core/read-operations`. For
documentation of the other CRUD operations, see the :doc:`/crud` page.

You can retrieve documents from MongoDB using either of the following
methods:

- :ref:`find <crud-read-find>`

- :ref:`findOne <crud-read-findOne>`

.. _crud-read-find:

``find()``
----------

The :method:`~db.collection.find()` method is the primary method to
select documents from a collection. The :method:`~db.collection.find()`
method returns a cursor that contains a number of documents. Most
:doc:`drivers </applications/drivers>` provide application developers
with a native iterable interface for handling cursors and accessing
documents. The :method:`~db.collection.find()` method has the following
syntax:

.. code-block:: javascript

   db.collection.find( <query>, <projection> )

.. admonition:: Corresponding Operation in SQL

   The :method:`~db.collection.find()` method is analogous to
   the ``SELECT`` statement, while:

   - the ``<query>`` argument corresponds to the ``WHERE`` statement,
     and

   - the ``<projection>`` argument corresponds to the list of fields
     to select from the result set.

.. pull-quote:: The examples refer to a collection named ``bios``
   that contains documents with the following prototype:

   .. code-block:: javascript

      {
        "_id" : 1,
        "name" : {
                   "first" : "John",
                   "last" :"Backus"
                 },
        "birth" : ISODate("1924-12-03T05:00:00Z"),
        "death" : ISODate("2007-03-17T04:00:00Z"),
        "contribs" : [ "Fortran", "ALGOL", "Backus-Naur Form", "FP" ],
        "awards" : [
                    {
                      "award" : "W.W. McDowellAward",
                      "year" : 1967,
                      "by" : "IEEE Computer Society"
                    },
                    {
                      "award" : "National Medal of Science",
                      "year" : 1975,
                      "by" : "National Science Foundation"
                    },
                    {
                      "award" : "Turing Award",
                      "year" : 1977,
                      "by" : "ACM"
                    },
                    {
                      "award" : "Draper Prize",
                      "year" : 1993,
                      "by" : "National Academy of Engineering"
                    }
        ]
      }

.. note::

   In the :program:`mongo` shell, you can format the output by adding
   ``.pretty()`` to the :method:`~db.collection.find()` method call.

.. _crud-read-findOne:
.. _crud-read-find-one:

``findOne()``
-------------

The :method:`~db.collection.findOne()` method selects a single
document from a collection and returns that document.
:method:`~db.collection.findOne()` does *not* return a cursor.

The :method:`~db.collection.findOne()` method has the following
syntax:

.. code-block:: javascript

   db.collection.findOne( <query>, <projection> )

Except for the return value, :method:`~db.collection.findOne()` method
is quite similar to the :method:`~db.collection.find()` method; in
fact, internally, the :method:`~db.collection.findOne()` method is the
:method:`~db.collection.find()` method with a limit of 1.


With Empty Query Specification
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If there is no ``<query>`` argument, the
:method:`~db.collection.findOne()` method selects just one document
from a collection.

The following operation returns a single document from the ``bios``
collection:

.. code-block:: javascript

   db.bios.findOne()

With a Query Specification
~~~~~~~~~~~~~~~~~~~~~~~~~~

If there is a ``<query>`` argument, the
:method:`~db.collection.findOne()` method selects the first document
from a collection that meets the ``<query>`` argument:

The following operation returns the first matching document from the
:doc:`bios collection
</reference/bios-example-collection>` where either the field ``first`` in the subdocument
``name`` starts with the letter ``G`` **or** where the field ``birth``
is less than ``new Date('01/01/1945')``:

.. code-block:: javascript

   db.bios.findOne(
      {
        $or: [
               { 'name.first' : /^G/ },
               { birth: { $lt: new Date('01/01/1945') } }
             ]
      }
   )

With a Projection
~~~~~~~~~~~~~~~~~

You can pass a ``<projection>`` argument to
:method:`~db.collection.findOne()` to control the fields included in
the result set.

Specify the Fields to Return
````````````````````````````

The following operation finds a document in the :doc:`bios collection
</reference/bios-example-collection>` and
returns only the ``name`` field, the ``contribs`` field, and the
``_id`` field:

.. code-block:: javascript

   db.bios.findOne(
       { },
       { name: 1, contribs: 1 }
   )

Return All but the Excluded Fields
``````````````````````````````````

The following operation returns a document in the :doc:`bios collection
</reference/bios-example-collection>`
where the ``contribs`` field contains the element ``OOP`` and returns
all fields *except* the ``_id`` field, the ``first`` field in the
``name`` subdocument, and the ``birth`` field from the matching
documents:

.. code-block:: javascript

   db.bios.findOne(
      { contribs: 'OOP' },
      { _id: 0, 'name.first': 0, birth: 0 }
   )

Access the ``findOne`` Result
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Although similar to the :method:`~db.collection.find()` method, because
the :method:`~db.collection.findOne()` method returns a document rather
than a cursor, you cannot apply the cursor methods such as
:method:`~cursor.limit()`, :method:`~cursor.sort()`, and
:method:`~cursor.skip()` to the result of the
:method:`~db.collection.findOne()` method. However, you can
access the document directly, as in the example:

.. code-block:: javascript

   var myDocument = db.bios.findOne();

   if (myDocument) {
      var myName = myDocument.name;

      print (tojson(myName));
   }
