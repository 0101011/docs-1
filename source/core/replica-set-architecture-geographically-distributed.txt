.. _replica-set-geographical-distribution:

===============================
Geographically Distributed Sets
===============================

.. default-domain:: mongodb

A geographically distributed replica set provides data recovery should
one data center fail. These sets include at least one member in a
secondary data center. The member has its
:data:`~local.system.replset.members[n].priority`
:ref:`set <replica-set-reconfiguration-usage>` to ``0`` to prevent the
member from ever becoming primary.

In many circumstances, these deployments consist of the following:

- One :term:`primary <primary>` in the first (i.e., primary) data
  center.

- One :term:`secondary <secondary>` member in the primary data center.
  This member can become the primary member at any time.

- One secondary member in a secondary data center. This member is
  ineligible to become primary. Set its
  :data:`local.system.replset.members[n].priority` to ``0``.

If the primary is unavailable, the replica set will elect a new primary
from the primary data center.

If the *connection* between the primary and secondary data centers fails,
the member in the secondary center cannot independently become the
primary.

If the primary data center fails, you can manually recover the data
set from the secondary data center. With appropriate :ref:`write concern
<write-concern>` there will be no data loss and downtime can be
minimal.

When you add a secondary data center, make sure to keep an odd number of
members overall to prevent ties during elections for primary by
deploying an :ref:`arbiter <replica-set-arbiters>` in your
primary data center. For example, if you have three members in the
primary data center and add a member in a secondary center, you create
an even number. To create an odd number and prevent ties, deploy an
:ref:`arbiter <replica-set-arbiters>` in your primary data center.

.. seealso::
   :doc:`/tutorial/deploy-geographically-distributed-replica-set`
