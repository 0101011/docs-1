==========
Map-Reduce
==========

.. default-domain:: mongodb

MongoDB provides map-reduce operations to handle large and complex
aggregation tasks. In MongoDB, map-reduce operations use custom
JavaScript functions to *map*, or associate, values to a key and to
*reduce* the values for the key to a single object.

Map-reduce provides greater flexibility and capabilities than the
:doc:`aggregation pipeline </core/aggregation-pipeline>`. But the
complexities of map-reduce make the aggregation pipeline the preferred
solution for many aggregation tasks.

< section >

``mapReduce`` Command
---------------------

To perform map-reduce operations, MongoDB interfaces provides the
:dbcommand:`mapReduce` command. In the :program:`mongo` shell, MongoDB
provides :method:`db.collection.mapReduce()` wrapper method.

For examples of map-reduce, see :doc:`/tutorial/map-reduce-examples`.

Map-Reduce Behavior
-------------------

In MongoDB, the map-reduce operation can store the results to a table
or return the results inline. With stored results, later map-reduce
operations on the same input collection can replace, merge, or reduce
the stored results with the new results. See :dbcommand:`mapReduce` and
:doc:`/tutorial/perform-incremental-map-reduce` for details and
examples.

MongoDB supports map-reduce operations on :doc:`sharded collections
</core/sharding-introduction>`. Map-reduce operations can also output
the results to a sharded collection. See
:doc:`/core/map-reduce-sharded-collections`.
