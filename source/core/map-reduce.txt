==========
Map-Reduce
==========

.. default-domain:: mongodb

MongoDB provides map-reduce operations to handle large and complex
aggregation tasks. Map-reduce provides greater flexibility and
capabilities than the :doc:`aggregation pipeline
</core/aggregation-pipeline>`. But the complexities of map-reduce make
the aggregation pipeline the preferred solution for many aggregation
tasks.

Like other aggregation tasks, map-reduce operations operate on the
documents of a single :term:`collection` and can specify criteria to
filter the input documents as well as sort and limit the *input*
documents.

Map-Reduce JavaScript Functions
-------------------------------

In MongoDB, map-reduce operations use custom JavaScript functions to
*map*, or associate, values to a key. If a key has multiple values
mapped to it, the operation *reduces* the values for the key to a
single object. 

The use of custom JavaScript functions provide flexibility to
map-reduce operations. For instance, when processing a document, the
map function can create more than one key and value mapping or no
mapping. Map-reduce operations can also use a custom JavaScript
function to make final modifications to the results at the end of the
map and reduce operation, such as perform additional calculations.

``mapReduce`` Command
---------------------

To perform map-reduce operations, MongoDB interfaces provides the
:dbcommand:`mapReduce` command. In the :program:`mongo` shell, MongoDB
provides :method:`db.collection.mapReduce()` wrapper method.

For examples of map-reduce, see :doc:`/tutorial/map-reduce-examples`.

Map-Reduce Behavior
-------------------

In MongoDB, the map-reduce operation can store the results to a table
or return the results inline. With stored results, later map-reduce
operations on the same input collection can replace, merge, or reduce
the stored results with the new results. See :dbcommand:`mapReduce` and
:doc:`/tutorial/perform-incremental-map-reduce` for details and
examples.

For inline result, the BSON document size limit applies. For additional
information on limits and restrictions on map-reduce operations, see
the :dbcommand:`mapReduce` reference page.

MongoDB supports map-reduce operations on :doc:`sharded collections
</core/sharding-introduction>`. Map-reduce operations can also output
the results to a sharded collection. See
:doc:`/core/map-reduce-sharded-collections`.
