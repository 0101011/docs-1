====================
``2dsphere`` Indexes
====================

.. default-domain:: mongodb

.. versionadded:: 2.4

A ``2dsphere`` index supports queries that calculate geometries on an
earth-like sphere. The index supports data stored as both
:term:`GeoJSON` objects and as legacy coordinate pairs. The index
supports legacy coordinate pairs by converting the data to the GeoJSON
``Point`` type.

The ``2dsphere`` index supports all MongoDB geospatial queries: queries
for inclusion, intersection and proximity.

A :ref:`compound <index-type-compound>` ``2dsphere`` index can reference
multiple location and non-location fields within a collectionâ€™s
documents. You can arrange the fields in any order.

The default datum for an earth-like sphere in MongoDB 2.4 is :term:`WGS84`.
Coordinate-axis order is **longitude, latitude**.

See the :doc:`/reference/operator/query-geospatial` for the query
operators that support geospatial queries.

Considerations
--------------

.. |first-geo-index| replace:: ``2dsphere``
.. |second-geo-index| replace:: :doc:`2d </core/2d>`
.. include:: /includes/fact-limitation-one-geo-index-per-collection.rst

You cannot use a ``2dsphere`` index as a shard key when sharding a
collection. However, you can create and maintain a geospatial index on
a sharded collection by using a different field as the shard key.

.. _geospatial-indexes-store-geojson:

GeoJSON Objects
---------------

.. versionadded:: 2.4

MongoDB supports the following GeoJSON objects:

- :term:`Point`

- :term:`LineString`

- :term:`Polygon`

In order to index GeoJSON data, you must store the data in a location
field that you name. The location field contains a subdocument with a
``type`` field specifying the GeoJSON object type and a ``coordinates``
field specifying the object's coordinates. Always store coordinates
``longitude, latitude`` order.

Use the following syntax:

.. code-block:: javascript

   { <location field> : { type : "<GeoJSON type>" ,
                          coordinates : <coordinates>
   } }

The following example stores a GeoJSON ``Point``:

.. code-block:: javascript

   { loc : { type : "Point" ,
             coordinates : [ 40, 5 ]
   } }

The following example stores a GeoJSON ``LineString``:

.. code-block:: javascript

   { loc : { type : "LineString" ,
             coordinates : [ [ 40 , 5 ] , [ 41 , 6 ] ]
   } }

:term:`Polygons <Polygon>` consist of an array of GeoJSON
``LinearRing`` coordinate arrays. These ``LinearRings`` are closed
``LineStrings``. Closed ``LineStrings`` have at least four coordinate
pairs and specify the same position as the first and last coordinates.

The following example stores a GeoJSON ``Polygon`` with an exterior
ring and no interior rings (or holes). Note the first and last
coordinate pair with the ``[ 0 , 0 ]`` coordinate:

.. code-block:: javascript

   { loc :
      { type : "Polygon" ,
        coordinates : [ [ [ 0 , 0 ] , [ 3 , 6 ] , [ 6 , 1 ] , [ 0 , 0 ] ] ]
   } }

For Polygons with multiple rings:

- The first described ring must be the exterior ring.

- The exterior ring cannot self-intersect.

- Any interior ring must be entirely contained by the outer ring.

- Interior rings cannot intersect or overlap each other. Interior
  rings can share an edge.

The following document represents a polygon with an interior ring as
GeoJSON:

.. code-block:: javascript

   { loc :
      { type : "Polygon" ,
        coordinates : [ [ [ 0 , 0 ] , [ 3 , 6 ] , [ 6 , 1 ] , [ 0 , 0 ] ],
                        [ [ 2 , 2 ] , [ 3 , 3 ] , [ 4 , 2 ] , [ 2 , 2 ] ] ]
   } }

.. include:: /images/index-2dsphere-polygon-with-ring.rst
