.. _mongoimport:

===============
``mongoimport``
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol
.. |tool-binary| replace:: mongoimport

Synopsis
--------

The :binary:`~bin.mongoimport` tool imports content from an
:doc:`Extended JSON </reference/mongodb-extended-json>`, CSV, or TSV export
created by :binary:`~bin.mongoexport`, or potentially, another third-party export
tool. See the :doc:`/core/import-export` document for a more in depth
usage overview, and the :doc:`mongoexport` document for more
information regarding :binary:`~bin.mongoexport`, which
provides the inverse "exporting" capability.

Considerations
--------------

Do not use :binary:`~bin.mongoimport` and :binary:`~bin.mongoexport` for
full instance, production backups because they will not reliably capture data type
information. Use :binary:`~bin.mongodump` and :binary:`~bin.mongorestore` as
described in :doc:`/core/backups` for this kind of
functionality.

:binary:`~bin.mongoimport` is single-threaded and inserts one document at
a time into MongoDB. Custom import tools for data ingestion may have
better performance for specific workloads.

Options
-------

.. binary:: mongoimport

.. program:: mongoimport

.. include:: /includes/option/option-mongoimport-help.rst

.. include:: /includes/option/option-mongoimport-verbose.rst

.. include:: /includes/option/option-mongoimport-quiet.rst

.. include:: /includes/option/option-mongoimport-version.rst

.. include:: /includes/option/option-mongoimport-host.rst

.. include:: /includes/option/option-mongoimport-port.rst

.. include:: /includes/option/option-mongoimport-ipv6.rst

.. include:: /includes/option/option-mongoimport-ssl.rst

.. include:: /includes/option/option-mongoimport-sslCAFile.rst

.. include:: /includes/option/option-mongoimport-sslPEMKeyFile.rst

.. include:: /includes/option/option-mongoimport-sslPEMKeyPassword.rst

.. include:: /includes/option/option-mongoimport-sslCRLFile.rst

.. include:: /includes/option/option-mongoimport-sslAllowInvalidCertificates.rst

.. include:: /includes/option/option-mongoimport-sslFIPSMode.rst

.. include:: /includes/option/option-mongoimport-username.rst

.. include:: /includes/option/option-mongoimport-password.rst

.. include:: /includes/option/option-mongoimport-authenticationDatabase.rst

.. include:: /includes/option/option-mongoimport-authenticationMechanism.rst

.. include:: /includes/option/option-mongoimport-gssapiServiceName.rst

.. include:: /includes/option/option-mongoimport-gssapiHostName.rst

.. include:: /includes/option/option-mongoimport-dbpath.rst

.. include:: /includes/option/option-mongoimport-directoryperdb.rst

.. include:: /includes/option/option-mongoimport-journal.rst

.. include:: /includes/option/option-mongoimport-db.rst

.. include:: /includes/option/option-mongoimport-collection.rst

.. include:: /includes/option/option-mongoimport-fields.rst

.. include:: /includes/option/option-mongoimport-fieldFile.rst

.. include:: /includes/option/option-mongoimport-ignoreBlanks.rst

.. include:: /includes/option/option-mongoimport-type.rst

.. include:: /includes/option/option-mongoimport-file.rst

.. include:: /includes/option/option-mongoimport-drop.rst

.. include:: /includes/option/option-mongoimport-headerline.rst

.. include:: /includes/option/option-mongoimport-upsert.rst

.. include:: /includes/option/option-mongoimport-upsertFields.rst

.. include:: /includes/option/option-mongoimport-stopOnError.rst

.. include:: /includes/option/option-mongoimport-jsonArray.rst

Use
---

In this example, :binary:`~bin.mongoimport` imports the :term:`csv`
formatted data in the ``/opt/backups/contacts.csv`` into the
collection ``contacts`` in the ``users`` database on the MongoDB
instance running on the localhost port numbered
``27017``. :binary:`~bin.mongoimport` determines the name of files using
the first line in the CSV file, because of the :option:`--headerline
<mongoimport --headerline>`:

.. code-block:: sh

   mongoimport --db users --collection contacts --type csv --headerline --file /opt/backups/contacts.csv

Since :binary:`~bin.mongoimport` uses the input file name, without the
extension, as the collection name if ``-c`` or ``--collection`` is
unspecified. The following example is equivalent:

.. code-block:: none

   mongoimport --db users --type csv --headerline --file /opt/backups/contacts.csv

In the following example, :binary:`~bin.mongoimport` imports the data in
the :term:`JSON` formatted file ``contacts.json`` into the collection
``contacts`` on the MongoDB instance running on the localhost port
number 27017.

.. code-block:: sh

   mongoimport --db users --collection contacts --file contacts.json

In the next example, :binary:`~bin.mongoimport` takes data passed to it on
standard input (i.e. with a ``|`` pipe.)  and imports it into the
MongoDB datafiles located at ``/srv/mongodb/``. if the import process
encounters an error, the :binary:`~bin.mongoimport` will halt because of
the :option:`--stopOnError <mongoimport --stopOnError>` option.

.. code-block:: sh

   mongoimport --db sales --collection contacts --stopOnError --dbpath /srv/mongodb/

In the final example, :binary:`~bin.mongoimport` imports data from the
file ``/opt/backups/mdb1-examplenet.json`` into the collection
``contacts`` within the database ``marketing`` on a remote MongoDB
database. This :binary:`~bin.mongoimport` accesses the :binary:`~bin.mongod`
instance running on the host ``mongodb1.example.net`` over port
``37017``, which requires the username ``user`` and the password
``pass``.

.. code-block:: sh

   mongoimport --host mongodb1.example.net --port 37017 --username user --password pass --collection contacts --db marketing --file /opt/backups/mdb1-examplenet.json

.. _mongoimport-type-fidelity:

Type Fidelity
-------------

.. include:: /includes/warning-type-fidelity-loss.rst

JSON can only represent a subset of the types supported by BSON. To
preserve type information, :binary:`~bin.mongoimport` accepts :doc:`strict
mode representation </reference/mongodb-extended-json>` for certain
types.

For example, to preserve type information for BSON types
:bsontype:`data_date` and :bsontype:`data_numberlong` during
:binary:`~bin.mongoimport`, the data should be in strict mode
representation, as in the following:

.. code-block:: javascript

   { "_id" : 1, "volume" : { "$numberLong" : "2980000" }, "date" : { "$date" : "2014-03-13T13:47:42.483-0400" } }

For the :bsontype:`data_numberlong` type, :binary:`~bin.mongoimport`
converts into a float during the import.

See :doc:`/reference/mongodb-extended-json` for a complete list of
these types and the representations used.
