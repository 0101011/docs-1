======================
db.collection.update()
======================

.. default-domain:: mongodb

Definition
----------

.. method:: db.collection.update(query, update, options)

   Modifies an existing document or documents in a collection. By
   default, the :method:`~db.collection.update()` method updates a
   **single** document. If the ``multi`` option is set to ``true``, the
   method updates all documents that match the query criteria.

   .. versionchanged:: 2.2
      The :method:`~db.collection.update()` method has the following form:

   .. code-block:: javascript

      db.collection.update( {<query>}, {<update>}, { upsert: <boolean>, multi: <boolean>})

   Prior to version 2.2, the :method:`~db.collection.update()` method
   has the following form:

   .. code-block:: javascript

      db.collection.update( <query>, <update>, <bool>, <bool> )

   The :method:`~db.collection.update()` method takes the following
   parameters:

   .. include:: /reference/method/db.collection.update-param.rst

   The :method:`~db.collection.update()` method either updates specific
   fields in the existing document or replaces the document. The method
   updates specific fields if the ``<update>`` argument contains only
   :ref:`update operator <update-operators>` expressions, such as a
   :operator:`$set` operator expression. Otherwise the method replaces
   the existing document.

   To update fields in subdocuments, use :term:`dot notation`.

   The :method:`~db.collection.update()` method can modify the
   name of a ``field`` using the :operator:`$rename` operator.

.. _update-parameter:

Update Parameter
~~~~~~~~~~~~~~~~

If the ``<update>`` parameter contains :ref:`update operator
<update-operators>` expressions, such those using the
:operator:`$set` operator, then:

- the ``<update>`` parameter must contain *only* update operator
  expressions.

.. versionadded:: 2.2

- :method:`~db.collection.update()` updates only the corresponding
  fields in the document.

If the ``<update>`` parameter consists *only* of ``field: value``
expressions, then:

- the :method:`~db.collection.update()` operation *replaces* the
  document with the ``update`` document. If the ``update`` document is
  missing the :term:`_id` field, MongoDB will add the ``_id`` field and
  assign to it a unique :term:`objectid`. For examples, see
  :ref:`example-update-replace-fields`.

- the :method:`~db.collection.update()` operation *cannot* use ``multi``
  to update multiple documents.

.. _upsert-parameter:

Upsert Parameter
~~~~~~~~~~~~~~~~

In MongoDB versions 2.2 and later, the ``upsert`` parameter has the
following form:

  .. code-block:: javascript

     { upsert : true|false }

In MongoDB versions prior to 2.2 the ``upsert`` parameter is a
positional boolean. Specify ``true`` as the third parameter to
:method:`~db.collection.update()`.

If ``upsert`` is set to ``true`` and no document matches the criteria,
:method:`~db.collection.update()` inserts a *single* document. The
``upsert`` creates the new document with either:

- The fields and values of the ``<update>`` parameter, or

- the fields and values of the both the ``<query>`` and ``<update>``
  parameters.

The ``upsert`` creates a document with data from both ``<query>`` and
``<update>`` if the ``<update>`` parameter *only uses update operators*.
See :ref:`update-operators`.

.. _multi-parameter:

Multi Parameter
~~~~~~~~~~~~~~~

If ``multi`` is set to ``true``, the :method:`~db.collection.update()`
method updates all documents that meet the ``<query>`` criteria. The
``multi`` update operation may interleave with other write operations.
For unsharded collections, you can override this behavior with the
:operator:`$isolated` isolation operator, which isolates the update
operation and blocks other write operations during the update. For an
example, see :ref:`example-update-multi`.

Examples
--------

The following examples use the **MongoDB version 2.2 interface** to
specify options in the document form.

.. contents::
   :backlinks: none
   :local:

Update Specific Fields
~~~~~~~~~~~~~~~~~~~~~~

To update specific fields in a document, call
:method:`~db.collection.update()` with an ``<update>`` parameter that
uses ``field: value`` pairs in combination with :ref:`update operators
<update-operators>`. For example, given a ``books`` collection with the
following document:

.. code-block:: javascript

   { "_id" : 11, "item" : "Divine Comedy", "stock" : 2 }

The following operation updates the document by adding a ``price`` and
incrementing ``stock`` by ``5``.

.. code-block:: javascript

   db.books.update( { item: "Divine Comedy" }, { $set: { price: 18 } , $inc: { stock: 5 } } )

The updated document is now the following:

.. code-block:: javascript

   { "_id" : 11, "item" : "Divine Comedy", "price" : 18, "stock" : 7 }

Update Fields in Subdocuments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use :term:`dot notation` to update values in subdocuments. The following
example, which uses the :doc:`bios collection
</reference/bios-example-collection>`, queries for the document with
``_id`` equal to ``1`` and updates the value of the field ``middle`` in
the subdocument ``name``:

.. code-block:: javascript

   db.bios.update( { _id: 1 }, { $set: { "name.middle": "Warner" } } )

Add New Fields
~~~~~~~~~~~~~~

If the ``<update>`` argument contains fields not currently in the
document, the :method:`~db.collection.update()` method adds the new
fields to the document. The following operation adds a new ``mbranch``
field and a new ``aka`` field. The operation adds ``aka`` in the
subdocument ``name``. The operation uses the
:doc:`/reference/bios-example-collection`:

.. code-block:: javascript

   db.bios.update(
      { _id: 3 },
      { $set: {
                mbranch: 'Navy',
                'name.aka': 'Amazing Grace'
              }
      }
   )

Remove Fields
~~~~~~~~~~~~~

The :operator:`$unset` operator removes a field from a document. The
following operation removes the ``birth`` field from the document:

.. code-block:: javascript

   db.bios.update( { _id: 3 }, { $unset: { birth: 1 } } )

.. _example-update-replace-fields:

Replace All Fields
~~~~~~~~~~~~~~~~~~

These examples replace an existing document with a new document. If the
``<update>`` argument contains only field and value pairs, the
:method:`~db.collection.update()` method *replaces* the existing
document with the document in the ``<update>`` argument, except for the
``_id`` field.

Given the following document in the ``books`` collection:

.. code-block:: javascript

   {
       "_id" : 22,
       "item" : "The Banquet",
       "author" : "Dante",
       "price" : 20,
       "stock" : 4
   }

The following operation passes an ``<update>`` parameter that replaces
all the fields in the original document, except for the ``_id`` field.
Notice that both the ``<query>`` document and the ``<update>`` document both
contain the ``item`` field:

.. code-block:: javascript

   db.books.update( { item: "The Banquet" },
                    { item: "The Banquet", price: 19 , stock: 3 }
                  )

The operation updates the ``price`` and ``stock`` values and *removes*
the ``auth`` field

.. code-block:: javascript

   {
       "_id" : 22,
       "item" : "The Banquet",
       "price" : 19,
       "stock" : 3
   }

The next example includes the ``upsert`` option, which creates a new
document if none matches the query. If a document with ``name`` set to
``{ first: 'Dennis', last: 'Ritchie'}`` exists, MongoDB replaces its
fields and values with those in the ``<update>`` parameter.

If the document *does not* exist, MongoDB creates a new document and
generates a unique ``ObjectId`` for the ``_id`` field. This example uses
the :doc:`/reference/bios-example-collection`.


.. code-block:: javascript

   db.bios.update(
      { name: { first: 'Dennis', last: 'Ritchie'} },
      {
        name: { first: 'Dennis', last: 'Ritchie'},
        birth: new Date('Sep 09, 1941'),
        death: new Date('Oct 12, 2011'),
        contribs: [ 'UNIX', 'C' ],
        awards: [
                  {
                    award: 'Turing Award',
                    year: 1983,
                    by: 'ACM'
                  },
                  {
                    award: 'National Medal of Technology',
                    year: 1998,
                    by: 'United States'
                  },
                  {
                    award: 'Japan Prize',
                    year: 2011,
                    by: 'The Japan Prize Foundation'
                  }
                ]
      },
      { upsert: true }
   )

The next example specifies different values from the original for the
``name`` subdocument:

.. code-block:: javascript

   db.bios.update(
      { name: { first: 'John', last: 'McCarthy' } },
      {
        name: { first: 'Ken', last: 'Iverson' },
        birth: new Date('Dec 17, 1941'),
        died: new Date('Oct 19, 2004'),
        contribs: [ 'APL', 'J' ],
        awards: [
                  { award: 'Turing Award',
                    year: 1979,
                    by: 'ACM' },
                  { award: 'Harry H. Goode Memorial Award',
                    year: 1975,
                    by: 'IEEE Computer Society' },
                  { award: 'IBM Fellow',
                    year: 1970,
                    by: 'IBM' }
                ]
      }
   )

.. _example-update-multi:

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

To update multiple documents, set the ``multi`` option to ``true``. The
following example queries the :doc:`bios collection
</reference/bios-example-collection>` for all documents where
``awards.award`` is set to ``Turing``. The update sets the ``turing``
field to ``true`` [#previous-versions-multi]_:

.. code-block:: javascript

   db.bios.update(
      { 'awards.award': 'Turing' },
      { $set: { turing: true } },
      { multi: true }
   )

.. [#previous-versions-multi]
   .. include:: /includes/fact-upsert-multi-options.rst

The next example assumes a ``books`` collection that includes the
following documents:

.. code-block:: javascript

   {
       "_id" : 11,
       "author" : "Dante",
       "item" : "Divine Comedy",
       "price" : 18 }
   {
       "_id" : 22,
       "author" : "Dante",
       "item" : "The Banquet",
       "price" : 19 }
   {
       "_id" : 33,
       "author" : "Dante",
       "item" : "Monarchia",
       "price" : 14
   }

The example uses the ``multi`` option and a ``query`` for ``author:
"Dante"`` to update all matching documents:

.. code-block:: javascript

   db.books.update( { author: "Dante" },
                    { $set: { born: "Florence", died: "Ravenna" } },
                    { multi: true }
                  )

The operation results in the following:

.. code-block:: javascript

   {
       "_id" : 11,
       "author" : "Dante",
       "born" : "Florence",
       "died" : "Ravenna",
       "item" : "Divine Comedy",
       "price" : 18
   }
   {
       "_id" : 22,
       "author" : "Dante",
       "born" : "Florence",
       "died" : "Ravenna",
       "item" : "The Banquet",
       "price" : 19
   }
   {
       "_id" : 33,
       "author" : "Dante",
       "born" : "Florence",
       "died" : "Ravenna",
       "item" : "Monarchia",
       "price" : 14
   }

Insert a New Document if No Match Exists (Upsert)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To instruct MongoDB to insert a new document if no document matches the
query, call the :method:`~db.collection.update()` and specify the
``upsert`` option.

Given the following document:

.. code-block:: javascript

   db.books.update( { "item": "The New Life" },
                    { $set: { author: "Dante", "price": 15 } },
                    { upsert: true }
                  )

If one or more documents with ``item: "The New Life"`` exists, the
following operation updates *one* of those documents with the values in
the ``author`` and ``price`` fields. But if no document exists with
``item: "The New Life"``, the operation creates a new document. MongoDB
generates a unique ``ObjectId`` for the document's ``_id`` field:

.. code-block:: javascript

   {
       "_id" : ObjectId("51e0570a9c6ae665454e301c"),
       "author" : "Dante",
       "item" : "New Life",
       "price" : 15
   }

The next example inserts a new document into the :doc:`bios collection
</reference/bios-example-collection>`. The ``<update>`` argument
includes only :ref:`update operators <update-operators>`, so the new
document contains the fields and values from ``<query>`` argument with
the operations from the ``<update>`` argument applied.

.. code-block:: javascript

   db.bios.update(
      {
        _id: 7,
        name: { first: 'Ken', last: 'Thompson' }
      },
      {
        $set: {
                birth: new Date('Feb 04, 1943'),
                contribs: [ 'UNIX', 'C', 'B', 'UTF-8' ],
                awards: [
                          {
                            award: 'Turing Award',
                            year: 1983,
                            by: 'ACM'
                          },
                          {
                            award: 'IEEE Richard W. Hamming Medal',
                            year: 1990,
                            by: 'IEEE'
                          },
                          {
                            award: 'National Medal of Technology',
                            year: 1998,
                            by: 'United States'
                          },
                          {
                            award: 'Tsutomu Kanai Award',
                            year: 1999,
                            by: 'IEEE'
                          },
                          {
                            award: 'Japan Prize',
                            year: 2011,
                            by: 'The Japan Prize Foundation'
                          }
                        ]
              }
      },
      { upsert: true }
   )

In the next example, the operation queries for a document with the
``_id`` field equal to ``11`` and the ``name`` field equal to ``{ first:
'James', last: 'Gosling'}``. If the query finds a matching document, the
operation performs an update operation. Otherwise, the operation inserts
a new document containing the fields and values from ``<query>``
argument with the operations from the ``<update>`` argument
applied.[#previous-versions-upsert]_ [#upsert-update-operators]_

.. code-block:: javascript

   db.bios.update(
      { _id:11, name: { first: 'James', last: 'Gosling' } },
      {
        $set: {
                birth: new Date('May 19, 1955'),
                contribs: [ 'Java' ],
                awards: [
                          {
                            award: 'The Economist Innovation Award',
                            year: 2002,
                            by: 'The Economist'
                          },
                          {
                            award: 'Officer of the Order of Canada',
                            year: 2007,
                            by: 'Canada'
                          }
                        ]
              }
      },
      { upsert: true }
   )

.. [#previous-versions-upsert]
   .. include:: /includes/fact-upsert-multi-options.rst

.. [#upsert-update-operators] If the ``<update>`` argument includes
  only field and value pairs, the new document contains the fields and
  values specified in the ``<update>`` argument. If the ``<update>``
  argument includes only :ref:`update operators
  <update-operators>`, the new document contains the fields and
  values from ``<query>`` argument with the operations from the
  ``<update>`` argument applied.

Update Arrays
~~~~~~~~~~~~~

Update an Element by Specifying Its Position
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If the update operation requires an update of an element in an array
field, the :method:`~db.collection.update()` method can
perform the update using the position of the element and :term:`dot
notation`. Arrays in MongoDB are zero-based.

The following operation queries the :doc:`bios collection
</reference/bios-example-collection>` for the first document with
``_id`` field equal to ``1`` and updates the second element in the
``contribs`` array:

.. code-block:: javascript

   db.bios.update(
      { _id: 1 },
      { $set: { 'contribs.1': 'ALGOL 58' } }
   )

Update an Element without Specifying Its Position
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If the position in the array is not known, the
:method:`~db.collection.update()` method can perform the update using
the :operator:`$` positional operator. The array field must appear in
the ``query`` argument in order to determine which array element to
update.

The following operation queries the :doc:`bios collection
</reference/bios-example-collection>` for the first document where the
``_id`` field equals ``3`` and the ``contribs`` array contains an
element equal to ``compiler``. If found, the
:method:`~db.collection.update()` method updates the first matching
element in the array to ``A compiler`` in the document:

.. code-block:: javascript

   db.bios.update(
          { _id: 3, 'contribs': 'compiler' },
          { $set: { 'contribs.$': 'A compiler' } }
       )

Update a Document Element without Specifying Its Position
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The :method:`~db.collection.update()` method can perform the
update of an array that contains subdocuments by using the positional
operator (i.e. :operator:`$`) and the :term:`dot notation`.

The following operation queries the :doc:`bios collection
</reference/bios-example-collection>` for the first document where the
``_id`` field equals ``6`` and the ``awards`` array contains a
subdocument element with the ``by`` field equal to ``ACM``. If found,
the :method:`~db.collection.update()` method updates the ``by`` field in
the first matching subdocument:

.. code-block:: javascript

   db.bios.update(
      { _id: 6, 'awards.by': 'ACM'  } ,
      { $set: { 'awards.$.by': 'Association for Computing Machinery' } }
   )

Add an Element to an Array
^^^^^^^^^^^^^^^^^^^^^^^^^^

The following operation queries the :doc:`bios collection
</reference/bios-example-collection>` for the first document that has an
``_id`` field equal to ``1`` and adds a new element to the ``awards``
field:

.. code-block:: javascript

   db.bios.update(
      { _id: 1 },
      {
        $push: { awards: { award: 'IBM Fellow', year: 1963, by: 'IBM' } }
      }
   )

In the next example, the :operator:`$set` operator uses :ref:`dot
notation <document-dot-notation>` to access the ``middle`` field in the
``name`` subdocument. The :operator:`$push`
operator adds another document as element to the field ``awards``.

Consider the following operation:

.. code-block:: javascript

   db.bios.update(
      { _id: 1 },
      {
        $set: { 'name.middle': 'Warner' },
        $push: { awards: {
                           award: 'IBM Fellow',
                           year: '1963',
                           by: 'IBM'
                         }
               }
      }
   )

This :method:`~db.collection.update()` operation:

- Modifies the field ``name`` whose value is another document.
  Specifically, the :operator:`$set` operator updates the ``middle``
  field in the ``name`` subdocument. The document uses :ref:`dot
  notation <document-dot-notation>` to access a field in a subdocument.

- Adds an element to the field ``awards``, whose value is an array.
  Specifically, the :operator:`$push` operator adds another document as
  element to the field ``awards``.
