======================
db.collection.remove()
======================

.. default-domain:: mongodb

Definition
----------

.. method:: db.collection.remove(query, justOne)

   Removes documents from a collection.

   The :method:`~db.collection.remove()` method has the following
   parameters:

   .. include:: /reference/method/db.collection.remove-param.rst

Behavior
--------

Query Considerations
~~~~~~~~~~~~~~~~~~~~

By default, :method:`~db.collection.remove()` removes all documents
that match the ``query`` expression. Specify the ``justOne`` option to
limit the operation to removing a single document. To delete a single
document sorted by a specified order, use the :ref:`findAndModify()
<findAndModify-wrapper-sorted-remove>` method.

When removing multiple documents, the remove operation may interleave
with other read and/or write operations to the collection. For
*unsharded* collections, you can override this behavior with the
:update:`$isolated` operator, which "isolates" the remove operation and
disallows yielding during the operation. This ensures that no client
can see the affected documents until they are all processed or an error
stops the remove operation.

See :ref:`isolate-remove-operations` for an example.

Capped Collections
~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-remove-capped-collection-restriction.rst

Examples
--------

The following are examples of the :method:`~db.collection.remove()` method.

Remove All Documents from a Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To remove all documents in a collection, call the :method:`remove
<db.collection.remove()>` method with no parameters: The following
operation deletes all documents from the :doc:`bios collection
</reference/bios-example-collection>`:

.. code-block:: javascript

   db.bios.remove()

This operation is not equivalent to the
:method:`~db.collection.drop()` method.

To remove all documents from a collection, it may be more efficient
to use the :method:`~db.collection.drop()` method to drop the entire
collection, including the indexes, and then recreate the collection
and rebuild the indexes.

Remove All Documents that Match a Condition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To remove the documents that match a deletion criteria, call the
:method:`~db.collection.remove()` method with the ``<query>``
parameter:

The following operation deletes all documents from the :doc:`bios
collection </reference/bios-example-collection>` where the
subdocument ``name`` contains a field ``first`` whose value starts with
``G``:

.. code-block:: javascript

   db.bios.remove( { 'name.first' : /^G/ } )

The following operation removes all the documents from the collection
``products`` where ``qty`` is greater than ``20``:

.. code-block:: javascript

   db.products.remove( { qty: { $gt: 20 } } )

Remove a Single Document that Matches a Condition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To remove the first document that match a deletion criteria, call the
:method:`remove <db.collection.remove()>` method with the ``query``
criteria and the ``justOne`` parameter set to ``true`` or ``1``.

The following operation deletes a single document from the :doc:`bios
collection </reference/bios-example-collection>` where the ``turing``
field equals ``true``:

.. code-block:: javascript

   db.bios.remove( { turing: true }, 1 )

The following operation removes the first document from the collection
``products`` where ``qty`` is greater than ``20``:

.. code-block:: javascript

   db.products.remove( { qty: { $gt: 20 } }, true )

.. _isolate-remove-operations:

Isolate Remove Operation
~~~~~~~~~~~~~~~~~~~~~~~~

To isolate the query, include ``$isolated: 1`` in the
``<query>`` parameter as in the following examples:

.. code-block:: javascript

   db.products.remove( { qty: { $gt: 20 }, $isolated: 1 } )
