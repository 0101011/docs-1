=========================
db.collection.aggregate()
=========================

.. default-domain:: mongodb

.. versionadded:: 2.2

Definition
----------

.. method:: db.collection.aggregate(pipeline, options)

   Calculates aggregate values for the data in a collection. Always
   call the :method:`~db.collection.aggregate()` method on a collection
   object.

   .. include:: /reference/method/db.collection.aggregate-param.rst

   :returns:
      A :term:`cursor` to the documents produced by the final
      stage of the aggregation pipeline operation.

      .. versionchanged:: 2.5.3
         :method:`~db.collection.aggregate()` now returns a cursor,
         previous versions returned all results in a single document.

      If you use :pipeline:`$out`,
      :method:`~db.collection.aggregate()` returns an empty
      cursor. See :doc:`/reference/operator/aggregation/out`
      for more information.

.. important:: You cannot use the :method:`~db.collection.aggregate()`
   on a 2.5.3 (or later) version of the :program:`mongo` shell to
   perform aggregation pipeline operations on earlier MongoDB
   deployments.

.. seealso:: For more information, see :doc:`/core/aggregation`,
   :doc:`/reference/aggregation`, and :dbcommand:`aggregate`.

Example
-------

Consider a collection named ``articles`` that contains documents of the
following format:

.. code-block:: javascript

   {
     title : "this is my title" ,
     author : "bob" ,
     posted : new Date () ,
     pageViews : 5 ,
     tags : [ "fun" , "good" , "sport" ] ,
     comments : [
                  { author :"joe" , text : "this is cool" } ,
                  { author :"sam" , text : "this is bad" }
     ],
     other : { foo : 5 }
   }

The following aggregation pivots the data to group authors by
individual tags:

.. code-block:: javascript

   db.articles.aggregate(
     { $project : {
                    author : 1,
                    tags : 1,
                  }
     },
     { $unwind : "$tags" },
     { $group : {
                  _id : { tags : "$tags" },
                  authors : { $addToSet : "$author" }
                }
     }
   )

The aggregation pipeline begins with the collection ``articles`` and
selects the ``author`` and ``tags`` fields using the
:pipeline:`$project` pipeline operator. The :pipeline:`$unwind`
operator produces one output document per tag. Finally, the
:pipeline:`$group` pipeline operator groups authors by tags.

The operation returns a cursor with documents that resemble the
following:

.. code-block:: javascript

   { "_id" : { "tags" : "good" }, "authors" : [ "bob", "mike", ... ] }
   { "_id" : { "tags" : "fun" }, "authors" : [ "bob", "al" ] }
