==============
Explain Output
==============

.. default-domain:: mongodb

This document explains the output of the :operator:`$explain` operator
and the :program:`mongo` shell wrapper :method:`explain()
<cursor.explain()>`.

Core Explain Output
-------------------

The :ref:`explain-output-fields-core` fields display information for
queries on non-sharded collections. For queries on sharded collections,
this information is displayed for each accessed shard.

.. code-block:: javascript

   {
     "cursor" : "<Cursor Type and Index>",
     "isMultiKey" : <boolean>,  
     "n" : <num>,
     "nscannedObjects" : <num>,
     "nscanned" : <num>,
     "nscannedObjectsAllPlans" : <num>,
     "nscannedAllPlans" : <num>,
     "scanAndOrder" : <boolean>,
     "indexOnly" : <boolean>,
     "nYields" : <num>,
     "nChunkSkips" : <num>,
     "millis" : <num>,
     "indexBounds" : { <index bounds> },
     "allPlans" : [
                    { "cursor" : "<Cursor Type and Index>",
                      "n" : <num>,
                      "nscannedObjects" : <num>,
                      "nscanned" : <num>,
                      "indexBounds" : { <index bounds> }
                    },
                     ...
                  ],
     "oldPlan" : {
                   "cursor" : "<Cursor Type and Index>",
                   "indexBounds" : { <index bounds> }
                 }
     "server" : "<host:port>",
   }

Sharded Collections
-------------------

For queries on a sharded collection, the output contains the
:ref:`explain-output-fields-core` for each accessed shard and
:ref:`cumulative shard
information <explain-output-fields-sharded-collection>`:

.. code-block:: javascript

   {
      "clusteredType" : "<Shard Access Type>",
      "shards" : {

                   "<shard1>" : [
                                  {
                                    <core explain output>
                                  }
                                ],
                   "<shard2>" : [
                                  {
                                   <core explain output>
                                  }
                                ],
                   ...
                 },
      "millisShardTotal" : <num>,
      "millisShardAvg" : <num>,
      "numQueries" : <num>,
      "numShards" : <num>,
      "cursor" : "<Cursor Type and Index>",
      "n" : <num>,
      "nChunkSkips" : <num>,
      "nYields" : <num>,
      "nscanned" : <num>,
      "nscannedAllPlans" : <num>,
      "nscannedObjects" : <num>,
      "nscannedObjectsAllPlans" : <num>,
      "millis" : <num>
   }

Fields
------

.. _explain-output-fields-core:

Core Explain Output
~~~~~~~~~~~~~~~~~~~

.. data:: cursor

   Specifies the type of cursor used in the query operation:

   - ``BasicCursor`` indicates use of full table scan.

   - ``BtreeCursor`` indicates use of an index. The cursor information
     includes the index name. With the use of an index, the
     :method:`explain() <cursor.explain()>` output will include the
     :data:`indexBounds` details.

.. data:: isMultiKey

   Specifies whether a :ref:`multikey index on an array field
   <index-type-multikey>` was used.

.. data:: n

   Specifies the number of documents that match the query selection
   criteria.

.. data:: nscannedObjects

   Specifies the total number of documents scanned during the query. If
   the index is a covered index, the :data:`nscannedObjects` may be
   lower than :data:`nscanned`.

.. data:: nscanned

   Specifies the total number of documents or index entries scanned
   during the database operation. You want :data:`n` and
   :data:`nscanned` to be close in value as possible. If the index is a
   covered index, :data:`nscanned` may be higher than
   :data:`nscannedObjects`.

.. data:: nscannedObjectsAllPlans

   .. versionadded:: 2.2

   Specifies the total number of documents scanned for all query plans
   during the database operation.

.. data:: nscannedAllPlans

   .. versionadded:: 2.2

   Specifies the total number of documents or index entries scanned for
   all query plans during the database operation.

.. data:: scanAndOrder

   .. versionadded:: 2.2

   Specifies whether the index could not be used for sorting. If
   ``true``, the index could *not* be used for sorting.

.. data:: indexOnly

   Specifies whether the query is a :ref:`covered query
   <indexes-covered-queries>` that can be fulfilled by using just the
   index.

.. data:: nYields

   Specifies the number of times this query yielded the read lock to
   allow waiting writes execute.

.. data:: nChunkSkips

   Specifies the number of documents skipped because of active chunk
   migrations in a sharded system. Typically this will be zero. A
   number greater than zero is ok, but indicates a little bit of
   inefficiency.

.. data:: millis

   Specifies the number of milliseconds to complete the query.

.. data:: indexBounds

   Specifies the lower and upper index key bounds. 

   .. code-block:: javascript

      "indexBounds" : {
                          "start" : { <index key1> : <value>, ...  },
                          "end" : { <index key1> : <value>, ... }
                      },
      or

      "indexBounds" : { "<field>" : [ [ <lower bound>, <upper bound> ] ],
                        ...
                      }

.. data:: allPlans

   Specifies the list of plans the query optimizer runs in order to
   select the index for the query. Displays only if the ``<verbose>``
   parameter to the :method:`explain() <cursor.explain()>` is set to
   ``true`` or ``1``.

.. data:: oldPlan

   .. versionadded:: 2.2

   Specifies the previous plan selected by the query optimizer for the
   query. Displays only if the ``<verbose>`` parameter to the
   :method:`explain() <cursor.explain()>` is set to ``true`` or ``1``.

.. data:: server

   .. versionadded:: 2.2

   Specifies the MongoDB server.

.. _explain-output-fields-sharded-collection:

Sharded Collections Output
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. data:: clusteredType

   Specifies how the shards are accessed:

   - ``ParallelSort`` means all shards are queried in parallel
   - ``SerialServer`` means the shards are queried sequentially

.. data:: shards

   Specifies the shards accessed during the query and individual
   :ref:`explain-output-fields-core` for each shard.

.. data:: millisShardTotal

   Specifies the total time in milliseconds for the query to run on the
   shards.

.. data:: millisShardAvg

   Specifies the average time in millisecond for the query to run on
   each shard.

.. data:: numQueries

   Specifies the total number of queries executed.

.. data:: numShards

   Specifies the total number of shards queried.

