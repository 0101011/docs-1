===============================
Aggregation Commands Comparison
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The following table provides a brief overview of the features of the
MongoDB aggregation commands.

.. list-table::
   :header-rows: 1

   * -  

     - :dbcommand:`aggregate`

     - :dbcommand:`mapReduce`

     - :dbcommand:`group`

   * - **Description**

     - .. versionadded:: 2.2
       
       Designed with specific goals of improving performance and
       usability for aggregation tasks.
       
       Uses a "pipeline" approach where objects are transformed as they
       pass through a series of pipeline operators such as
       :pipeline:`$group`,  :pipeline:`$match`, and :pipeline:`$sort`.
       
       See :doc:`/reference/aggregation` for more information on the
       pipeline operators.
       

     - Implements the Map-Reduce aggregation for processing large data sets.
       

     - Provides grouping functionality.
       
       Is slower than the :dbcommand:`aggregate` command and has less
       functionality than the :dbcommand:`mapReduce` command.
       

   * - **Key Features**

     - Pipeline operators can be repeated as needed.
       
       Pipeline operators need not produce one output document for every
       input document.
       
       Can also generate new documents or filter out documents.
       

     - In addition to grouping operations, can perform complex
       aggregation tasks as well as perform incremental aggregation on
       continuously growing datasets.
       
       See :doc:`/tutorial/map-reduce-examples/` and
       :doc:`/tutorial/perform-incremental-map-reduce/`.
       

     - Can either group by existing fields or with a custom ``keyf``
       JavaScript function, can group by calculated fields.
       
       See :dbcommand:`group` for information and example using the
       ``keyf`` function.
       

   * - **Flexibility**

     - Limited to the operators and expressions supported by the
       aggregation pipeline.
       
       However, can add computed fields, create new virtual sub-objects,
       and extract sub-fields into the top-level of results by using the
       :pipeline:`$project` pipeline operator.
       
       See :pipeline:`$project` for more information as well as
       :doc:`/reference/aggregation` for more information on all the
       available pipeline operators.
       

     - Custom ``map``, ``reduce`` and ``finalize`` JavaScript
       functions offer flexibility to aggregation logic.
       
       See :dbcommand:`mapReduce` for details and restrictions
       on the functions.
       

     - Custom ``reduce`` and ``finalize`` JavaScript functions offer
       flexibility to grouping logic.
       
       See :dbcommand:`group` for details and restrictions on these
       functions.
       

   * - **Output Results**

     - Returns results inline.
       
       The result is subject to the :ref:`BSON Document size
       <limit-bson-document-size>` limit.
       

     - Returns results in various options (inline, new collection, merge,
       replace, reduce). See :dbcommand:`mapReduce` for details on the
       output options.
       
       .. versionchanged:: 2.2
          Provides much better support for sharded map-reduce output than
          previous versions.
       

     - Returns results inline as an array of grouped items.
       
       The result set must fit within the :ref:`maximum BSON document
       size limit <limit-bson-document-size>`.
       
       .. versionchanged:: 2.2
          The returned array can contain at most 20,000 elements; i.e.
          at most 20,000 unique groupings. Previous versions had a limit
          of 10,000 elements.
       

   * - **Sharding**

     - Supports non-sharded and sharded input collections.

     - Supports non-sharded and sharded input collections.

     - Does **not** support sharded collection.
       

   * - **Notes**

     -  

     - Prior to 2.4, JavaScript code executed in a single thread.
       

     - Prior to 2.4, JavaScript code executed in a single thread.
       

   * - **More Information**

     - See :doc:`/core/aggregation` and :dbcommand:`aggregate`.
       

     - See :doc:`/core/map-reduce` and :dbcommand:`mapReduce`.
       

     - See :dbcommand:`group`.
       

