==========================
Configuration File Options
==========================

.. default-domain:: mongodb

Synopsis
--------

Administrators and users can control :program:`mongod` or
:program:`mongos` instances at runtime either directly from
:doc:`mongod's command line arguments </reference/mongod>` or using a
configuration file.

While both methods are functionally equivalent and all settings are
similar, The configuration file method is preferable and if you
installed from a package and starting MongoDB using your system's
:term:`control script`, you're already using a configuration file.

To start :program:`mongod` or :program:`mongos` using a config file,
use one of the following forms:

.. code-block:: sh

   mongod --config /etc/mongodb.conf
   mongod -f /etc/mongodb.conf
   mongos --config /srv/mongodb/mongos.conf
   mongos -f /srv/mongodb/mongos.conf

Declare All settings in this file using the following form:

.. code-block:: sh

   <setting> = <value>

.. versionadded:: 2.0
   *Before* version 2.0, boolean (i.e. "``true|false``") or "flag"
   parameters, register as true, if they appear in the configuration
   file, regardless of their value.

Settings
--------

.. program:: conf

.. setting:: verbose

   *Default:* false

   Increases the amount of internal reporting returned on standard
   output or in the log file generated by :setting:`logpath`.

   .. setting:: v

      *Default:* false

      Alternate form of :setting:`verbose`.

   .. setting:: vv

      *Default:* false

      Additional increase in verbosity of output and logging.

   .. setting:: vvv

      *Default:* false

      Additional increase in verbosity of output and logging.

   .. setting:: vvvv

      *Default:* false

      Additional increase in verbosity of output and logging.

   .. setting:: vvvvv

      *Default:* false

      Additional increase in verbosity of output and logging.

.. setting:: quiet

   *Default:* false

   Runs the :program:`mongod` instance in a quiet mode that attempts to limit
   the amount of output.

.. setting:: port

   *Default:* 27017

   Specifies a TCP port for the :program:`mongod` to listen for client
   connections. UNIX-like systems require root access for ports with
   numbers lower than 1000.

.. setting:: bind_ip

   *Default:* 127.0.0.1

   Set this option to configure the :program:`mongod` process to bind
   to and listen for connections from applications on this
   address. You may attach :program:`mongod` to any interface;
   however, if you attach :program:`mongod` to a publicly accessible
   interface, implement proper authentication or firewall restrictions
   to protect the integrity of your database.

   You may set this value multiple times to bind :program:`mongod` to
   multiple IP addresses.

.. setting:: maxConns

   *Default:* depends on system settings.

   Specifies a value to set the maximum number of simultaneous
   connections that :program:`mongod` or :program:`mongos` will
   accept. This setting has no effect if it is higher than your
   operating system's configured maximum connection tracking
   threshold.

   This is particularly useful for :program:`mongos` if you have a
   client that creates a number of collections but allows them to
   timeout rather than close the collections. When you set
   :setting:`maxConns`, ensure the value is slightly higher than the
   size of the connection pool or the total number of connections to
   prevent erroneous connection spikes from propagating to the members
   of a :term:`shard` cluster.

.. setting:: objcheck

   *Default:* false

   Set to ``true`` to force :program:`mongod` to validate all requests
   from clients upon receipt to ensure that invalid objects are never
   inserted into the database.

.. setting:: logpath

   *Default:* None. (i.e. ``/dev/stdout``)

   Specify a path for the log file that will hold all diagnostic
   logging information.

   Unless specified, :program:`mongod` will output all log information
   to the standard output. Unless :setting:`logappend` is ``true``,
   the logfile will be overwritten when the process restarts.

.. setting:: logappend

   *Default:* false

   Set to ``true`` to add new entries to the end of the logfile rather
   than overwriting the content of the log when the process restarts.

.. setting:: pidfilepath

   *Default:* None.

   Specify a file location to hold the ":term:`PID`" or process ID of the
   :program:`mongod` process. Useful for tracking the :program:`mongod` process in
   combination with the :setting:`fork` setting.

   Without this option, :program:`mongod` creates no PID file.

.. setting:: keyFile

   *Default:* None.

   Specify the path to a key file to store authentication
   information. This option is only useful for the connection between
   replica set members.

   .. seealso:: ":ref:`Replica Set Security <replica-set-security>`"
      and ":doc:`/administration/replica-sets`."

.. setting:: nounixsocket

   *Default:* false

   Set to ``true`` to disable listening on the UNIX socket. Unless set
   to false, :program:`mongod` and :program:`mongos` provide a
   UNIX-socket.

.. setting:: unixSocketPrefix

   *Default:* ``/tmp``

   Specifies a path for the UNIX socket. Unless this option has a
   value, :program:`mongod` and :program:`mongos`, create a socket
   with the ``/tmp`` as a prefix.

.. setting:: fork

   *Default:* false

   Set to ``true`` to enable a :term:`daemon` mode for :program:`mongod`
   which forces the process to the background.

.. setting:: auth

   *Default:* false

   Set to ``true`` to enable database authentication for users
   connecting from remote hosts. Configure users via the :doc:`mongo
   shell </reference/mongo>`. If no users exist, the localhost
   interface will continue to have access to the database until the
   you create the first user.

.. setting:: cpu

   *Default:* false

   Set to ``true`` to force :program:`mongod` to report every four
   seconds CPU utilization and the amount of time that the processor
   waits for I/O operations to complete (i.e. I/O wait.) MongoDB writes
   this data to standard output, or the logfile if using the
   :setting:`logpath` option.

.. setting:: dbpath

   *Default:* ``/data/db/``

   Set this value to designate a directory for the :program:`mongod`
   instance to store its data. Typical locations include:
   "``/srv/mognodb``", "``/var/lib/mongodb``" or "``/opt/mongodb``"

   Unless specified, :program:`mongod` creates data files in the
   default ``/data/db`` directory. (Windows systems use the
   ``\data\db`` directory.)

.. setting:: diaglog

   *Default:* 0

   Set this value the diagnostic logging level for the
   :program:`mongod` instance. Possible values, and their impact are
   as follows.

   =========  ===================================
   **Value**  **Setting**
   ---------  -----------------------------------
      0       off. No logging.
      1       Log write operations.
      2       Log read operations.
      3       Log both read and write operations.
      7       Log write and some read operations.
   =========  ===================================

.. setting:: directoryperdb

   *Default:* false

   Set to ``true`` to modify the storage pattern of the data directory
   to store each database's files in a distinct folder. Use this option to
   configure MongoDB to store data on a number of distinct disk
   devices to increase write throughput or disk capacity.

   Unless specified, :program:`mongod` saves all database files in the
   directory specified by :setting:`dbpath`.

.. setting:: journal

   *Default:* (on 64-bit systems) true

   *Default:* (on 32-bit systems) false

   Set to true to enable operation journaling to ensure write
   durability and data consistency.

   Set to false to prevent the overhead of journaling in situations
   where durability is not required.

.. setting:: journalCommitInterval

   *Default:* 100

   Set this value to specify the maximum amount of time for
   :program:`mongod` to allow between journal operations. The default
   value is 100 milliseconds. Lower values increase the durability of
   the journal, at the possible expense of disk performance.

   This option accepts values between 2 and 300 milliseconds.

.. setting:: ipv6

   *Default:* false

   Set to ``true`` to IPv6 support to allow clients to connect to
   :program:`mongod` using IPv6 networks. :program:`mongod` disables
   IPv6 support by default in :program:`mongod` and all utilities.

.. setting:: jsonnp

   *Default:* false

   Set to ``true`` to permit :term:`JSONP` access via an HTTP
   interface. Consider the security implications of allowing this
   activity before setting this option.

.. setting:: noauth

   *Default:* true

   Disable authentication. Currently the default. Exists for future
   compatibility and clarity.

   For consistency use the :setting:`auth` option.

.. setting:: nohttpinterface

   *Default:* false

   Set to ``true`` to disable the HTTP interface.

.. setting:: nojournal

   *Default:* (on 64-bit systems) false

   *Default:* (on 32-bit systems) true

   Set "``nojournal = true``" to disable durability journaling. By
   default, :program:`mongod` enables journaling in 64-bit versions
   after v2.0.

.. setting:: noprealloc

   *Default:* false

   Set "``noprealloc = true``" to disable the preallocation of data
   files. This will shorten the start up time in some cases, but can
   cause significant performance penalties during normal operations.

.. setting:: noscripting

   *Default:* false

   Set "``noscripting = true``" to disable the scripting engine.

.. setting:: notablescan

   *Default:* false

   Set "``notablescan = true``" to forbid operations that require a
   table scan.

.. setting:: nssize

   *Default:* 16

   Specify this value in megabytes.

   Use this setting to control the default size for all newly created
   namespace files (i.e ``.NS``). This option has no impact on the
   size of existing namespace files.

   The default value is 16 megabytes, this provides for effectively
   12,000 possible namespace. The maximum size is 2 gigabytes.

.. setting:: profile

   *Default:* 0

   Modify this value to changes the level of database profiling, which
   inserts information about operation performance into output of
   :program:`mongod` or the log file. The following levels are
   available:

   =========  ==================================
   **Level**  **Setting**
   ---------  ----------------------------------
      0       Off. No profiling.
      1       On. Only includes slow operations.
      2       On. Includes all operations.
   =========  ==================================

   By default, :program:`mongod` disables profiling Database profiling
   can impact database performance because the profiler must record
   and process all database operations. Enable this option only after
   careful consideration.

.. setting:: quota

   *Default:* false

   Set to ``true`` to enable a maximum limit for the number data files
   each database can have. The default quota is 8 data files, when
   ``quota`` is true. Adjust the quota size with the with the
   :setting:`quotaFiles` setting.

.. setting:: quotaFiles

   *Default:* 8

   Modify limit on the number of data files per database. This option
   requires the :setting:`quota` setting.

.. setting:: rest

   *Default:* false

   Set to ``true`` to enable a simple :term:`REST` interface.

.. setting:: repair

   *Default:* false

   Set to ``true`` to run a repair routine on all databases following
   start up. You may wish to avoid enabling this setting for default
   operation may not be desirable. Consider using ":option:`mongod
   --repair`" for this functionality.

.. setting:: repairpath

   *Default:* :setting:`dbpath`

   Specify the path to the directory containing MongoDB data files, to
   use in conjunction with the :setting:`repair` setting or
   :option:`mongod --repair` operation. Defaults to the value
   specified by :setting:`dbpath`.

.. setting:: slowms

   *Default:* 100

   Specify values in milliseconds.

   Sets the threshold for :program:`mongod` to consider a query "slow"
   for the database profiler. The database logs all slow queries to
   the log, even when the profiler is not turned on. When the database
   profiler is on, :program:`mongod` the profiler writes to the
   ``system.profile`` collection.

   .. seealso:: ":setting:`profile`"

.. setting:: smallfiles

   *Default:* false

   Set to ``true`` to modify MongoDB to use a smaller default data
   file size. Specifically, :setting:`smallfiles` quarters the initial
   file size for data files and limits the maximum file size to 512
   megabytes. Use :setting:`smallfiles` if you have a large number of
   databases that each holds a small quaint of data.

.. setting:: syncdelay

   *Default:* 60

   This setting contrils the maximum number of seconds between disk
   syncs. While :program:`mongod` is always writing data to disk, this
   setting controls the maximum guaranteed interval between a
   successful write operation and the next time the database flushes
   data to disk.

   In many cases, the actual interval between write operations and
   disk flushes is much shorter than the value

   If set to "``0``", :program:`mongod` flushes all operations to disk
   immediately, which may have a significant performance impact. If
   :setting:`journal` is ``true``, all writes will be durable, by way
   of the journal within the time specified by
   :setting:`journalCommitInterval`.

.. setting:: sysinfo

   *Default:* false

   When set to ``true``, ``mognod`` returns diagnostic system
   information to the log (or standard output if :setting:`logpath` is
   not set) and then exits.

   More typically, run this operation by way of the :option:`mongod
   --sysinfo` command.

.. setting:: upgrade

   *Default:* false

   When set to ``true`` this option upgrades the on-disk data format
   of the files specified by the :setting:`dbpath` to the latest
   version, if needed.

   This option only affects the operation of :program:`mongod` if the
   data files are in an old format.

   When specified for a :program:`mongos` instance, this option updates
   the meta data format used by the :term:`configdb`.

Replica Set Options
```````````````````

.. setting:: fastsync

   *Default:* false

   In the context of :term:`replica set` replication, set this option
   to ``true`` if you have seeded this replica with a snapshot of the
   :term:`dbpath` of another member of the set. Otherwise the
   :program:`mongod` will attempt to perform a full sync.

   .. warning::

      If the data is not perfectly synchronized *and*
      :program:`mongod` starts with :setting:`fastsync`, then the
      secondary or slave will be permanently out of sync with the
      primary, which may cause significant consistency problems.

.. setting:: oplogSize

o   Specifies a maximum size in megabytes for the replication operation
   log (e.g. :term:`oplog`.) By :program:`mongod` creates an
   :term:`oplog` based on the maximum amount of space available. For
   64-bit systems, the op log is typically 5% of available disk space.

Master/Slave Replication
````````````````````````

.. setting:: master

   *Default:* false

   Set to ``true`` to configure the current instance to act as
   :term:`master` instance in a replication configuration.

.. setting:: slave

   *Default:* false

   Set to ``true`` to configure the current instance to act as
   :term:`slave` instance in a replication configuration.

.. setting:: source

   *Default:* <>

   *Form:* <host>:<port>

   Used with the :setting:`slave` setting to specify the
   :term:`master` instance from which this :term:`slave` instance will
   replicate

.. setting:: only

   *Default:* false

   Used with the :setting:`slave` option, the ``only`` setting
   specifies only a single :term:`database` to replicate.

.. setting:: slavedelay

   *Default:* 0

   Used with the :setting:`slave` setting, the ``slavedelay`` setting
   configures a "delay" in seconds, for this slave to wait to apply
   operations from the :term:`master` instance.

.. setting:: autoresync

   *Default:* false

   Used with the :setting:`slave` setting, set ``autoresync`` to
   ``true`` to force the :term:`slave` to automatically resync if the
   is more than 10 seconds behind the master. This setting may be
   problematic if the :option:`--oplogSize <mongod --oplogSize>`
   :term:`oplog` is too small (controlled by the :option:`--oplogSize
   <mongod --oplogSize>` option.) If the :term:`oplog` not large
   enough to store the difference in changes between the master's
   current state and the state of the slave, this instance will forcibly
   resync itself unnecessarily. When you set the :setting:`autoresync`
   option, the slave will not attempt an automatic resync more than
   once in a ten minute period.

Replica Set Options
```````````````````

.. setting:: replSet

   *Default:* <none>

   *Form:* <setname>

   *Form:* <setname>/<seed-host1>,<host2>:<port>

   Use this setting to configure replication with replica
   sets. Specify a :term:`setname` as an argument to this set. All
   hosts must have the same set name. You can add one or more "seed"
   hosts to one or more host in the set to initiate the cluster. Use
   the following form: ::

        replSet = <setname>/<host1>,<host2>:<port>

   When you add or reconfigure the replica set on one host, these
   changes propagate throughout the cluster.

Sharding Cluster Options
````````````````````````

.. setting:: configsvr

   *Default:* false

   Set this value to ``true`` to configure this :program:`mongod`
   instance to operate as the :term:`config database` of a shard
   cluster. The default port for :program:`mongod` with this option is
   ``27019` and :program:`mongod` writes all data files to the
   ``/configdb`` sub-directory of the :setting:`dbpath` directory.

.. setting:: shardsvr

   *Default:* false

   Set this value to ``true`` to configure this :program:`mongod`
   instance as a shard in a partitioned cluster. The default port for
   these instances is ``27018``.

.. setting:: noMoveParanoia

   *Default:* false

   Disables a "paranoid mode" for data writes for the
   :dbcommand:`moveChunk`.

.. setting:: configdb

   *Default:* None.

   *Format:* <config1>,<config2><:port>,<config3>

   Set this option to specify a configuration database
   (i.e. :term:`configdb`) for the :term:`shard cluster`. You may
   specify either 1 configuration server or 3 configuration servers,
   in a comma separated list.

   This setting only affects :program:`mongos` processes.

.. setting:: test

   *Default:* false

   Only runs unit tests and does not start a :program:`mongos` instance.

   This setting only affects :program:`mongos` processes and is for
   internal testing use only.

.. setting:: chunkSize

   *Default:* 64

   The value of this option determines the size of each :term:`chunk`
   of data distributed around the :term:`shard cluster`. The default
   value is 64 megabytes. Larger chunks may lead to an uneven
   distribution of data, while smaller chunks may lead to frequent and
   unnecessary migrations. However, in some circumstances it may be
   neccessary to set a different chunk size.

   This setting only affects :program:`mongos` processes.
