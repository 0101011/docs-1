.. _write-concern-operation:
.. _write-concern-internals:
.. _write-operations-write-concern:
.. _replica-set-write-concern:
.. _write-concern:

=======================
Write Concern Reference
=======================

.. default-domain:: mongodb

Write concern describes the level of acknowledgement requested from
MongoDB for write operations to a standalone :program:`mongod` or to
:doc:`replica sets </core/replication-introduction>` or to
:doc:`sharded clusters </core/sharding-introduction>`. In
sharded clusters, :program:`mongos` instances will pass the write
concern on to the shards.

.. versionchanged:: 2.6
   A new protocol for :ref:`write operations
   <rel-notes-write-operations>` integrates write concerns with the
   write operations and eliminates the need to call the
   :dbcommand:`getLastError` command. Previous versions required a
   :dbcommand:`getLastError` command immediately after a write
   operation to specify the write concern.

Write Concern Specification
---------------------------

Write concern can include the following fields:

.. code-block:: javascript

   { w: <value>, j: <boolean>, wtimeout: <number> }

.. _wc-w:

``w`` Option
~~~~~~~~~~~~

The ``w`` option requests acknowledgement that the write operation has
propagated to a specified number of :program:`mongod` instances or to
:program:`mongod` instances with specified tags.

The ``w`` option accepts the following values:

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Value

     - Description

   * - .. writeconcern:: <number>

     - Requests acknowledgement that the write operation has propagated
       to the specified number of :program:`mongod` instances. For
       example:

       ``w: 1``
         Requests acknowledgement that the write operation has
         propagated to the standalone :program:`mongod` or the primary
         in a replica set. ``w: 1`` is the default write concern for
         MongoDB.

       ``w: 0``
         Requests no acknowledgment of the write operation. However, ``w:
         0`` may return information about socket exceptions and
         networking errors to the application.

         If you specify ``w: 0`` but include :ref:`j: true <wc-j>`, the
         :ref:`j: true <wc-j>` prevails to request acknowledgement from
         the standalone :program:`mongod` or the primary of a replica
         set.

       Numbers greater than 1 are valid only for replica sets to
       request acknowledgement from specified number of members,
       including the primary. If you set ``w`` to a number that is
       greater than the number of set members that hold data, MongoDB
       waits for the non-existent members to become available, which
       means MongoDB blocks indefinitely.

   * - .. writeconcern:: "majority"

     - Requests acknowledgment that write operations have propagated to
       the majority of voting nodes.

       .. versionchanged:: 3.0

          In previous versions, ``w: "majority"`` refers to the
          majority of the replica set's members.

       .. include:: /includes/fact-master-slave-majority.rst

   * - .. writeconcern:: <tag set>

     - Requests acknowledgement that the write operations have
       propagated to a replica set member with the specified :ref:`tag
       <replica-set-configuration-tag-sets>`.

.. _wc-j:

``j`` Option
~~~~~~~~~~~~

The :ref:`j <wc-j>` option requests acknowledgement from MongoDB that
the write operation has been written to the :doc:`journal
</core/journaling>`.

.. versionchanged:: 2.6
   Specifying a write concern that includes ``j: true`` to
   a :program:`mongod` or :program:`mongos` running with
   :option:`--nojournal` option now errors. Previous versions would
   ignore the ``j: true``.

.. include:: /includes/note-write-concern-journaled-replication.rst

.. _wc-wtimeout:

``wtimeout``
~~~~~~~~~~~~

This option specifies a time limit, in milliseconds, for the write
concern. ``wtimeout`` is only applicable for ``w`` values greater than
``1``.

``wtimeout`` causes write operations to return with an error
after the specified limit, even if the required write concern will
eventually succeed. When these write operations return,
MongoDB **does not** undo successful data modifications performed
before the write concern exceeded the ``wtimeout`` time limit.

If you do not specify the ``wtimeout`` option and the level of write
concern is unachievable, the write operation will block indefinitely.
Specifying a ``wtimeout`` value of ``0`` is equivalent to a write
concern without the ``wtimeout`` option.

.. seealso::
   :ref:`Write Concern for Replica Sets <replica-set-write-concern>`.
