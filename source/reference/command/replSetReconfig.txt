===============
replSetReconfig
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: replSetReconfig

   The :dbcommand:`replSetReconfig` command modifies the configuration
   of an existing replica set. You can use this command to add and
   remove members, and to alter the options set on existing
   members. Use the following syntax:

   .. code-block:: javascript

      { replSetReconfig: <new_config_document>, force: false }

   You may also run :dbcommand:`replSetReconfig` with the shell's
   :method:`rs.reconfig()` method.

.. slave-ok, admin-only

Considerations
--------------

Be aware of the following :dbcommand:`replSetReconfig` behaviors and
considerations:

.. warning:: 
   .. include:: /includes/warning-mixed-version-rs-config.rst

- You must issue this command against the :term:`admin database` of the current
  primary member of the replica set.

- You can optionally force the replica set to accept the new
  configuration by specifying ``force: true``. Use this option if there
  is no current primary in the replica set.

  .. warning::

     Forcing the :dbcommand:`replSetReconfig` command can lead to a
     :term:`rollback` situation. Use with caution.

  Use the force option to restore a replica set to new servers with
  different hostnames.

- A majority of the set's members must be operational for the
  changes to propagate properly.

- This command can cause downtime as the set renegotiates
  primary-status. Typically this is 10-20 seconds, but could
  be as long as a minute or more. Therefore, you should attempt
  to reconfigure only during scheduled maintenance periods.

- In some cases, :dbcommand:`replSetReconfig` forces the current
  primary to step down, initiating an election for primary among the
  members of the replica set. When this happens, the primary node will drop
  all current connections.

.. versionchanged:: 3.2

- .. include:: /includes/fact-rs-nonzero-priority-vote-restriction.rst
   
- .. include:: /includes/fact-rs-non-voting-priority-restriction.rst

- Before changing the :rsconf:`protocolVersion`, ensure that at least
  one oplog entry (generated from the current protocol version) has
  replicated from the primary to all secondaries.

  To check, on each secondary, check the :data:`optimes.appliedOpTime.t
  <replSetGetStatus.optimes.appliedOpTime.t>` field returned from
  :method:`rs.status()`. For example, connect a :binary:`~bin.mongo`
  shell to each secondary and run:

  .. code-block:: javascript

     rs.status().optimes.appliedOpTime.t

  - If the current replica set protocol version is ``0``, the ``t`` is equal
    to ``-1``.

  - If the current replica set protocol version is ``1``, the ``t`` is greater
    than ``-1``.

  Once you have verified that at least one oplog entry (using the current
  protocol version) has replicated to all the secondaries, you can change
  the protocol version.
  

:dbcommand:`replSetReconfig` obtains a special mutually
exclusive lock to prevent more than one
:dbcommand:`replSetReconfig` operation from occurring at the same
time.

Additional Information
----------------------

:ref:`replSetGetConfig-output`,
:doc:`/reference/replica-configuration`, :method:`rs.reconfig()`, and
:method:`rs.conf()`.
