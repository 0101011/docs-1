=============
findAndModify
=============

.. default-domain:: mongodb

.. dbcommand:: findAndModify

   The :dbcommand:`findAndModify` command atomically modifies and
   returns a single document. The shell and many :term:`drivers
   <driver>` provide a :method:`findAndModify()` helper method. The
   command has the following prototype form:

   .. code-block:: javascript

      { findAndModify: "collection", <options> }

   Replace, ``collection`` with the name of the collection
   containing the document that you want to modify, and specify
   options, as a sub-document that specifies the following:

   :field query: A query object. This statement might resemble the
                  :term:`document` passed to :method:`db.collection.find()`, and
                  should return *one* document from the database.

   :field sort: Optional. If the query selects multiple documents, the
                first document given by this sort clause will be the
                one modified.

   :field remove: When ``true``, :dbcommand:`findAndModify` removes
                  the selected document.

   :field update: an :ref:`update operator <update-operators>` to
                  modify the selected document.

   :field new: when ``true``, returns the modified document rather
               than the original. :dbcommand:`findAndModify` ignores
               the ``new`` option for ``remove`` operations.

   :field fields: a subset of fields to return. See ":ref:`projection
                  operators <projection-operators>`" for more
                  information.

   :field upsert: when ``true``, creates a new document if the
                  specified ``query`` returns no documents. The
                  default is ``false``. The return value for these
                  operations is ``null`` in version 2.2

   .. versionchanged:: 2.2
      Previously, ``upsert`` operations returned a an empty document
      (e.g. ``{ }``,) see :ref:`the 2.2 release notes
      <2.2-findandmodify-returns-null>` for more information.

   For example:

   .. code-block:: javascript

      { findAndModify: "people",
        { query: { name: "Tom", state: "active", rating: { $gt: 10 } },
          sort: { rating: 1 },
          update: { $inc: { score: 1 } }
          }
        }

   This operation, finds a document in the ``people`` collection
   where the ``name`` field has the value ``Tom``, the
   ``active`` value in the ``state`` field and a value in the
   ``rating`` field :operator:`greater than <$gt>` 10. If there is
   more than one result for this query, MongoDB sorts the results of
   the query in descending order, and :operator:`increments <$inc>`
   the value of the ``score`` field by 1. Using the shell helper,
   this same operation can take the following form:

   .. code-block:: javascript

      db.people.findAndModify( {
          query: { name: "Tom", state: "active", rating: { $gt: 10 } },
          sort: { rating: 1 },
          update: { $inc: { score: 1 } }
          } );

   .. warning::

      When using :dbcommand:`findAndModify` in a :term:`sharded
      <sharding>` environment, the ``query`` must contain the
      :term:`shard key` for all operations against the shard
      cluster. :dbcommand:`findAndModify` operations issued against
      :program:`mongos` instances for non-sharded collections function
      normally.
