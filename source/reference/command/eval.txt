====
eval
====

.. default-domain:: mongodb

.. dbcommand:: eval

   The :dbcommand:`eval` command evaluates JavaScript functions
   on the database server. Consider the following (trivial) example:

   .. code-block:: javascript

      { eval: function() { return 3+3 } }

   The shell also provides a helper method, so you can express the
   above as follows:

   .. code-block:: javascript

      db.eval( function() { return 3+3 } );

   The shell's JavaScript interpreter evaluates functions entered
   directly into the shell. If you want to use the server's
   interpreter, you must run :dbcommand:`eval`.

   Be aware of following behaviors and limitations:

   - :dbcommand:`eval` does not work in :term:`sharded <sharding>`
     environments.

   - The ``eval`` operation take a write lock by default. This means
     that writes to database aren't permitted while it's running. You
     can, however, disable the lock by setting the ``nolock`` flag to
     ``true``. For example:

     .. code-block:: javascript

        { eval: function() { return 3+3 }, nolock: true }

     .. warning::

        Do not disable the write lock if the operation may modify the
        contents of the database in anyway.

     You cannot pass the ``nolock`` option to :method:`db.eval()` in
     the :program:`mongo` shell.

     There are some circumstances where the :method:`db.eval()`
     implements a strictly-read only operation that need not block
     other operations when disabling the write lock may be useful. Use
     this functionality with extreme caution.
