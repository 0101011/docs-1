============
serverStatus
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: serverStatus

   The :dbcommand:`serverStatus` command returns a document that
   provides an overview of the database process's state. Most
   monitoring applications run this command at a regular interval to
   collection statistics about the instance:

   .. code-block:: javascript

      { serverStatus: 1 }

   The value (i.e. ``1`` above), does not affect the operation of the
   command.

   .. versionchanged:: 2.4
      In 2.4 you can dynamically suppress portions of the
      :dbcommand:`serverStatus` output, or include suppressed sections
      by adding fields to the command document as in the following
      examples:

   .. code-block:: javascript

      db.runCommand( { serverStatus: 1, repl: 0 } )
      db.runCommand( { serverStatus: 1, metrics: 0, locks: 0 } )

   .. include:: /includes/extracts/example-server-status-projection-serverStatus.rst

   .. seealso:: :method:`db.serverStatus()`

.. When adding status fields to this document, make sure that the
   ``docs/source/reference/server-status.txt`` document also
   reflects those changes.

Output
------

The :dbcommand:`serverStatus` command returns a collection of information that
reflects the database's status. These data are useful for diagnosing
and assessing the performance of your MongoDB instance. This reference
catalogs each datum included in the output of this command and
provides context for using this data to more effectively administer
your database.

.. include:: /includes/fact-3.0-serverStatus-output-change.rst

For an example of the :dbcommand:`serverStatus` output, see
:doc:`/reference/server-status`.

.. seealso:: Much of the output of :dbcommand:`serverStatus` is also
   displayed dynamically by :program:`mongostat`. See the
   :doc:`/reference/program/mongostat` command for more information.


.. _server-status-instance-information:

Instance Information
~~~~~~~~~~~~~~~~~~~~

For an example of the instance information, see the :ref:`Instance
Information section <server-status-example-instance-information>` of
the :doc:`/reference/server-status` page.

.. serverstatus:: host

   The :serverstatus:`host` field contains the system's hostname. In Unix/Linux
   systems, this should be the same as the output of the ``hostname``
   command.

.. serverstatus:: version

   The :serverstatus:`version` field contains the version of MongoDB running on
   the current :program:`mongod` or :program:`mongos` instance.

.. serverstatus:: process

   The :serverstatus:`process` field identifies which kind of MongoDB instance is
   running. Possible values are:

   - :program:`mongos`
   - :program:`mongod`

.. serverstatus:: uptime

   The value of the :serverstatus:`uptime` field corresponds to the number of
   seconds that the :program:`mongos` or :program:`mongod` process has
   been active.

.. serverstatus:: uptimeEstimate

   :serverstatus:`uptimeEstimate` provides the uptime as calculated from MongoDB's
   internal course-grained time keeping system.

.. serverstatus:: localTime

   The :serverstatus:`localTime` value is the current time, according to the
   server, in UTC specified in an ISODate format.

.. _locks:
.. _server-status-locks:

locks
~~~~~

For an example of the ``locks`` output, see the :ref:`locks section
<server-status-example-locks>` of the :doc:`/reference/server-status`
page.

.. serverstatus:: locks

   .. versionchanged:: 3.0

   The :serverstatus:`locks` document contains embedded documents
   that provides a granular report for each lock type and mode.
   The possible lock types are as follows:

   .. include:: /includes/fact-lock-types.rst

   The possible modes are as follows:

   .. include:: /includes/fact-lock-modes.rst

   All values are of the ``NumberLong()`` type.

   .. COMMENT

      these definitions are for the servers and not per operations;
      as such, they differ from those in db.currentOp.txt

   .. serverstatus:: locks.acquireCount

      Number of times the lock was acquired in the specified mode.

   .. serverstatus:: locks.acquireWaitCount

      Number of times the :serverstatus:`locks.acquireCount` lock
      acquisitions encountered waits because the locks were held in a
      conflicting mode.

   .. serverstatus:: locks.timeAcquiringMicros

      Cumulative wait time in microseconds for the lock acquisitions.

      :serverstatus:`locks.timeAcquiringMicros` divided by
      :serverstatus:`locks.acquireWaitCount` gives an
      approximate average wait time for the particular lock mode.

   .. serverstatus:: locks.deadlockCount

      Number of times the lock acquisitions encountered deadlocks.

.. _globallock:
.. _global-lock:
.. _server-status-globallock:
.. _server-status-global-lock:

globalLock
~~~~~~~~~~

For an example of the ``globalLock`` output, see the :ref:`globalLock
section <server-status-example-globallock>` of the
:doc:`/reference/server-status` page.

.. serverstatus:: globalLock

   The :serverstatus:`globalLock` data structure contains information regarding
   the database's current lock state, historical lock status, current
   operation queue, and the number of active clients.

.. serverstatus:: globalLock.totalTime

   The value of :serverstatus:`globalLock.totalTime` represents the time, in
   microseconds, since the database last started and created the
   :serverstatus:`globalLock`. This is roughly equivalent to total server
   uptime.

.. serverstatus:: globalLock.currentQueue

   The :serverstatus:`globalLock.currentQueue` data structure value provides more
   granular information concerning the number of operations queued
   because of a lock.

.. serverstatus:: globalLock.currentQueue.total

   The value of :serverstatus:`globalLock.currentQueue.total` provides a combined
   total of operations queued waiting for the lock.

   A consistently small queue, particularly of shorter operations,
   should cause no concern. Also, consider this value in light of the
   size of queue waiting for the read lock
   (e.g. :serverstatus:`globalLock.currentQueue.readers`) and write lock
   (e.g. :serverstatus:`globalLock.currentQueue.writers`) individually.

.. serverstatus:: globalLock.currentQueue.readers

   The value of :serverstatus:`globalLock.currentQueue.readers` is the number of
   operations that are currently queued and waiting for the
   read lock. A consistently small read-queue, particularly of
   shorter operations, should cause no concern.

.. serverstatus:: globalLock.currentQueue.writers

   The value of :serverstatus:`globalLock.currentQueue.writers` is the number of
   operations that are currently queued and waiting for the
   write lock. A consistently small write-queue, particularly of
   shorter operations, is no cause for concern.

globalLock.activeClients
========================

.. serverstatus:: globalLock.activeClients

   The :serverstatus:`globalLock.activeClients` data structure provides more
   granular information about the number of connected clients and the
   operation types (e.g. read or write) performed by these clients.

   Use this data to provide context for the
   :serverstatus:`globalLock.currentQueue` data.

.. serverstatus:: globalLock.activeClients.total

   The value of :serverstatus:`globalLock.activeClients.total` is the total number
   of active client connections to the database. This combines clients
   that are performing read operations
   (e.g. :serverstatus:`globalLock.activeClients.readers`) and clients that
   are performing write operations (e.g. :serverstatus:`globalLock.activeClients.writers`).

.. serverstatus:: globalLock.activeClients.readers

   The value of :serverstatus:`globalLock.activeClients.readers` contains a count
   of the active client connections performing read operations.

.. serverstatus:: globalLock.activeClients.writers

   The value of :serverstatus:`globalLock.activeClients.writers` contains a count
   of active client connections performing write operations.

.. _memory-status:
.. _server-status-memory:

mem
~~~

For an example of the ``mem`` output, see the :ref:`mem section
<server-status-example-memory>` of the :doc:`/reference/server-status`
page.

.. serverstatus:: mem

   The :serverstatus:`mem` data structure holds information regarding the target
   system architecture of :program:`mongod` and current memory use.

.. serverstatus:: mem.bits

   The value of :serverstatus:`mem.bits` is either ``64`` or ``32``,
   depending on which target architecture specified during the
   :program:`mongod` compilation process. In most instances this is
   ``64``, and this value does not change over time.

.. serverstatus:: mem.resident

   The value of :serverstatus:`mem.resident` is roughly equivalent to the amount
   of RAM, in megabytes (MB), currently used by the database process. In normal
   use this value tends to grow. In dedicated database servers this
   number tends to approach the total amount of system memory.

.. serverstatus:: mem.virtual

   :serverstatus:`mem.virtual` displays the quantity, in
   megabytes (MB), of virtual memory used by the :program:`mongod`
   process. With :term:`journaling <journal>` enabled, the value of
   :serverstatus:`mem.virtual` is at least twice the value of
   :serverstatus:`mem.mapped`.

   If :serverstatus:`mem.virtual` value is significantly larger
   than :serverstatus:`mem.mapped` (e.g. 3 or more times), this
   may indicate a memory leak.

.. serverstatus:: mem.supported

   :serverstatus:`mem.supported` is true when the underlying system supports
   extended memory information. If this value is false and the system
   does not support extended memory information, then other
   :serverstatus:`mem` values may not be accessible to the database server.

.. serverstatus:: mem.mapped

   The value of :serverstatus:`mem.mapped` provides the amount of mapped memory,
   in megabytes (MB), by
   the database. Because MongoDB uses memory-mapped files, this value
   is likely to be to be roughly equivalent to the total size of your
   database or databases.

.. serverstatus:: mem.mappedWithJournal

   :serverstatus:`mem.mappedWithJournal` provides the amount of
   mapped memory, in megabytes (MB), including the memory used for
   journaling.
   This value will always be twice the value of :serverstatus:`mem.mapped`.
   This field is only included if journaling is enabled.

.. serverstatus:: mem.note

   The field :serverstatus:`extra_info.note` appears if
   :serverstatus:`mem.supported` is false. The
   :serverstatus:`extra_info.note` field contains the text:
   ``"not all mem info support on this platform"``.

.. _server-status-connections:

connections
~~~~~~~~~~~

For an example of the ``connections`` output, see the :ref:`connections
section <server-status-example-connections>` of the
:doc:`/reference/server-status` page.

.. serverstatus:: connections

   The :serverstatus:`connections` sub document data regarding the
   current status of incoming connections and availability of the database
   server. Use these values to assess the current load and capacity
   requirements of the server.

.. serverstatus:: connections.current

   The value of :serverstatus:`connections.current` corresponds to the number of
   connections to the database server from clients. This number
   includes the current shell session. Consider the value of
   :serverstatus:`connections.available` to add more context to this
   datum.

   This figure will include all incoming connections including any shell
   connections or connections from other servers, such as :term:`replica set`
   members or :program:`mongos` instances.

.. serverstatus:: connections.available

   :serverstatus:`connections.available` provides a count of the number of unused
   available incoming connections the database can provide. Consider this
   value in combination with the value of
   :serverstatus:`connections.current` to understand the connection load on
   the database, and the :doc:`/reference/ulimit` document for
   more information about system thresholds on available connections.

.. serverstatus:: connections.totalCreated

   :serverstatus:`connections.totalCreated` provides a count of
   **all** incoming connections created to the server. This number includes
   connections that have since closed.

.. _server-status-extra-info:
.. _server-status-extra_info:
.. _server-status-extrainfo:

extra_info
~~~~~~~~~~

For an example of the ``extra_info`` output, see the :ref:`extra_info
section <server-status-example-extrainfo>` of the
:doc:`/reference/server-status` page.

.. serverstatus:: extra_info

   The :serverstatus:`extra_info` data structure holds data collected by the
   :program:`mongod` instance about the underlying system. Your system may
   only report a subset of these fields.

.. serverstatus:: extra_info.note

   The field :serverstatus:`extra_info.note` reports that the data in this
   structure depend on the underlying platform, and has the text:
   "fields vary by platform."

.. serverstatus:: extra_info.heap_usage_bytes

   The :serverstatus:`extra_info.heap_usage_bytes` field is only available on
   Unix/Linux systems, and reports the total size in bytes of heap space
   used by the database process.

.. serverstatus:: extra_info.page_faults

   The :serverstatus:`extra_info.page_faults`
   Reports the total number of page faults that require
   disk operations. Page faults refer to operations that require the
   database server to access data which isn't available in active
   memory. The :serverstatus:`extra_info.page_faults` counter may
   increase dramatically during
   moments of poor performance and may correlate with limited
   memory environments and larger data sets. Limited and sporadic page
   faults do not necessarily indicate an issue.

   Windows draws a distinction between "hard" page faults involving disk IO, and
   "soft" page faults that only require moving pages in memory. MongoDB counts
   both hard and soft page faults in this statistic.

.. _server-status-backgroundflushing:
.. _server-status-background-flushing:

backgroundFlushing
~~~~~~~~~~~~~~~~~~

.. note::

   ``backgroundFlushing`` information only appears for instances that
   use the MMAPv1 storage engine.

For an example of the ``backgroundFlushing`` output, see the
:ref:`backgroundFlushing section
<server-status-example-backgroundflushing>` of the
:doc:`/reference/server-status` page.

.. serverstatus:: backgroundFlushing

   :program:`mongod` periodically flushes writes to disk. In the default
   configuration, this happens every 60 seconds. The
   :serverstatus:`backgroundFlushing` data structure contains data regarding
   these operations. Consider these values if you have concerns about
   write performance and :ref:`journaling <journaling-status>`.

.. serverstatus:: backgroundFlushing.flushes

   :serverstatus:`backgroundFlushing.flushes` is a counter that collects the
   number of times the database has flushed all writes to disk. This
   value will grow as database runs for longer periods of time.

.. serverstatus:: backgroundFlushing.total_ms

   The :serverstatus:`backgroundFlushing.total_ms` value provides the total number
   of milliseconds (ms) that the :program:`mongod` processes have spent
   writing (i.e. flushing) data to disk. Because this is an absolute
   value, consider the value of :serverstatus:`backgroundFlushing.flushes`
   and :serverstatus:`backgroundFlushing.average_ms` to provide better
   context for this datum.

.. serverstatus:: backgroundFlushing.average_ms

   The :serverstatus:`backgroundFlushing.average_ms` value describes the
   relationship between the number of flushes and the total amount of
   time that the database has spent writing data to disk. The larger
   :serverstatus:`backgroundFlushing.flushes` is, the more likely this value
   is likely to represent a "normal," time; however, abnormal data can
   skew this value.

   Use the :serverstatus:`backgroundFlushing.last_ms` to ensure that a high
   average is not skewed by transient historical issue or a
   random write distribution.

.. serverstatus:: backgroundFlushing.last_ms

   The value of the :serverstatus:`backgroundFlushing.last_ms` field is the amount
   of time, in milliseconds, that the last flush operation took to
   complete. Use this value to verify that the current performance of
   the server and is in line with the historical data provided by
   :serverstatus:`backgroundFlushing.average_ms` and
   :serverstatus:`backgroundFlushing.total_ms`.

.. serverstatus:: backgroundFlushing.last_finished

   The :serverstatus:`backgroundFlushing.last_finished` field provides a timestamp
   of the last completed flush operation in the :term:`ISODate`
   format. If this value is more than a few minutes old relative to
   your server's current time and accounting for differences in time
   zone, restarting the database may result in some data loss.

   Also consider ongoing operations that might skew this value by
   routinely block write operations.

.. _server-status-network:

network
~~~~~~~

For an example of the ``network`` output, see the :ref:`network section
<server-status-example-network>` of the :doc:`/reference/server-status`
page.

.. serverstatus:: network

   The :serverstatus:`network` data structure contains data regarding MongoDB's
   network use.

.. serverstatus:: network.bytesIn

   The value of the :serverstatus:`network.bytesIn` field reflects the
   amount of network traffic, in bytes, received *by* this
   database. Use this value to ensure that network traffic sent to the
   :program:`mongod` process is consistent with expectations and
   overall inter-application traffic.

.. serverstatus:: network.bytesOut

   The value of the :serverstatus:`network.bytesOut` field reflects the amount of
   network traffic, in bytes, sent *from* this database. Use this
   value to ensure that network traffic sent by the :program:`mongod` process
   is consistent with expectations and overall inter-application
   traffic.

.. serverstatus:: network.numRequests

   The :serverstatus:`network.numRequests` field is a counter of the total number
   of distinct requests that the server has received. Use this value
   to provide context for the :serverstatus:`network.bytesIn` and
   :serverstatus:`network.bytesOut` values to ensure that MongoDB's network
   utilization is consistent with expectations and application use.

.. _server-status-repl:

repl
~~~~

For an example of the ``repl`` output, see the :ref:`repl section
<server-status-example-repl>` of the :doc:`/reference/server-status`
page.

.. serverstatus:: repl

   The :serverstatus:`repl` data structure contains status
   information for MongoDB's replication (i.e. "replica set")
   configuration. These values only appear when the current host has
   replication enabled.

   See :doc:`/replication` for more information on replication.

.. serverstatus:: repl.setName

   The :serverstatus:`repl.setName` field contains a string with
   the name of the current replica set. This value reflects the
   :option:`--replSet <mongod --replSet>` command line argument, or
   :setting:`~replication.replSetName` value in the configuration file.

   See :doc:`/replication` for more information on replication.

.. serverstatus:: repl.ismaster

   The value of the :serverstatus:`repl.ismaster` field is
   either ``true`` or ``false`` and reflects whether the current node
   is the master or primary node in the replica set.

   See :doc:`/replication` for more information on replication.

.. serverstatus:: repl.secondary

   The value of the :serverstatus:`repl.secondary` field is
   either ``true`` or ``false`` and reflects whether the current node
   is a secondary node in the replica set.

   See :doc:`/replication` for more information on replication.

.. serverstatus:: repl.primary

   .. versionadded:: 3.0.0

   A string in the format of ``"[hostname]:[port]"`` listing the
   current :term:`primary` member of the replica set.

.. serverstatus:: repl.hosts

   :serverstatus:`repl.hosts` is an array that lists the other
   nodes in the current replica set. Each member of the replica set
   appears in the form of ``hostname:port``.

   See :doc:`/replication` for more information on replication.

.. serverstatus:: repl.me

   .. versionadded:: 3.0.0

   The ``[hostname]:[port]`` combination for the current member in the
   replica set.

.. serverstatus:: repl.rbid

   .. versionadded:: 3.0.0

   :term:`Rollback` identifier. Used to determine if a rollback has
   happened for this :program:`mongod` instance.

.. serverstatus:: repl.replicationProgress

   .. versionchanged:: 3.2.0

      MongoDB 3.2.0 renamed this field from ``serverStatus.repl.slaves``
      to :serverstatus:`repl.replicationProgress`.

   .. versionadded:: 3.0.0

   An array with one document for every member of the replica set that
   reports replication process to this member. Typically this is the
   primary, or secondaries if using chained replication.

   To include this output you must pass the ``repl`` option to
   the :dbcommand:`serverStatus`, as in the following:

   .. code-block:: javascript

      db.serverStatus({ "repl": 1 })
      db.runCommand({ "serverStatus": 1, "repl": 1 })

   The content of the :serverstatus:`repl.replicationProgress` section
   depends on the source of each member's replication. This section
   supports internal operation and is for internal and diagnostic use only.

.. serverstatus:: repl.replicationProgress[n].rid

   An ObjectId used as an ID for the members of the replica
   set. For internal use only.

.. serverstatus:: repl.replicationProgress[n].host

   The name of the host in ``[hostname]:[port]`` format for the member
   of the replica set.

.. serverstatus:: repl.replicationProgress[n].optime

   Information regarding the last operation from the :term:`oplog` that
   the member applied, as reported from this member.

.. serverstatus:: repl.replicationProgress[n].memberID

   The integer identifier for this member of the replica set.

.. _server-status-opcountersrepl:
.. _server-status-opcounters-repl:

opcountersRepl
~~~~~~~~~~~~~~

For an example of the ``opcountersRepl`` output, see the
:ref:`opcountersRepl section <server-status-example-opcountersrepl>` of
the :doc:`/reference/server-status` page.

.. serverstatus:: opcountersRepl

   The :serverstatus:`opcountersRepl` data structure, similar to the
   :serverstatus:`opcounters` data structure, provides an overview of
   database replication operations by type and makes it possible to
   analyze the load on the replica in more granular manner.  These
   values only appear when the current host has replication enabled.

   These values will differ from the :serverstatus:`opcounters` values
   because of how MongoDB serializes operations during replication.
   See :doc:`/replication` for more information on replication.

   These numbers will grow over time in response to database
   use. Analyze these values over time to track database utilization.

.. serverstatus:: opcountersRepl.insert

   :serverstatus:`opcountersRepl.insert` provides a counter of the total number
   of replicated insert operations since the :program:`mongod` instance
   last started.

.. serverstatus:: opcountersRepl.query

   :serverstatus:`opcountersRepl.query` provides a counter of the total number
   of replicated queries since the :program:`mongod` instance last
   started.

.. serverstatus:: opcountersRepl.update

   :serverstatus:`opcountersRepl.update` provides a counter of the total number
   of replicated update operations since the :program:`mongod` instance
   last started.

.. serverstatus:: opcountersRepl.delete

   :serverstatus:`opcountersRepl.delete` provides a counter of the total number
   of replicated delete operations since the :program:`mongod` instance
   last started.

.. serverstatus:: opcountersRepl.getmore

   :serverstatus:`opcountersRepl.getmore` provides a counter of the total number
   of "getmore" operations since the :program:`mongod` instance last
   started. This counter can be high even if the query count is low.
   Secondary nodes send ``getMore`` operations as part of the replication
   process.

.. serverstatus:: opcountersRepl.command

   :serverstatus:`opcountersRepl.command` provides a counter of the total number
   of replicated commands issued to the database since the
   :program:`mongod` instance last started.

.. _server-status-opcounters:

opcounters
~~~~~~~~~~

For an example of the ``opcounters`` output, see the :ref:`opcounters
section <server-status-example-opcounters>` of the
:doc:`/reference/server-status` page.

.. serverstatus:: opcounters

   The :serverstatus:`opcounters` data structure provides an overview of
   database operations by type and makes it possible to analyze the
   load on the database in more granular manner.

   These numbers will grow over time and in response to database
   use. Analyze these values over time to track database utilization.

   .. note::

      The data in :serverstatus:`opcounters` treats operations
      that affect multiple documents, such as bulk insert or
      multi-update operations, as a single operation. See
      :serverstatus:`metrics.document` for more granular
      document-level operation tracking.

      Additionally, these values reflect received operations, and
      increment even when operations are not successful.

.. serverstatus:: opcounters.insert

   :serverstatus:`opcounters.insert` provides a counter of the total number
   of insert operations received since the :program:`mongod` instance last
   started.

.. serverstatus:: opcounters.query

   :serverstatus:`opcounters.query` provides a counter of the total number
   of queries received since the :program:`mongod` instance last started.

.. serverstatus:: opcounters.update

   :serverstatus:`opcounters.update` provides a counter of the total number
   of update operations received since the :program:`mongod` instance last
   started.

.. serverstatus:: opcounters.delete

   :serverstatus:`opcounters.delete` provides a counter of the total number
   of delete operations since the :program:`mongod` instance last
   started.

.. serverstatus:: opcounters.getmore

   :serverstatus:`opcounters.getmore` provides a counter of the total number
   of "getmore" operations since the :program:`mongod` instance last
   started. This counter can be high even if the query count is low.
   Secondary nodes send ``getMore`` operations as part of the replication
   process.

.. serverstatus:: opcounters.command

   :serverstatus:`opcounters.command` provides a counter of the total number
   of commands issued to the database since the :program:`mongod`
   instance last started.

   :serverstatus:`opcounters.command` counts all :doc:`commands
   </reference/command>` **except** the write commands:
   :dbcommand:`insert`, :dbcommand:`update`, and :dbcommand:`delete`.

.. _server-status-range-deleter:

rangeDeleter
~~~~~~~~~~~~

.. versionadded:: 3.0.0

.. note:: The :serverstatus:`rangeDeleter` data is only included in
   the output of :dbcommand:`serverStatus` if explicitly enabled. To
   return the :serverstatus:`rangeDeleter`, use one of the
   following commands:

   .. code-block:: javascript

      db.serverStatus( { rangeDeleter: 1 } )
      db.runCommand( { serverStatus: 1, rangeDeleter: 1 } )

.. serverstatus:: rangeDeleter

   A document that reports on the work performed by the
   :dbcommand:`cleanupOrphaned` command and the cleanup phase of the
   :dbcommand:`moveChunk` command.

.. serverstatus:: rangeDeleter.lastDeleteStats

   An array of documents that each report on the last operations of
   migration cleanup operations. At most
   :serverstatus:`rangeDeleter.lastDeleteStats` will report data
   for the last 10 operations.

.. serverstatus:: rangeDeleter.lastDeleteStats[n].deletedDocs

   A counter with the number of documents deleted by
   migration cleanup operations.

.. serverstatus:: rangeDeleter.lastDeleteStats[n].queueStart

   A timestamp that reflects when operations began entering the queue
   for the migration cleanup operation. Specifically, operations wait
   in the queue while the :program:`mongod` waits for open cursors to
   close on the namespace.

.. serverstatus:: rangeDeleter.lastDeleteStats[n].queueEnd

   A timestamp that reflects when the migration cleanup operation begins.

.. serverstatus:: rangeDeleter.lastDeleteStats[n].deleteStart

   A timestamp for the beginning of the delete process
   that is part of the migration cleanup operation.

.. serverstatus:: rangeDeleter.lastDeleteStats[n].deleteEnd

   A timestamp for the end of the delete process
   that is part of the migration cleanup operation.

.. serverstatus:: rangeDeleter.lastDeleteStats[n].waitForReplStart

   A timestamp that reflects when the migration cleanup
   operation began waiting for replication to process the delete operation.

.. serverstatus:: rangeDeleter.lastDeleteStats[n].waitForReplEnd

   A timestamp that reflects when the migration cleanup
   operation finished waiting for replication to process the delete operation.

.. _server-status-security:

security
~~~~~~~~

.. versionadded:: 3.0.0

For an example of the ``security`` output, see the :ref:`security section
<server-status-example-security>` of the :doc:`/reference/server-status`
page.

.. serverstatus:: security

   A document reporting security configuration and details. Only
   appears for :program:`mongod` instances compiled with support for TLS/SSL.

.. serverstatus:: security.SSLServerSubjectName

   The subject name associated with the TLS/SSL certificate specified by
   :setting:`net.ssl.PEMKeyPassword`.

.. serverstatus:: security.SSLServerHasCertificateAuthority

   A boolean that is ``true`` when the TLS/SSL certificate specified by
   :setting:`net.ssl.PEMKeyPassword` is associated with a certificate
   authority. ``false`` when the TLS/SSL certificate is self-signed.

.. serverstatus:: security.SSLServerCertificateExpirationDate

   A :ref:`date object <mongo-shell-data-type>` object that represents
   the date when the TLS/SSL certificate specified by
   :setting:`net.ssl.PEMKeyPassword` expires.

.. _server-status-storage-engine:

storageEngine
~~~~~~~~~~~~~

.. versionadded:: 3.0.0

For an example of the ``storageEngine`` output, see the :ref:`storageEngine section
<server-status-example-storage-engine>` of the :doc:`/reference/server-status`
page.

.. serverstatus:: storageEngine

   A document with data about the current storage engine.

.. serverstatus:: storageEngine.name

   A string that represents the name of the current storage engine.

.. _server-status-asserts:

asserts
~~~~~~~

For an example of the ``asserts`` output, see the :ref:`asserts section
<server-status-example-asserts>` of the :doc:`/reference/server-status`
page.

.. serverstatus:: asserts

   The :serverstatus:`asserts` document reports the number of asserts on the
   database. While assert errors are typically uncommon, if there are
   non-zero values for the :serverstatus:`asserts`, you should check the log
   file for the :program:`mongod` process for more information. In
   many cases these errors are trivial, but are worth investigating.

.. serverstatus:: asserts.regular

   The :serverstatus:`asserts.regular` counter tracks the number of regular
   assertions raised since the server process started. Check the log
   file for more information about these messages.

.. serverstatus:: asserts.warning

   The :serverstatus:`asserts.warning` counter tracks the number of warnings
   raised since the server process started. Check the log file for
   more information about these warnings.

.. serverstatus:: asserts.msg

   The :serverstatus:`asserts.msg` counter tracks the number of message
   assertions raised since the server process started. Check the log
   file for more information about these messages.

.. serverstatus:: asserts.user

   The :serverstatus:`asserts.user` counter reports the number of "user asserts"
   that have occurred since the last time the server process
   started. These are errors that user may generate, such as out of
   disk space or duplicate key. You can prevent these assertions by
   fixing a problem with your application or deployment. Check the
   MongoDB log for more information.

.. serverstatus:: asserts.rollovers

   The :serverstatus:`asserts.rollovers` counter displays the number of
   times that the rollover counters have rolled over since the last
   time the server process started. The counters will rollover to zero
   after 2\ :superscript:`30` assertions. Use this value to provide
   context to the other values in the :serverstatus:`asserts` data structure.

.. _server-status-writebacksqueued:
.. _server-status-write-backs-queued:

writeBacksQueued
~~~~~~~~~~~~~~~~

For an example of the ``writeBacksQueued`` output, see the
:ref:`writeBacksQueued section
<server-status-example-writebacksqueued>` of the
:doc:`/reference/server-status` page.

.. serverstatus:: writeBacksQueued

   The value of :serverstatus:`writeBacksQueued` is ``true`` when there
   are operations from a :program:`mongos` instance queued for
   retrying. Typically this option is false.

   .. seealso:: :term:`writeBacks`

.. _durability-status:
.. _journaling-status:
.. _server-status-journaling:

Journaling (dur)
~~~~~~~~~~~~~~~~

.. note::

   Journaling(dur) information only appears for :program:`mongod`
   instances that use the MMAPv1 storage engine and have journaling
   enabled.

For an example of the ``Journaling (dur)`` output, see the
:ref:`journaling section <server-status-example-journaling>` of the
:doc:`/reference/server-status` page.

.. serverstatus:: dur

   The :serverstatus:`dur` (for "durability") document contains data
   regarding the :program:`mongod`'s journaling-related operations and
   performance. :program:`mongod` must be running with journaling for
   these data to appear in the output of ":dbcommand:`serverStatus`".

   MongoDB reports the data in :serverstatus:`dur` based on 3
   second intervals of data, collected between 3 and 6 seconds in the
   past.

   .. seealso:: :doc:`/core/journaling` for more information about journaling operations.

.. serverstatus:: dur.commits

   The :serverstatus:`dur.commits` provides the number of transactions
   written to the :term:`journal` during the last :ref:`journal group
   commit interval <journaling-journal-commit-interval>`.

.. serverstatus:: dur.journaledMB

   The :serverstatus:`dur.journaledMB` provides the amount of data in
   megabytes (MB) written to :term:`journal` during the last
   :ref:`journal group commit interval
   <journaling-record-write-operation>`.

.. serverstatus:: dur.writeToDataFilesMB

   The :serverstatus:`dur.writeToDataFilesMB` provides the amount of data in
   megabytes (MB) written from :term:`journal` to the data files during the
   last :ref:`journal group commit interval <journaling-record-write-operation>`.

.. serverstatus:: dur.compression

   The :serverstatus:`dur.compression` represents the compression ratio of
   the data written to the :term:`journal`:

   .. code-block:: javascript

      ( journaled_size_of_data / uncompressed_size_of_data )

.. serverstatus:: dur.commitsInWriteLock

   The :serverstatus:`dur.commitsInWriteLock` provides a count of the commits
   that occurred while a write lock was held. Commits in a write lock
   indicate a MongoDB node under a heavy write load and call for
   further diagnosis.

.. serverstatus:: dur.earlyCommits

   The :serverstatus:`dur.earlyCommits` value reflects the number of times
   MongoDB requested a commit before the scheduled :ref:`journal group
   commit interval <journaling-record-write-operation>`. Use this
   value to ensure that your :ref:`journal group commit interval
   <journaling-journal-commit-interval>` is not too long for your
   deployment.

.. serverstatus:: dur.timeMS

   The :serverstatus:`dur.timeMS` document provides information about the
   performance of the :program:`mongod` instance during the various
   phases of journaling in the last :ref:`journal group commit
   interval <journaling-journal-commit-interval>`.

.. serverstatus:: dur.timeMS.dt

   The :serverstatus:`dur.timeMS.dt` value provides, in milliseconds, the
   amount of time over which MongoDB collected the :serverstatus:`dur.timeMS`
   data. Use this field to provide context to the other
   :serverstatus:`dur.timeMS` field values.

.. serverstatus:: dur.timeMS.prepLogBuffer

   The :serverstatus:`dur.timeMS.prepLogBuffer` value provides, in milliseconds,
   the amount of time spent preparing to write to the journal. Smaller
   values indicate better journal performance.

.. serverstatus:: dur.timeMS.writeToJournal

   The :serverstatus:`dur.timeMS.writeToJournal` value provides, in milliseconds,
   the amount of time spent actually writing to the journal. File
   system speeds and device interfaces can affect performance.

.. serverstatus:: dur.timeMS.writeToDataFiles

   The :serverstatus:`dur.timeMS.writeToDataFiles` value provides, in
   milliseconds, the amount of time spent writing to data files after
   journaling. File system speeds and device interfaces can affect
   performance.

.. serverstatus:: dur.timeMS.remapPrivateView

   The :serverstatus:`dur.timeMS.remapPrivateView` value provides, in
   milliseconds, the amount of time spent remapping copy-on-write memory
   mapped views. Smaller values indicate better journal performance.

.. serverstatus:: dur.timeMS.commits

   The :serverstatus:`dur.timeMS.commits` value provides, in
   milliseconds, the amount of time spent for commits.

.. serverstatus:: dur.timeMS.commitsInWriteLock

   The :serverstatus:`dur.timeMS.commitsInWriteLock` value
   provides, in milliseconds, the amount of time spent for commits that
   occurred while a write lock was held.

.. _server-status-metrics:

metrics
~~~~~~~

For an example of the metrics output, see the :ref:`metrics section
<server-status-example-metrics>` of the :doc:`/reference/server-status`
page.

.. versionadded:: 2.4.0

.. serverstatus:: metrics

   The :serverstatus:`metrics` document holds a number of
   statistics that reflect the current use and state of a running
   :program:`mongod` instance.

.. serverstatus:: metrics.commands

   .. versionadded:: 3.0.0

   A document that reports on the use of database
   commands. The fields in :serverstatus:`metrics.commands` are
   the names of :doc:`database commands </reference/command>` and each
   value is a document that reports the total number of commands
   executed as well as the number of failed executions.

.. serverstatus:: metrics.commands.<command>.failed

   The number of times ``<command>`` failed on this
   :program:`mongod`.

.. serverstatus:: metrics.commands.<command>.total

   The number of times ``<command>`` executed on this
   :program:`mongod`.

.. serverstatus:: metrics.document

   The :serverstatus:`metrics.document` holds a document of that
   reflect document access and modification patterns and data
   use. Compare these values to the data in the
   :serverstatus:`opcounters` document, which track total number
   of operations.

.. serverstatus:: metrics.document.deleted

   :serverstatus:`metrics.document.deleted` reports the total
   number of documents deleted.

.. serverstatus:: metrics.document.inserted

   :serverstatus:`metrics.document.inserted` reports the total
   number of documents inserted.

.. serverstatus:: metrics.document.returned

   :serverstatus:`metrics.document.returned` reports the total
   number of documents returned by queries.

.. serverstatus:: metrics.document.updated

   :serverstatus:`metrics.document.updated` reports the total
   number of documents updated.

.. serverstatus:: metrics.getLastError

   :serverstatus:`metrics.getLastError` is a document that
   reports on :dbcommand:`getLastError` use.

.. serverstatus:: metrics.getLastError.wtime

   :serverstatus:`metrics.getLastError.wtime` is an embedded document
   that reports :dbcommand:`getLastError` operation counts with a
   ``w`` argument greater than ``1``.

.. serverstatus:: metrics.getLastError.wtime.num

   :serverstatus:`metrics.getLastError.wtime.num` reports the
   total number of :dbcommand:`getLastError` operations with a
   specified write concern (i.e. ``w``) that wait for one or more
   members of a replica set to acknowledge the write operation (i.e. a
   ``w`` value greater than ``1``.)

.. serverstatus:: metrics.getLastError.wtime.totalMillis

   :serverstatus:`metrics.getLastError.wtime.totalMillis`
   reports the total amount of time in milliseconds that the
   :program:`mongod` has spent performing :dbcommand:`getLastError`
   operations with write concern (i.e.  ``w``) that wait for one or
   more members of a replica set to acknowledge the write operation
   (i.e. a ``w`` value greater than ``1``.)

.. serverstatus:: metrics.getLastError.wtimeouts

   :serverstatus:`metrics.getLastError.wtimeouts` reports the
   number of times that :term:`write concern` operations have timed out
   as a result of the ``wtimeout`` threshold to
   :dbcommand:`getLastError`.

.. serverstatus:: metrics.operation

   :serverstatus:`metrics.operation` is an embedded document that
   holds counters for several types of update and query operations
   that MongoDB handles using special operation types.

.. serverstatus:: metrics.operation.fastmod

   :serverstatus:`metrics.operation.fastmod` reports the number
   of :doc:`update </core/write-operations>` operations that neither
   cause documents to grow nor require updates to the index. For
   example, this counter would record an update operation that use the
   :update:`$inc` operator to increment the value of a field that is
   not indexed.

.. serverstatus:: metrics.operation.idhack

   :serverstatus:`metrics.operation.idhack` reports the number
   of queries that contain the ``_id`` field. For these queries,
   MongoDB will use default index on the ``_id`` field and skip all
   query plan analysis.

.. serverstatus:: metrics.operation.scanAndOrder

   :serverstatus:`metrics.operation.scanAndOrder` reports the
   total number of queries that return sorted numbers that cannot
   perform the sort operation using an index.

.. serverstatus:: metrics.queryExecutor

   :serverstatus:`metrics.queryExecutor` is a document that
   reports data from the query execution system.

.. serverstatus:: metrics.queryExecutor.scanned

   :serverstatus:`metrics.queryExecutor.scanned` reports the
   total number of index items scanned during queries and query-plan
   evaluation. This counter is the same as
   :data:`~explain.executionStats.totalKeysExamined` in the output of
   :method:`~cursor.explain()`.

.. serverstatus:: metrics.record

   :serverstatus:`metrics.record` is a document that reports
   data related to record allocation in the on-disk memory files.

.. serverstatus:: metrics.record.moves

   For :doc:`/core/mmapv1`, :serverstatus:`metrics.record.moves`
   reports the total number of times documents move within the on-disk
   representation of the MongoDB data set. Documents move as a result
   of operations that increase the size of the document beyond their
   allocated record size.

.. _server-status-replnetworkqueue:
.. _server-status-repl-network-queue:

.. serverstatus:: metrics.repl

   :serverstatus:`metrics.repl` holds an embedded document that
   reports metrics related to the replication process.
   :serverstatus:`metrics.repl` document appears on all
   :program:`mongod` instances, even those that aren't members of
   :term:`replica sets <replica set>`.

.. serverstatus:: metrics.repl.apply

   :serverstatus:`metrics.repl.apply` holds an embedded document that
   reports on the application of operations from the replication
   :term:`oplog`.

.. serverstatus:: metrics.repl.apply.batches

   :serverstatus:`metrics.repl.apply.batches` reports on the
   oplog application process on :term:`secondaries <secondary>`
   members of replica sets. See
   :ref:`replica-set-internals-multi-threaded-replication` for more
   information on the oplog application processes

.. serverstatus:: metrics.repl.apply.batches.num

   :serverstatus:`metrics.repl.apply.batches.num` reports the
   total number of batches applied across all databases.

.. serverstatus:: metrics.repl.apply.batches.totalMillis

   :serverstatus:`metrics.repl.apply.batches.totalMillis` reports
   the total amount of time the :program:`mongod` has spent applying
   operations from the oplog.

.. serverstatus:: metrics.repl.apply.ops

   :serverstatus:`metrics.repl.apply.ops` reports the total
   number of :term:`oplog` operations applied.

.. serverstatus:: metrics.repl.buffer

   MongoDB buffers oplog operations from the replication sync source
   buffer before applying oplog entries in a
   batch. :serverstatus:`metrics.repl.buffer` provides a way to
   track the oplog buffer. See
   :ref:`replica-set-internals-multi-threaded-replication` for more
   information on the oplog application process.

.. serverstatus:: metrics.repl.buffer.count

   :serverstatus:`metrics.repl.buffer.count` reports the current
   number of operations in the oplog buffer.

.. serverstatus:: metrics.repl.buffer.maxSizeBytes

   :serverstatus:`metrics.repl.buffer.maxSizeBytes` reports the
   maximum size of the buffer. This value is a constant setting in
   the :program:`mongod`, and is not configurable.

.. serverstatus:: metrics.repl.buffer.sizeBytes

   :serverstatus:`metrics.repl.buffer.sizeBytes` reports the current
   size of the contents of the oplog buffer.

.. serverstatus:: metrics.repl.network

   :serverstatus:`metrics.repl.network` reports network use by
   the replication process.

.. serverstatus:: metrics.repl.network.bytes

   :serverstatus:`metrics.repl.network.bytes` reports the total
   amount of data read from the replication sync source.

.. serverstatus:: metrics.repl.network.getmores

   :serverstatus:`metrics.repl.network.getmores` reports on the
   ``getmore`` operations, which are requests for additional results
   from the oplog :term:`cursor` as part of the oplog replication
   process.

   .. TODO move the documentation of getmore into some central place

.. serverstatus:: metrics.repl.network.getmores.num

   :serverstatus:`metrics.repl.network.getmores.num` reports the
   total number of ``getmore`` operations, which are operations that
   request an additional set of operations from the replication sync
   source.

.. serverstatus:: metrics.repl.network.getmores.totalMillis

   :serverstatus:`metrics.repl.network.getmores.totalMillis`
   reports the total amount of time required to collect data from
   ``getmore`` operations.

   .. note::

      This number can be quite large, as MongoDB will wait for more
      data even if the ``getmore`` operation does not initial return
      data.

.. serverstatus:: metrics.repl.network.ops

   :serverstatus:`metrics.repl.network.ops` reports the total
   number of operations read from the replication source.

.. serverstatus:: metrics.repl.network.readersCreated

   :serverstatus:`metrics.repl.network.readersCreated` reports
   the total number of oplog query processes created. MongoDB will
   create a new oplog query any time an error occurs in the
   connection, including a timeout, or a network
   operation. Furthermore,
   :serverstatus:`metrics.repl.network.readersCreated` will
   increment every time MongoDB selects a new source for replication.

.. serverstatus:: metrics.repl.oplog

   :serverstatus:`metrics.repl.oplog` is a document that reports
   on the size and use of the :term:`oplog` by this :program:`mongod`
   instance.

.. serverstatus:: metrics.repl.oplog.insert

   :serverstatus:`metrics.repl.oplog.insert` is a document that
   reports insert operations into the :term:`oplog`.

.. serverstatus:: metrics.repl.oplog.insert.num

   :serverstatus:`metrics.repl.oplog.insert.num` reports the total
   number of items inserted into the :term:`oplog`.

.. serverstatus:: metrics.repl.oplog.insert.totalMillis

   :serverstatus:`metrics.repl.oplog.insert.totalMillis` reports the
   total amount of time spent for the :program:`mongod` to insert data
   into the :term:`oplog`.

.. serverstatus:: metrics.repl.oplog.insertBytes

   :serverstatus:`metrics.repl.oplog.insertBytes` the total size
   of documents inserted into the oplog.

.. serverstatus:: metrics.repl.preload

   :serverstatus:`metrics.repl.preload` reports on the
   "pre-fetch" stage, where MongoDB loads documents and indexes into
   RAM to improve replication throughput.

   See :ref:`replica-set-internals-multi-threaded-replication` for
   more information about the *pre-fetch* stage of the replication
   process.

.. serverstatus:: metrics.repl.preload.docs

   :serverstatus:`metrics.repl.preload.docs` is an embedded document
   that reports on the documents loaded into memory during the
   *pre-fetch* stage.

.. serverstatus:: metrics.repl.preload.docs.num

   :serverstatus:`metrics.repl.preload.docs.num` reports the
   total number of documents loaded during the *pre-fetch* stage of
   replication.

.. serverstatus:: metrics.repl.preload.docs.totalMillis

   :serverstatus:`metrics.repl.preload.docs.totalMillis` reports
   the total amount of time spent loading documents as part of
   the *pre-fetch* stage of replication.

.. serverstatus:: metrics.repl.preload.indexes

   :serverstatus:`metrics.repl.preload.indexes` is an
   embedded document that reports on the index items loaded into
   memory during the *pre-fetch* stage of replication.

   See :ref:`replica-set-internals-multi-threaded-replication` for
   more information about the *pre-fetch* stage of replication.

.. serverstatus:: metrics.repl.preload.indexes.num

   :serverstatus:`metrics.repl.preload.indexes.num` reports the
   total number of index entries loaded by members before updating
   documents as part of the *pre-fetch* stage of replication.

.. serverstatus:: metrics.repl.preload.indexes.totalMillis

   :serverstatus:`metrics.repl.preload.indexes.totalMillis`
   reports the total amount of time spent loading index entries as
   part of the *pre-fetch* stage of replication.

.. serverstatus:: metrics.storage.freelist.search.bucketExhausted

   :serverstatus:`metrics.storage.freelist.search.bucketExhausted` reports the
   number of times that :program:`mongod` has checked the free list without finding
   a suitably large record allocation.

.. serverstatus:: metrics.storage.freelist.search.requests

   :serverstatus:`metrics.storage.freelist.search.requests` reports the
   number of times :program:`mongod` has searched for available record
   allocations.

.. serverstatus:: metrics.storage.freelist.search.scanned

   :serverstatus:`metrics.storage.freelist.search.scanned` reports the number of
   available record allocations :program:`mongod` has searched.

.. serverstatus:: metrics.ttl

   :serverstatus:`metrics.ttl` is an embedded document that reports on
   the operation of the resource use of the :doc:`ttl index
   </tutorial/expire-data/>` process.

.. serverstatus:: metrics.ttl.deletedDocuments

   :serverstatus:`metrics.ttl.deletedDocuments` reports the
   total number of documents deleted from collections with a :doc:`ttl
   index </tutorial/expire-data/>`.

.. serverstatus:: metrics.ttl.passes

   :serverstatus:`metrics.ttl.passes` reports the number of
   times the background process removes documents from collections with a
   :doc:`ttl index </tutorial/expire-data/>`.

.. _server-status-metrics-cursor:

.. serverstatus:: metrics.cursor

   .. versionadded:: 2.6

   The :serverstatus:`metrics.cursor` is a document that contains
   data regarding cursor state and use.

.. serverstatus:: metrics.cursor.timedOut

   .. versionadded:: 2.6

   :serverstatus:`metrics.cursor.timedOut` provides the total
   number of cursors that have timed out since the server process
   started. If this number is large or growing at a regular rate, this
   may indicate an application error.

.. serverstatus:: metrics.cursor.open

   .. versionadded:: 2.6

   The :serverstatus:`metrics.cursor.open` is an embedded
   document that contains data regarding open cursors.

.. serverstatus:: metrics.cursor.open.noTimeout

   .. versionadded:: 2.6

   :serverstatus:`metrics.cursor.open.noTimeout` provides the
   number of open cursors with the option
   :data:`DBQuery.Option.noTimeout` set to prevent timeout after a
   period of inactivity.

.. serverstatus:: metrics.cursor.open.pinned

   .. versionadded:: 2.6

   :serverstatus:`metrics.cursor.open.pinned` provides the number
   of "pinned" open cursors.

.. serverstatus:: metrics.cursor.open.total

   .. versionadded:: 2.6

   :serverstatus:`metrics.cursor.open.total` provides the number
   of cursors that MongoDB is maintaining for clients. Because MongoDB
   exhausts unused cursors, typically this value small or zero.
   However, if there is a queue, stale tailable cursors, or a large
   number of operations this value may rise.

.. serverstatus:: metrics.cursor.open.singleTarget

   .. versionadded:: 3.0.0

   :serverstatus:`metrics.cursor.open.singleTarget`
   reflect the total number of cursors that only target a
   *single* shard. Only :program:`mongos` instances report
   :serverstatus:`metrics.cursor.open.singleTarget`
   values.

.. serverstatus:: metrics.cursor.open.multiTarget

   .. versionadded:: 3.0.0

   :serverstatus:`metrics.cursor.open.multiTarget` reflect the
   total number of cursors that only target *more than one*
   shard. Only :program:`mongos` instances report
   :serverstatus:`metrics.cursor.open.multiTarget` values.

.. _server-status-wiredTiger:

wiredTiger
~~~~~~~~~~

.. versionadded:: 3.0.0

.. note::

   ``wiredTiger`` information only appears for :program:`mongod`
   instances that use the WiredTiger storage engine. Some of the
   statistics, such as :serverstatus:`wiredTiger.LSM`, roll up for
   the server.

For an example of the ``wiredTiger`` output, see the :ref:`wiredTiger
section <server-status-example-wiredTiger>` of the
:doc:`/reference/server-status` page.

.. serverstatus:: wiredTiger.uri

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.uri` holds a string. For internal use
   by MongoDB.

.. serverstatus:: wiredTiger.LSM

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.LSM` returns statistics on the LSM
   (Log-Structured Merge) tree. The values reflects the statistics for
   all LSM trees used in this server.

.. serverstatus:: wiredTiger.async

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.async` returns statistics related to
   the asynchronous operations API. This is unused by MongoDB.

.. serverstatus:: wiredTiger.block-manager

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.block-manager` returns statistics on
   the block manager operations.

.. serverstatus:: wiredTiger.cache

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.cache` returns statistics on the
   cache and page evictions from the cache.

   The following describes some of the key
   :serverstatus:`wiredTiger.cache` statistics:

   .. serverstatus:: wiredTiger.cache.maximum bytes configured

      Maximum cache size.

   .. serverstatus:: wiredTiger.cache.bytes currently in the cache

      Size in byte of the data currently in cache. This value should
      not be greater than the ``maximum bytes configured`` value.

   .. serverstatus:: wiredTiger.cache.unmodified pages evicted

      Main statistics for page eviction.

   .. serverstatus:: wiredTiger.cache.tracked dirty bytes in the cache

      Size in bytes of the dirty data in the cache. This value should
      be less than the ``bytes currently in the cache`` value.

   .. serverstatus:: wiredTiger.cache.pages read into cache

      Number of pages read into the cache.
      :serverstatus:`wiredTiger.cache.pages read into cache` with
      the :serverstatus:`wiredTiger.cache.pages written from
      cache` can provide an overview of the I/O activity.

   .. serverstatus:: wiredTiger.cache.pages written from cache
      
      Number of pages written from the cache.
      :serverstatus:`wiredTiger.cache.pages written from cache`
      with the :serverstatus:`wiredTiger.cache.pages read into
      cache` can provide an overview of the I/O activity.

   .. include:: /includes/extracts/wt-cache-setting.rst

.. serverstatus:: wiredTiger.connection

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.connection` returns statistics
   related to WiredTiger connections.

.. serverstatus:: wiredTiger.cursor

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.cursor` returns statistics on
   WiredTiger cursor.

.. serverstatus:: wiredTiger.data-handle

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.data-handle` returns statistics on
   the data handles and sweeps.

.. serverstatus:: wiredTiger.log

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.log` returns statistics on
   WiredTiger's write ahead log.

   .. seealso:: :ref:`journaling-wiredTiger`

.. serverstatus:: wiredTiger.reconciliation

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.reconciliation` returns statistics on
   the reconciliation process.

.. serverstatus:: wiredTiger.session

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.session` returns the open cursor
   count and open session count for the session.

.. serverstatus:: wiredTiger.thread-yield

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.thread-yield` returns statistics on
   yields during page acquisitions.

.. serverstatus:: wiredTiger.transaction

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.transactions` returns statistics on
   transaction checkpoints and operations.

   .. serverstatus:: wiredTiger.transaction.transaction checkpoint most recent time (msecs)

      Amount of time, in milliseconds, to create the most recent
      checkpoint. An increase in this value under stead write load may
      indicate saturation on the I/O subsystem.
   
.. serverstatus:: wiredTiger.concurrentTransactions

   .. versionadded:: 3.0.0

   :serverstatus:`wiredTiger.concurrentTransactions` returns
   information on the number of concurrent of read and write
   transactions allowed into the WiredTiger storage engine. These
   settings are MongoDB-specific.

   To change the settings for concurrent
   reads and write transactions, see
   :parameter:`wiredTigerConcurrentReadTransactions` and
   :parameter:`wiredTigerConcurrentWriteTransactions`.
