================
renameCollection
================

.. default-domain:: mongodb

.. dbcommand:: renameCollection( source, to: target[, dropTarget=>true])

   The :dbcommand:`renameCollection` command changes the name of an 
   existing collection. Use the following form to rename the collection
   named ``source`` to ``target``:

   .. code-block:: javascript

      { renameCollection: "source", to: "target" }

   You must run this command against the admin database. and thus
   requires you to specify the complete namespace (i.e., database name
   and collection name.)

   :var source:
   
      Specifies the name of the collection to be renamed.
      
   :param string to: 
   
      Specifies the new name of the collection.
      
   :param dropTarget: If ``true``, :program:`mongod` will drop the `target` of :dbcommand:`renameCollection` prior to renaming the collection.
   :type dropTarget: true or false
   
   :raises 10027:
   
      Exception 10027 is thrown if the ``target`` collection exists
      and ``dropTarget`` is either ``false`` or unspecified.

   .. warning::

      :dbcommand:`renameCollection` will fail if 
      `target` is the name of an existing collection
      and you do not specify ``dropTarget: true``.

   The shell helper :method:`renameCollection()` provides a
   simpler interface for this functionality. The following is
   equivalent to the previous example:

   .. code-block:: javascript

      db.things.renameCollection( "events" )

   :dbcommand:`renameCollection` operates by changing the metadata
   associated with a given collection. The duration of the command is
   constant and not related to the size of the collection or the
   indexes; however, the operation will invalidate open cursors which
   will interrupt queries that are currently returning data.

   You may safely use :dbcommand:`renameCollection` in production
   environments.

   .. warning:: You cannot use :dbcommand:`renameCollection` with
      sharded collections.
