====
$nor
====

.. default-domain:: mongodb

.. operator:: $nor

   *Syntax*: ``{ $nor: [ { <expression1> }, { <expression2> }, ...  { <expressionN> } ] }`` 

   :operator:`$nor` performs a logical ``NOR`` operation on the specified
   array of ``<expressions>`` and selects the documents that
   fail all the ``<expressions>`` in the array.
 
   :operator:`$nor` requires at least two ``<expresions>``. In the above
   syntax, ``N`` must be greater than or equal to 2.
      
   **Example**: Select all documents in ``inventory`` where:  
      - ``price`` does *not* equal ``1.99`` **and** 
      - ``qty`` is *not* less than ``20`` **and** 
      - ``sale`` is *not* ``true``
		 
   including those documents that do not contain these field(s).   
   
   .. code-block:: javascript

      db.inventory.find( { $nor: [ { price: 1.99 }, { qty: { $lt: 20 } }, { sale: true } ] } )

   **Example**: Update a single document in ``inventory`` where:
      - ``price`` does *not* equal ``1.99`` **and** 
      - ``qty`` is *not* less than ``20``.
        
   This may be a document that does not contain these field(s). 

   .. code-block:: javascript
 
      db.inventory.update( { $nor: [ { price: 1.99 }, { qty: 20 } ] }, { $set: {qty: 15} } )

   A document fails *most* Boolean expressions if the document is
   missing the field in the expression. The exception is the expression
   ``{ missingField: { $exists: false } }``. The following query
	  
   .. code-block:: javascript

      db.inventory.find( { $nor: [ { price: 1.99 }, { sale: true } ]  } )
		 
   will return all documents that:  
      - have ``price`` *not* equal to ``1.99`` *and* ``sale`` *is not* ``true`` **or**
      - have ``price`` *not* equal to ``1.99`` *and* does *not* contain the ``sale`` field  **or**
      - does *not* contain the ``price`` field *and* ``sale`` *is not* ``true`` **or**
      - does *not* contain the ``price`` field *and* does *not* contain the ``sale`` field
		 
   whereas
	
   .. code-block:: javascript

      db.inventory.find( { $nor: [ { price: 1.99 }, { price: { $exists: false } }, 
                                   { sale: true }, { sale: { $exists: false } } ] } )

   will return all documents that: 
      - have ``price`` *not* equal to ``1.99`` *and* ``sale`` *is not* ``true``.
      
   See also :method:`find() <db.collection.find()>`, :method:`update()
   <db.collection.update()>`, :operator:`$set`, :operator:`$exists`.
