============
$setOnInsert
============

.. default-domain:: mongodb

.. operator:: $setOnInsert

   .. versionadded:: 2.4

   The :operator:`$setOnInsert` operator assigns values to fields
   during an :method:`upsert <db.collection.update()>` **only** when
   the :method:`upsert <db.collection.update()>` performs an insert.

   .. code-block:: javascript

      db.collection.update( <query>,
                            { $setOnInsert: { <field1>: <value1>, ... } },
                            { upsert: true }
                          )
   .. example::

      A collection named ``products`` contains no documents.

      Then, the following :method:`upsert <db.collection.update()>`
      operation performs an insert and applies the
      :operator:`$setOnInsert` to set the field ``defaultQty`` to
      ``100``:

      .. code-block:: javascript

         db.products.update(
                             { _id: 1 },
                             { $setOnInsert: { defaultQty: 100 } },
                             { upsert: true }
                           )

      The ``products`` collection contains the newly-inserted document:

      .. code-block:: javascript

         { "_id" : 1, "defaultQty" : 100 }

   .. note::

      The :operator:`$setOnInsert` operator performs no operation for
      :method:`upserts <db.collection.update()>` that only perform an
      update and for :method:`updates <db.collection.update()>` where
      ``upsert`` is not specified or is set to ``false``.

   .. example::

      A collection named ``products`` has the following document:

      .. code-block:: javascript

         { "_id" : 1, "defaultQty" : 100 }

      The following :method:`upsert <db.collection.update()>` operation
      performs an update:

      .. code-block:: javascript

         db.products.update(
                             { _id: 1 },
                             { $setOnInsert: { defaultQty: 500, inStock: true },
                               $set: { item: "apple" } },
                             { upsert: true }
                           )

      Because the :method:`upsert <db.collection.update()>` performs an
      update only, the upsert ignores the :operator:`$setOnInsert`
      operation and only applies the :operator:`$set` operation.
      
      The ``products`` collection contains the following modified
      document:

      .. code-block:: javascript

         { "_id" : 1, "defaultQty" : 100, "item" : "apple" }
