===
$in
===

.. default-domain:: mongodb

.. operator:: $in

   *Syntax*: ``{ field: { $in: [<value1>, <value2>, ... <valueN> ] } }``

   :operator:`$in` selects the documents where the ``field`` equals any
   value in the specified array (e.g. ``<value1>``, <value2>``, etc.)
   Consider the following example: 
   
   .. code-block:: javascript

      db.inventory.find( { qty: { $in: [ 5, 15 ] } } )

   This query will select to select all documents in ``inventory``
   where ``qty`` is either ``5`` or ``15``.  Although you can express
   this query using the :operator:`$or` operator, prefer
   :operator:`$in` in favor of :operator:`$or` when performing
   equality checks on a single field.
   
   If the field holds an array, then the following expression is true
   *if* any element specified with the :operator:`$in` expression is
   in the array.

   .. code-block:: javascript
   
      { field: { $in: [ array ] } }

   Consider the following example:
   
   .. code-block:: javascript

      db.inventory.update( { tags: { $in: ["appliances", "school"] } }, { $set: { sale:true } } )
			
   This :method:`update() <db.collection.update()>` operation will set
   the value of ``sale`` in the ``inventory`` collection where at
   least one element of the ``tags`` array matches an element in the
   array ``["appliances", "school"]``.
   
   .. seealso:: 
   
      method:`find() <db.collection.find()>`, :method:`update()
      <db.collection.update()>`, :operator:`$or`, :operator:`$set`.
