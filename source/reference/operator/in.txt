===
$in
===

.. default-domain:: mongodb

.. operator:: $in

   *Syntax*: ``{ field: { $in: [<value1>, <value2>, ... <valueN> ] } }``

   :operator:`$in` selects the documents where the ``field`` equals any
   value in the specified ``array``.
   
   For example, you would query: 
   
   .. code-block:: javascript

      db.inventory.find( { qty: { $in: [ 5, 15 ] } } )

   to select all documents in ``inventory`` where ``qty`` is either ``5`` or ``15``.
   
   Although you could write the above query using the :operator:`$or`
   operator, :operator:`$in` is preferred over :operator:`$or` when
   performing equality checks for the same.
   
   If the ``field`` is an array, then ``{ field: { $in: array } }``
   is true *if* at least one element of the ``field`` is found in the ``array``.

   For example, the query:
   
   .. code-block:: javascript

      db.inventory.update( { tags: { $in: ["appliances", "school"] } }, { $set: { sale:true } } )
			
   will update a single document in ``inventory`` where at least one
   element of the ``tags`` array matches an element in ``["appliances",
   "school"]``.
   
   .. seealso:: 
   
      method:`find() <db.collection.find()>`, :method:`update()
      <db.collection.update()>`, :operator:`$or`, :operator:`$set`.
