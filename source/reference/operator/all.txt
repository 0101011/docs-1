====
$all
====

.. default-domain:: mongodb

.. operator:: $all

   *Syntax*: ``{ field: { $all: [ < value1 > , < value2 > ... ] }``
   
   :operator:`$all` selects the documents where the ``field`` is an
   array and contains all the ``<values>`` in the array.  
  
   For example, you would query:
   	
   .. code-block:: javascript
   		
      db.inventory.find( { tags: { $all: [ "appliances", "school" ] } } )

   to select all documents in ``inventory`` where ``tags`` contains all
   the elements in the array ``[ "appliances", "school" ]``.  So, in the case of:
   
   - a first document with ``tags`` equal to ``[ "school", "book", "bag",
     "headphone", "appliances" ]`` *and* 
   - a second document with ``tags`` equal to ``[ "appliances",
     "school" ]``, 
     
   the above query will return both documents.

   When used with indexed ``fields``, :operator:`$all` does lookups on
   the first element of the index. In the example, ``tags`` is
   indexed.  Then, :operator:`$all` looks up the documents  
   
   MongoDB  :operator:`$all` on a ``field`` that is indexed, 

   Although :operator:`$all` is most meaningful when queried against an array
   ``field``, you can use :operator:`$all`  to query against a non-array ``field``.
   
   For example, you could query:
   
   .. code-block:: javascript
   		
      db.inventory.find( { qty: { $all: [ 50 ] } } )
   
   to select all documents in ``inventory`` where the integer ``qty``
   equals ``50``; **however** you should, instead, use:

   .. code-block:: javascript
   		
      db.inventory.find( { qty: 50 } )
    
   .. note::

      In most cases, MongoDB does not treat arrays as sets. This
      operator provides a notable exception to this general approach.
      
   .. seealso:: 
      :method:`find() <db.collection.find()>`, :method:`update()
      <db.collection.update()>`, :operator:`$set`.
