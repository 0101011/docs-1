====================
$group (aggregation)
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. pipeline:: $group

   Groups documents together for the purpose of calculating aggregate
   values based on a collection of documents. In practice,
   :pipeline:`$group` often supports tasks such as average page views
   for each page in a website on a daily basis.

   .. important:: The output of :pipeline:`$group` is not ordered.

   The output of :pipeline:`$group` depends on how you define groups.
   Begin by specifying an identifier (i.e. an ``_id`` field) for the
   group you're creating with this pipeline. For this ``_id`` field,
   you can specify various expressions, including a single field from
   the documents in the pipeline, a computed value from a previous
   stage, a document that consists of multiple fields, and other valid
   expressions, such as constant or subdocument fields. You can use
   :pipeline:`$project` operators in expressions for the ``_id`` field.

   The following example of an ``_id`` field specifies a document that
   consists of multiple fields:

     .. code-block:: javascript

        { _id : { author: '$author', pageViews: '$pageViews', posted: '$posted' } }

   Every :pipeline:`$group` expression **must** specify an ``_id``
   field. In addition to the ``_id`` field, :pipeline:`$group`
   expression can include computed fields. These other fields must use
   one of the following :term:`accumulators <accumulator>`:

   - :group:`$addToSet`
   - :group:`$first`
   - :group:`$last`
   - :group:`$max`
   - :group:`$min`
   - :group:`$avg`
   - :group:`$push`
   - :group:`$sum`

   With the exception of the ``_id`` field, :pipeline:`$group` cannot
   output nested documents.

.. tip::

   Use :pipeline:`$project` as needed to rename the grouped field
   after a :pipeline:`$group` operation.

.. warning::

   The aggregation system currently stores :pipeline:`$group` operations in
   memory, which may cause problems when processing a larger number
   of groups.

Example
-------

Consider the following example:

.. code-block:: javascript

   db.article.aggregate(
       { $group : {
           _id : "$author",
           docsPerAuthor : { $sum : 1 },
           viewsPerAuthor : { $sum : "$pageViews" }
       }}
   );

This aggregation pipeline groups by the ``author`` field and computes
two fields, the first ``docsPerAuthor`` is a counter field that
increments by one for each document with a given author field using
the :group:`$sum` function. The ``viewsPerAuthor`` field is the sum of
all of the ``pageViews`` fields in the documents for each group.
