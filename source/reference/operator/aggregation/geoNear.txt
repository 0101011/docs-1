======================
$geoNear (aggregation)
======================

.. default-domain:: mongodb

Definition
----------

.. pipeline:: $geoNear

   .. versionadded:: 2.4

   :pipeline:`$geoNear` returns documents in order of nearest to
   farthest from a specified point and pass the documents
   through the aggregation :term:`pipeline`.

   .. important::

      - You can only use :pipeline:`$geoNear` as the first stage of a
        pipeline.

      - You must include the ``distanceField`` option. The
        ``distanceField`` option specifies the field that will contain
        the calculated distance.

      - The collection must have a :doc:`geospatial index
        </core/geospatial-indexes>`.

      - The :pipeline:`$geoNear` requires that a collection have *at most*
        only one :doc:`2d index </core/2d>` and/or only one
        :doc:`2dsphere index </core/2dsphere>`.

   The :pipeline:`$geoNear` operator accepts a :term:`document` that
   contains the following fields. Specify all distances in the same
   unites as the document coordinate system:

   .. include:: /reference/operator/aggregation/geoNear-field.rst
- If using a :doc:`2dsphere index </core/2dsphere>`, you must specify
  ``spherical: true``.

   .. note::

      The options for :pipeline:`$geoNear` are similar to the
      :dbcommand:`geoNear` command with the following exceptions:

      - ``distanceField`` is a mandatory field for the
        :pipeline:`$geoNear` pipeline operator; the option does not
        exist in the :dbcommand:`geoNear` command.

      - ``includeLocs`` accepts a ``string`` in the
        :pipeline:`$geoNear` pipeline operator and a ``boolean`` in the
        :dbcommand:`geoNear` command.

Example
-------

Consider a collection ``places`` that has a ``2dsphere`` index. The following
aggregation finds at most ``5`` unique documents with a location at
most .010 from the center ``[40.723, -73.99]`` and have ``type`` equal
to ``public``:

.. code-block:: javascript

   db.places.aggregate([
       {
         $geoNear: {
            near : { type : "Point", coordinates : [40.723, -73.99] },
            distanceField: "dist.calculated",
            maxDistance: 0.010,
            query: { type: "public" },
            includeLocs: "dist.location",
            num: 5,
            spherical: true
         }
       }
   ])

The aggregation returns the following:

.. code-block:: javascript

   {
     "result" : [
         {
           "_id" : 8,
           "name" : "Sara D. Roosevelt Park",
           "type" : "public",
           "location" : {
              "type" : "MultiPoint",
              "coordinates" : [ [ 40.723,-73.991 ], [ 40.723, -73.99 ], [ 40.715, -73.994 ], [ 40.715, -73.994 ] ]
           },
           "dist" : {
              "calculated" : 0,
              "location" : {
                 "type" : "MultiPoint",
                 "coordinates" : [ [ 40.723, -73.991 ], [ 40.723, -73.99 ], [ 40.715, -73.994 ], [ 40.715, -73.994 ] ]
              }
            }
         }
     ],
     "ok" : 1
   }

The matching document in the ``result`` field contains two new fields:

- ``dist.calculated`` field that contains the calculated distance, and

- ``dist.location`` field that contains the location used in the
  calculation.
