===========
$uniqueDocs
===========

.. default-domain:: mongodb

.. operator:: $uniqueDocs

   .. versionadded:: 2.0

   For :term:`geospatial` queries, MongoDB may reuturn a single
   document more than once for a single query, because geospatial
   indexes may include multiple coordinate pairs in a single
   document, and therefore return the same document more than once.

   The :operator:`$uniqueDocs` operator inverts the default behavior
   of these queres. By default, :dbcommand:`geoNear` will always
   return multiple instances of the same document, while the
   :operator:`$within` operator will *never* return the same document
   more than once. Consider the following:

   - For :dbcommand:`geoNear` queries, the default
     :operator:`$uniqueDocs` setting is ``false``. If you specify a
     value of ``true`` for :operator:`uniqueDocs`, MongoDB will
     return multiple instances of a single document.

   - For :operator:`$within` queries, the default
     :operator:`$uniqueDocs` setting is ``true``. If you specify a
     value of ``false`` for :operator:`uniqueDocs`, MongoDB will
     return multiple instances of a single document.

   .. example::

      Given a document in the following form:

      .. code-block:: javascript

         { addresses: [ { name: "Home", loc:[55.5,42.3]}, {name:"Work",loc:[32.3,44.2]}]}

      The following queries would return the same document multiple
      times:

      .. code-block:: javascript

         > db.runCommand( { geoNear: "geo", near: [55,44], uniqueDocs: false })

         > db.geoExample.find( {"addresses.loc":{"$within": {"$box": [ [0,0],[100,100] ], $uniqueDocs:false } }}).pretty()

      The following queries would return each matching document, only
      once:

      .. code-block:: javascript

         > db.runCommand( { geoNear: "geo", near: [55,44], uniqueDocs: true })

         > db.geo.find( {"address.loc":{"$within": {"$box": [ [0,0],[100,100] ], $uniqueDocs:true } }}).pretty()

.. 
   The following example commands in the :program:`mongo` shell
   illustrate this feature:

   .. code-block:: javascript

      > db.geoExample.insert( )
      > db.geoExample.ensureIndex({"addresses.loc":"2d"})

      /* this will return the entry once - default for $within */
      > db.geoExample.find( {"addresses.loc":{"$within": {"$box": [ [0,0],[100,100] ] } }})
      /* this will return the entry twice */
      > db.geoExample.find( {"addresses.loc":{"$within": {"$box": [ [0,0],[100,100] ], $uniqueDocs:false } }}).pretty()


   .. Above code output:

         .. code-block:: javascript

            > db.geoExample.find( {"addresses.loc":{"$within": {"$box": [ [0,0],[100,100] ], $uniqueDocs:false } }}).pretty()
            {
               "_id" : ObjectId("504900870826ac3f09e25db6"),
               "addresses" : [
                  {
                     "name" : "Home",
                     "loc" : [
                        55.5,
                        42.3
                     ]
                  },
                  {
                     "name" : "Work",
                     "loc" : [
                        32.3,
                        44.2
                     ]
                  }
               ]
            }
            {
               "_id" : ObjectId("504900870826ac3f09e25db6"),
               "addresses" : [
                  {
                     "name" : "Home",
                     "loc" : [
                        55.5,
                        42.3
                     ]
                  },
                  {
                     "name" : "Work",
                     "loc" : [
                        32.3,
                        44.2
                     ]
                  }
               ]
            }

   You cannot specify :operator:`$uniqueDocs` with :operator:`$near`
   or haystack queries.

   .. include:: /includes/note-geospatial-index-must-exist.rst
