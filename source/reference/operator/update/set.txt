====
$set
====

.. default-domain:: mongodb

.. update:: $set

   The :update:`$set` operator replaces the value of a field to the
   specified value. If the field does not exist, the :update:`$set`
   operator will add the field with the specified value.
   
   The :update:`$set` operator expression has the following form:

   .. code-block:: javascript

      { $set: { <field1>: <value1>, ... } }

   To access fields in embedded documents, use the :term:`dot notation`.

Examples
--------

By default, :method:`db.collection.update()` method updates the first
document that matches the update condition. Use the ``multi`` option to
update all matching documents.

Update a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

Consider a collection ``products`` with the following document:

.. code-block:: javascript

   { _id: 100, sku: "abc123", quantity: 250, instock: false, details: { model: "14Q2", make: "xyz" } }

The following operation uses the :update:`$set` operator to update the
value of the ``quantity`` field to ``500``, ``instock`` field to
``true``, and ``make`` field in the ``details`` document to ``"ZYX"``
for the *first* document where the field ``sku`` has the value
``"abc123"``:

.. code-block:: javascript

   db.products.update(
       { sku: "abc123" },
       { $set: { quantity: 500, instock: true, "details.make": "ZYX" } }
   )

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

To update all matching documents in the collection, specify ``multi:
true`` option in the :method:`~db.collection.update()` method, as in
the following example which sets the value of the field ``instock``
to ``true`` for all documents in the ``products`` collection where
the ``quantity`` field is greater than (i.e. :query:`$gt`) ``0`` :

.. code-block:: javascript

   db.products.update( 
      { quantity: { $gt: 0 } },
      { $set: { instock: true } },
      { multi: true }
   )

For more examples, see :method:`~db.collection.update()`.
