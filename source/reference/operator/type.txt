=====
$type
=====

.. default-domain:: mongodb

.. operator:: $type

   The :operator:`$type` operator matches field values with a specific data
   type. :operator:`$type` operator allows you to narrow results based on any
   :term:`BSON` type. For example:

   .. code-block:: javascript

        db.collection.find( { field: { $type: 2 } } );

   returns all documents in ``collection`` where the value of
   ``field`` is a string. Consider the following chart for the
   available types and their corresponding numbers.

   =======================  ==========
   **Type**                 **Number**
   -----------------------  ----------
   Double                       1
   String                       2
   Object                       3
   Array                        4
   Binary data                  5
   Object id                    7
   Boolean                      8
   Date                         9
   Null                        10
   Regular Expression          11
   JavaScript                  13
   Symbol                      14
   JavaScript (with scope)     15
   32-bit integer              16
   Timestamp                   17
   64-bit integer              18
   Min key                    255
   Max key                    127
   =======================  ==========

   ``MinKey`` and ``MaxKey`` compare less than and greater than all
   other possible :term:`BSON` element values, respectively, and exist
   primarily for internal use.

   .. note::

      Queries for ``MaxKey`` using the :operator:`$type` work as
      expected; however, to query for ``MinKey`` you must specify
      ``-1`` as in the following example:

      .. code-block:: javascript

         db.collection.find( { field: { $type: -1 } } )

      Query statements cannot use :operator:`$type` to test arrays
      (i.e. ``4``.) Instead, use the :operator:`$where` operator that
      resembles the following:

      .. code-block:: javascript

         db.collection.find( { field: { $where : "Array.isArray(this.field)" } } )

      See the :issue:`SERVER-1475` for more information about the
      array type.

   .. example::

      Consider the following example operation sequence that
      demonstrates both type comparison *and* the special ``MinKey``
      and ``MaxKey`` values:

      .. code-block:: javascript

         db.test.insert( {x : 3});
         db.test.insert( {x : 2.9} );
         db.test.insert( {x : new Date()} );
         db.test.insert( {x : true } );
         db.test.insert( {x : MaxKey } )
         db.test.insert( {x : MinKey } )

         db.test.find().sort({x:1})
         { "_id" : ObjectId("4b04094b7c65b846e2090112"), "x" : { $minKey : 1 } }
         { "_id" : ObjectId("4b03155dce8de6586fb002c7"), "x" : 2.9 }
         { "_id" : ObjectId("4b03154cce8de6586fb002c6"), "x" : 3 }
         { "_id" : ObjectId("4b031566ce8de6586fb002c9"), "x" : true }
         { "_id" : ObjectId("4b031563ce8de6586fb002c8"), "x" : "Tue Jul 25 2012 18:42:03 GMT-0500 (EST)" }
         { "_id" : ObjectId("4b0409487c65b846e2090111"), "x" : { $maxKey : 1 } }

      To query for the minimum value of a :term:`shard key` of a
      :term:`shard cluster`, use the following operation when
      connected to the :program:`mongos`:

      .. code-block:: javascript

         use config
         db.chunks.find( { "min.shardKey": { $type: -1 } } )

   .. include:: /includes/warning-mixing-types.rst
