==========
$geoWithin
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. query:: $geoWithin

   .. versionadded:: 2.4
      :query:`$geoWithin` replaces :query:`$within` which is
      deprecated.

   Selects documents with geospatial data that exists entirely
   within a specified shape. When determining inclusion, MongoDB
   considers the border of a shape to be part of the shape, subject to
   the precision of floating point numbers.

   :query:`$geoWithin` does not require a geospatial index. However, a
   geospatial index will improve query performance.
   Both :doc:`2dsphere </core/2dsphere>` and :doc:`2d </core/2d>`
   geospatial indexes support :query:`$geoWithin`.

   The specified shape can be either a GeoJSON :ref:`geojson-polygon`
   (either single-ringed or multi-ringed), a GeoJSON
   :ref:`geojson-multipolygon`, or a shape defined by legacy coordinate
   pairs.

   To specify a GeoJSON :ref:`geojson-polygon` (either single-ringed or
   multi-ringed) or :ref:`geojson-multipolygon`, :query:`$geoWithin`
   uses the :query:`$geometry` operator to specify the shape and has
   the following form:

   .. code-block:: javascript

      {
         <location field>: {
            $geoWithin: {
               $geometry: {
                  type: <"Polygon" or "MultiPolygon"> ,
                  coordinates: [ <coordinates> ]
               }
            }
         }
      }

   .. important::
      If you use longitude and latitude, specify coordinates in order
      of ``longitude, latitude``.

   If querying for inclusion in a shape defined by legacy coordinate
   pairs on a plane, use the following syntax:

   .. code-block:: javascript

      {
         <location field>: {
            $geoWithin: { <shape operator>: <coordinates> }
         }
      }

   The available shape operators are:

   - :query:`$box`,
   - :query:`$polygon`,
   - :query:`$center` (defines a circle), and
   - :query:`$centerSphere` (defines a circle on a sphere).

Behavior
--------

The :query:`$geoWithin` operator does not return sorted results. As
such, MongoDB can return :query:`$geoWithin` queries more quickly than
geospatial :query:`$near` or :query:`$nearSphere` queries, which sort
results.

.. |geo-operator-method| replace:: :query:`$geoWithin`
.. include:: /includes/fact-geometry-hemisphere-limitation.rst

Example
-------

The following example selects all ``loc`` data that exist entirely
within a GeoJSON :ref:`geojson-polygon`:

.. code-block:: javascript

   db.places.find(
      {
        loc: {
          $geoWithin: {
             $geometry: {
                type : "Polygon" ,
                coordinates: [ [ [ 0, 0 ], [ 3, 6 ], [ 6, 1 ], [ 0, 0 ] ] ]
             }
          }
        }
      }
   )

.. query:: $within

   .. deprecated:: 2.4
      :query:`$geoWithin` replaces :query:`$within` in MongoDB
      2.4.
