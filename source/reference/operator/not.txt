====
$not
====

.. default-domain:: mongodb

.. operator:: $not

   *Syntax*: ``{ field: { $not: { <operator-expression> } } }`` 

   :operator:`$not` performs a logical ``NOT`` operation on the
   specified ``<operator-expression>`` and selects the documents that
   do *not* match the ``<operator-expression>``. This includes
   documents that do not contain the ``field``.

   For example, you would query:
   
   .. code-block:: javascript

      db.inventory.find( { price: { $not: { $gt: 1.99 } } } )
    
   to select all documents where:
      
   - ``price`` is less than or equal to ``1.99`` **or**
   - ``price`` does not exist
   
   Notice that ``{ $not: { $gt: 1.99 } }`` is different from the
   :operator:`$lte` operator. ``{ $lt: 1.99 }`` returns *only* the
   documents where ``price`` is less than or equal to ``1.99``.
  
   Remember that :operator:`$not` only affects *other operators* and
   cannot check fields and documents independently. So, use the
   :operator:`$not` operator for logical disjunctions and the
   :operator:`$ne` operator to test the contents of fields directly.
   
   Consider the following behaviors when using the :operator:`$not`
   operator:
      
   - The operation of :operator:`$not` is consistent with the behavior
     of other operators but may yield unexpected results with some data
     types like arrays.
      
   - The :operator:`$not` operator does **not** support operations with
     :operator:`$regex`. Instead use ``//`` or in your driver
     interfaces, use your langauge's regular expression capability to
     create regular expression objects.
     
     For example, using the pattern match expression ``//``, you would
     query:
          
     .. code-block:: javascript
     
        db.inventory.find( { item: { $not: /^p.*/ } } )
     
     to select all documents in ``inventory`` where the ``item`` does
     *not* start with the letter ``p``.
     
     If using PyMongo's ``re.compile()``, you can write
     the above query as:
  
     .. code-block:: python
               
        import re
        for noMatch in db.inventory.find( { "item": { "$not": re.compile("^p.*") } } ):
            print noMatch
   
   .. seealso::
      
      method:`find() <db.collection.find()>`, :method:`update()
      <db.collection.update()>`, :operator:`$set`, :operator:`$gt`,
      :operator:`$regex`, :api:`PyMongo <python\current>`,
      :term:`driver`.