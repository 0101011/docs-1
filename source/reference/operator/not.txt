====
$not
====

.. default-domain:: mongodb

.. operator:: $not

   *Syntax*: ``{ field: { $not: { <operator-expression> } } }`` 

   :operator:`$not` performs a logical ``NOT`` operation on the
   specified ``<operator-expression>`` and selects the documents that
   do *not* match the ``<operator-expression>``. This includes documents that
   do not contain the ``field``.

   :operator:`$not` only affects *other operators* and cannot
   check fields and documents independently.  
   
   Use :operator:`$ne` to test the contents of fields directly and
   :operator:`$nor` for logical disjunctions instead.

   **Example**: Select all documents in ``inventory`` where the
   ``price`` is *not* greater than ``1.99``.
   
   .. code-block:: javascript

      db.inventory.find( { price: { $not: { $gt: 1.99 } } } )
      
   The query selects all documents where:
      - ``price`` is less than or equal to ``1.99`` **or**
      - ``price`` does not exist
         
   ``{ $not: { $gt: 1.99 } }`` is different from the :operator:`$lte` operator.
   ``{ $lt: 1.99 }`` returns *only* the documents where ``price`` is less than or equal to ``1.99``.
     
   The operation of :operator:`$not` is consistent with the behavior of
   other operators but may yield unexpected results with some data
   types like arrays.
      
   The :operator:`$not` operator does **not** support operations with
   :operator:`$regex`. Instead use ``//`` or in your driver interfaces,
   use your langauge's regular expression capability to create regular
   expression objects.
     
   **Example**: Select all documents in ``inventory`` where the
   ``item`` does *not* start with the letter ``p`` using the pattern
   match operator ``/^p.*/``.
     
   .. code-block:: javascript
     
      db.inventory.find( { item: { $not: /^p.*/ } } )
     
   **Example**: Select all documents in ``inventory`` where the
   ``item`` does *not* start with the letter ``p`` in PyMongo using
   ``re.compile()``.
            
   .. code-block:: python
               
      import re
      for noMatch in db.inventory.find( { "item": { "$not": re.compile("^p.*") } } ):
          print noMatch
   
   See also :method:`find() <db.collection.find()>`, :method:`update()
   <db.collection.update()>`, :operator:`$set`, :operator:`$gt`, :operator:`$regex`,
   :api:`PyMongo <python\current>`, :term:`driver`.
