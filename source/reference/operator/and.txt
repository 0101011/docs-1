====
$and
====

.. default-domain:: mongodb

.. operator:: $and

   .. versionadded:: 2.0

   *Syntax*: ``{ $and: [ { <expression1> }, { <expression2> } , ... , { <expressionN> } ] }`` 
   
   :operator:`$and` performs a logical ``AND`` operation on an array of
   *two or more* ``<expressions>`` and selects the
   documents that satisfy *all* the ``<expressions>`` in the array.

   For example, the following query selects all documents in ``inventory`` where:
  
   - ``price`` equals ``1.99`` **and** 
   - ``qty`` is less than ``20`` **and**
   - ``sale`` is ``true``.

   .. code-block:: javascript
        
      db.inventory.find({ $and: [ { price: 1.99 }, { qty: { $lt: 20 } }, { sale: true } ] } )

   MongoDB provides an implicit ``AND`` operation when specifying a
   comma separated list of expressions. For example, you can write the
   above query as:
   
   .. code-block:: javascript
   
      db.inventory.find( { price: 1.99, qty: { $lt: 20 } , sale: true } )
   
   
   However, you need to use the :operator:`$and` operator when you need an
   ``AND`` operation on the value of a single field.
   
   For example, you can update a single document in ``inventory`` where:
   
   - ``price`` does not equal ``1.99`` **and** 
   - ``price`` exists.
   
   .. code-block:: javascript
 
      db.inventory.update( { $and: [ { price: { $ne: 1.99 } }, { price: { $exists: true } } ] }, { $set: { qty: 15 } } )

   .. seealso:: 
   
      :method:`find() <db.collection.find()>`, :method:`update()
      <db.collection.update()>`, :operator:`$ne`, :operator:`$exists`,
      :operator:`$set`.

    