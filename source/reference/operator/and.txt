====
$and
====

.. default-domain:: mongodb

.. operator:: $and

   .. versionadded:: 2.0

   *Syntax*: ``{ $and: [ { <expression1> }, { <expression2> } , ... , { <expressionN> } ] }`` 
   
   :operator:`$and` performs a logical ``AND`` operation on the
   specified array of ``<expressions>`` and selects the
   documents that satisfy *all* the ``<expressions>`` in the array.

   :operator:`$and` requires at least two ``<expressions>``. In the above
   syntax, ``N`` must be greater than or equal to 2.

   **Example**: Select all documents in ``inventory`` where
      - ``price`` equals ``1.99`` **and** 
      - ``qty`` is less than ``20`` **and**
      - ``sale`` is ``true``.

   .. code-block:: javascript
        
      db.inventory.find({ $and: [ { price: 1.99 }, { qty: { $lt: 20 } }, { sale: true } ] } )

   **Example**: Update a single document in ``inventory`` where
      - ``price`` equals ``1.99`` **and** 
      - ``qty`` is less than ``20``.

   .. code-block:: javascript
 
      db.inventory.update( { $and: [ { price: 1.99 }, { qty: { $lt: 20 } } ] }, { $set: { qty: 15 } } )

   MongoDB queries provide an implicit ``AND`` operation by specifying
   a comma-separated list of expressions. The above examples are
   equivalent to:
   
   .. code-block:: javascript
   	  
      db.inventory.find( { price: 1.99, qty: { $lt: 20 } , sale: true } )
   
      db.inventory.update( { price: 1.99, qty: { $lt: 20 } , sale: true }, { $set: { qty: 15 } } )

   See also :method:`find() <db.collection.find()>`, :method:`update()
   <db.collection.update()>`, :operator:`$set`.

    