:orphan:

===============================
Aggregation Framework Operators
===============================

.. versionadded:: 2.1.0

.. default-domain:: agg

The aggregation framework provides the ability to project, process,
and/or control the output of the query, without using :term:`map-reduce`.
Aggregation uses a syntax that resembles the same syntax and
form as "regular" MongoDB database queries.

These aggregation operations are all accessible by way of the
:mongodb:method:`aggregate()` method. While all examples in this document use this
method, :mongodb:method:`aggregate()` is merely a wrapper around the
:term:`database command` :mongodb:dbcommand:`aggregate`. The
following prototype aggregation operations are equivalent:

.. code-block:: javascript

   db.people.aggregate( <pipeline> )
   db.people.aggregate( [<pipeline>] )
   db.runCommand( { aggregate: "people", pipeline: [<pipeline>] } )

These operations perform aggregation routines on the
collection named ``people``. ``<pipeline>`` is a placeholder for the
aggregation :term:`pipeline` definition. :mongodb:method:`aggregate()`
accepts the stages of the pipeline (i.e. ``<pipeline>``) as an array,
or as arguments to the method.

This documentation provides an overview of all aggregation operators
available for use in the aggregation pipeline as well as details
regarding their use and behavior.

.. seealso:: :doc:`/applications/aggregation` overview, the
   :ref:`Aggregation Framework Documentation Index
   <aggregation-framework>`, and the
   :doc:`/tutorial/aggregation-examples` for more information on the
   aggregation functionality.

.. _aggregation-pipeline-operator-reference:

Pipeline
--------

.. include:: /includes/warning-aggregation-types.rst

Pipeline operators appear in an array. Conceptually, documents pass through
these operators in a sequence. All examples in this section assume that the
aggregation pipeline begins with a collection named ``article`` that
contains documents that resemble the following:

.. code-block:: javascript

   {
     title : "this is my title" ,
     author : "bob" ,
     posted : new Date() ,
     pageViews : 5 ,
     tags : [ "fun" , "good" , "fun" ] ,
     comments : [
         { author :"joe" , text : "this is cool" } ,
         { author :"sam" , text : "this is bad" }
     ],
     other : { foo : 5 }
   }

The current pipeline operators are:

.. include:: aggregation/project.txt
   :start-after: agg

.. include:: aggregation/match.txt
   :start-after: agg

.. include:: aggregation/limit.txt
   :start-after: agg

.. include:: aggregation/skip.txt
   :start-after: agg

.. include:: aggregation/unwind.txt
   :start-after: agg

.. include:: aggregation/group.txt
   :start-after: agg

.. include:: aggregation/sort.txt
   :start-after: agg

.. _aggregation-expression-operators:

Expressions
-----------

These operators calculate values within the :term:`aggregation
framework`.

Boolean Operators
~~~~~~~~~~~~~~~~~

The three boolean operators accept Booleans as arguments and
return Booleans as results.

.. note::

   These operators convert non-booleans to Boolean values according to
   the BSON standards. Here, "Null," undefined, and "zero" values
   become ``false``, while non-zero numeric values, and all other types,
   such as strings, dates, objects become ``true``.

.. include:: aggregation/and.txt
   :start-after: agg

.. include:: aggregation/or.txt
   :start-after: agg

.. include:: aggregation/not.txt
   :start-after: agg

Comparison Operators
~~~~~~~~~~~~~~~~~~~~

These operators perform comparisons between two values and return a
Boolean, in most cases, reflecting the result of that comparison.

All comparison operators take an array with a pair of values. You may
compare numbers, strings, and dates. Except for :expression:`$cmp`,
all comparison operators return a Boolean value. :expression:`$cmp`
returns an integer.

.. include:: aggregation/cmp.txt
   :start-after: agg

.. include:: aggregation/eq.txt
   :start-after: agg

.. include:: aggregation/gt.txt
   :start-after: agg

.. include:: aggregation/gte.txt
   :start-after: agg

.. include:: aggregation/lt.txt
   :start-after: agg

.. include:: aggregation/lte.txt
   :start-after: agg

.. include:: aggregation/ne.txt
   :start-after: agg

Arithmetic Operators
~~~~~~~~~~~~~~~~~~~~

These operators only support numbers.

.. include:: aggregation/add.txt
   :start-after: agg

.. include:: aggregation/divide.txt
   :start-after: agg

.. include:: aggregation/mod.txt
   :start-after: agg

.. include:: aggregation/multiply.txt
   :start-after: agg

.. include:: aggregation/subtract.txt
   :start-after: agg

String Operators
~~~~~~~~~~~~~~~~

These operators manipulate strings within projection expressions.

.. include:: aggregation/strcasecmp.txt
   :start-after: agg

.. include:: aggregation/substr.txt
   :start-after: agg

.. include:: aggregation/toLower.txt
   :start-after: agg

.. include:: aggregation/toUpper.txt
   :start-after: agg

Date Operators
~~~~~~~~~~~~~~

All date operators take a "Date" typed value as a single
argument and return a number.

.. include:: aggregation/dayOfYear.txt
   :start-after: agg

.. include:: aggregation/dayOfMonth.txt
   :start-after: agg

.. include:: aggregation/dayOfWeek.txt
   :start-after: agg

.. include:: aggregation/year.txt
   :start-after: agg

.. include:: aggregation/month.txt
   :start-after: agg

.. include:: aggregation/hour.txt
   :start-after: agg

.. include:: aggregation/minute.txt
   :start-after: agg

.. include:: aggregation/second.txt
   :start-after: agg


Multi-Expressions
~~~~~~~~~~~~~~~~~

.. include:: aggregation/cond.txt
   :start-after: agg

.. include:: aggregation/ifNull.txt
   :start-after: agg
