======
Create
======

.. default-domain:: mongodb

This tutorial offers various query examples to remove documents from a
collection.

The examples in this tutorial use a collection ``products`` and use the
:method:`db.collection.insert()` method,
:method:`db.collection.update()` method, and the
:method:`db.collection.insert()` method in the :program:`mongo` shell.

Insert a Document with ``insert``
---------------------------------

The following statement inserts a document with three fields into the
collection ``products``:

.. code-block:: javascript

   db.inventory.insert( { _id: 10, type: "misc", item: "card", qty: 15 } )

In the example, the document has a user-specified ``_id`` field value
of ``10``. The value must be unique within the ``inventory`` collection.

For more examples, see :method:`~db.collection.insert()`.

.. _crud-create-update:

Update Operations that Include the ``upsert`` Flag
--------------------------------------------------

An :method:`~db.collection.update()` operation with the ``upsert`` flag
creates a new document *if no document matches the update's query
criteria*. The operation has the following syntax
[#previous-versions-upsert]_:

.. code-block:: javascript

   db.collection.update( <query> , <update> , { upsert : true } )

If no document matches the ``<query>`` criteria, the ``upsert`` creates
a new document with either:

- the fields and values of the ``<update>`` parameter if the
  ``<update>`` parameter contains only ``field`` and ``value`` pairs,
  as in the following:

  .. code-block:: javascript

     db.collection.update( <query>, { x: 1, y: 1 }, { upsert: true } )

- the fields and values of the both the ``<query>`` and ``<update>``
  parameters, if the ``<update>`` parameter only uses :ref:`update
  operators <update-operators>`, as in the following:

  .. code-block:: javascript

     db.collection.update( <query>, { $set: { x: 1 }, $inc: { y: 5 } }, { upsert: 1 } )

Example
~~~~~~~

The following ``upsert`` operation either creates a new document or
updates an existing document:

   .. code-block:: javascript

       db.favorites.update( { author : "Dante" } , { $inc : { votes : 1 } } , { upsert : true } )

   If no document in the ``favorites`` collection contains ``{ author :
   "Dante" }``, the ``upsert`` creates a new document:

   .. code-block:: javascript

      { "_id" : ObjectId("51e01a2d9c6ae665454e301b"), "author" : "Dante", "votes" : 1 }

   The new document has an auto-generated ``_id`` field and includes
   the ``author`` field from the ``<query>`` criteria and the ``votes``
   field from the ``<update>`` parameter.

   If one or more documents exist with ``{ author : "Dante" }``, the
   ``upsert`` does not create a new document but instead increments the
   ``votes`` field in one of the existing documents.

For more examples, see :method:`~db.collection.update()` and
:ref:`crud-create-save`.

.. [#previous-versions-upsert]
   .. include:: /includes/fact-upsert-multi-options.rst
