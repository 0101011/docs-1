==========================================
Analyze Performance of Database Operations
==========================================

.. default-domain:: mongodb

To analyze the performance of database operations use the database
profiler, as described here.

The database profiler logs information about database operations and
stores the information in the ``system.profile`` collection, which is a
:term:`capped collection`. The profiler stores information about read
and write operations, cursor operations, and database commands.

You can enable database profiling on a per-database basis. By default,
profiling is disabled for a database. When you enable profiling you also
set the level of operations logged. Profiling information is recorded in
the ``system.profile`` collection.

For related information, see:

- :doc:`/reference/database-profiler`
- :doc:`Profile Command </reference/command/profile>`
- :doc:`/reference/current-op`

.. _database-profiling-levels:

Profiling Levels
----------------

The following profiling levels are available:

- ``0`` - Off. Profiling is disabled.

- ``1`` - Log slow operations. By default slow operations are
  those slower than 100 milliseconds. You can modify this value.

- ``2`` - Log all database operations.

.. _database-profiling-enable-profiling:

Enable Database Profiling and Set the Log Level
-----------------------------------------------

You can enable database profiling from the :program:`mongo` shell or
through a driver using the :dbcommand:`profile` command. This section
will describe how to do so from the :program:`mongo` shell. To do so
from a driver, see the :doc:`driver documentation
</applications/drivers>` for your driver.

When you enable profiling, you also set the :ref:`log level
<database-profiling-levels>`. Profiling information is recorded in the
``system.profile`` collection, which MongoDB creates the first time you
enable profiling in a database.

To enable profiling and set the log level, issue the
:method:`db.setProfilingLevel()` command, passing the log level as a
parameter. For example, to enable profiling for all database operations,
issue the following from the :program:`mongo` shell:

.. code-block:: javascript

   db.setProfilingLevel(2)

The shell returns a document showing the *previous* level of profiling.
The ``"ok" : 1`` key-value pair indicates the operation succeeded:

.. code-block:: javascript

   { "was" : 0, "slowms" : 100, "ok" : 1 }

To verify the new setting, see :ref:`database-profiling-view-status`.

Specify the Threshold for Slow Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The threshold for slow operations applies to the entire
:program:`mongod` instance. When you change the threshold, you change it
for all databases on the instance.

.. warning:: Changing the slow-operation threshold for the database
   profiler also affects the logging subsystem's slow operation threshold.

By default the threshold is 100 milliseconds. Databases with a log level
of ``1`` will log operations slower than 100 milliseconds.

To change the threshold, issue two parameters to the
:method:`db.setProfilingLevel()` command. The first parameter sets the
log level for the current database, and the second sets the default slow
operation threshold *for the entire :program:`mongod` instance*.

For example, the following command sets the log level for the current
database to ``0`` (disable profiling) but at the same time sets the
slow-operation threshold for the :program:`mongod` instance to 20
milliseconds. Any database on the instance with a log level of ``1``
will have this threshold:

.. code-block:: javascript

   db.setProfilingLevel(0,20)

To verify the new setting, see :ref:`database-profiling-view-status`.

.. _database-profiling-view-status:

View Profiling Level
~~~~~~~~~~~~~~~~~~~~

To view the :ref:`profiling level <database-profiling-levels>`, issue
the following from the :program:`mongo` shell:

.. code-block:: javascript

   db.getProfilingStatus()

The shell returns a document similar to the following:

.. code-block:: javascript

   { "was" : 0, "slowms" : 100 }

The ``was`` field indicates the current level of profiling.

The ``slowms`` field indicates the length of time in milliseconds an
operation must take before it is considered slow. Operations that take
longer than this threshold are logged by the database profiler if the
profiling level is ``1``, as shown in the ``was`` field. For an
explanation of log levels, see :ref:`database-profiling-levels`.

To view only the log level, issue the following:

.. code-block:: javascript

   db.getProfilingLevel()

Disable Profiling
~~~~~~~~~~~~~~~~~

To disable profiling, issue the following from the :program:`mongod`
shell.

.. code-block:: javascript

   db.setProfilingLevel(0)

Enable Profiling for an Entire ``mongod`` Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For development purposes, you can enable database profiling for an
entire :program:`mongod` instance. The profiling level will apply to all
databases in the instance.

To enable profiling for a :program:`mongod` instance, pass the following
parameters to :program:`mongod` at startup or within the
:doc:`configuration file </reference/configuration-options>`:

.. code-block:: sh

   mongod --profile=1 --slowms=15

Database Profiling and Sharding
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You *cannot* enable profiling on a :program:`mongos` instance. To enable
profiling in a shard cluster, you must enable profiling for each
:program:`mongod` instance in the cluster.

View Profiler Data
------------------

The database profiler logs information about database operations in the
``system.profile`` collection.

To view log information, query the ``system.profile`` collection. To
view example queries, see :ref:`database-profiling-example-queries`

For an explanation of the output data, see
:doc:`/reference/database-profiler`.

Example Profiler Data Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This section displays example queries to the ``system.profile``
collection. For an explanation of the query output, see
:doc:`/reference/database-profiler`.

To view the most recent 10 log entries in the ``system.profile``
collection, run a query similar to the following:

.. code-block:: javascript

   db.system.profile.find().limit(10).sort( { ts : -1 } ).pretty()

To view all operations except command operations (:term:`$cmd`), run a query
similar to the following:

.. code-block:: javascript

   db.system.profile.find( { op: { $ne : 'command' } } ).pretty()

To view operations for a particular collection, run a query similar to
the following. This example views operations in the ``mydb`` database's
``test`` collection:

.. code-block:: javascript

   db.system.profile.find( { ns : 'mydb.test' } ).pretty()

To view view operations slower than ``5`` milliseconds, run a query
similar to the following:

.. code-block:: javascript

   db.system.profile.find( { millis : { $gt : 5 } } ).pretty()


To view information from a certain time range, run a query similar to the following:

.. code-block:: javascript

   db.system.profile.find(
   { ts : { $gt : new ISODate("2012-12-09T03:00:00Z") ,
     $lt : new ISODate("2012-12-09T03:40:00Z") }
   } ).pretty()

The following example looks at the time range, suppresses the ``user`` field
from the output to make it easier to read, and sorts the results by how
long each operation took to run:

.. code-block:: javascript

   db.system.profile.find(
   ... { ts : { $gt : new ISODate("2011-07-12T03:00:00Z") ,
   ... $lt : new ISODate("2011-07-12T03:40:00Z") }
   ... } , { user : 0 } ).sort( { millis : -1 } )

Show the Five Most Recent Events
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

On a database for which profiling is enabled, the ``show profile``
helper displays the 5 most recent operations that took at least 1
millisecond to execute. Issue ``show profile`` from the :program:`mongo`
shell:

.. code-block:: javascript

   show profile

.. _database-profiling-example-queries:

Profiler Overhead
-----------------

When enabled, profiling has a minor effect on performance. The
``system.profile`` collection is a :term:`capped collection` with a
default size of 1 megabyte. It is able to store several thousand typical
profile documents by default.

To change the size of the ``system.profile`` collection, you must:

1. Disable profiling.
#. Drop the ``system.profile`` collection.
#. Create a new ``system.profile`` collection.
#. Re-enable profiling.

For example, use the following sequence of commands to create a new
profile collection sized to 4000000 bytes:

.. code-block:: javascript

   db.setProfilingLevel(0)

   db.system.profile.drop()

   db.createCollection("system.profile", {capped:true, size:4000000})

   db.setProfilingLevel(1)
