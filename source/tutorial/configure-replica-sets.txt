======================
Configure Replica Sets
======================

.. default-domain:: mongodb

.. _replica-set-node-configurations:
.. _replica-set-member-configurations:

Member Configurations
---------------------

All :term:`replica sets <replica set>` have a single :term:`primary` and one or more
:term:`secondaries <secondary>`. Replica sets allow you to configure
secondary members in a variety of ways. This section describes these
configurations.

.. note::

   A replica set can have up to 12 members, but only 7 members can have
   votes. For configuration information regarding non-voting members, see
   :ref:`replica-set-non-voting-members`.

.. warning::

   The :method:`rs.reconfig()` shell method can force the current
   primary to step down, which causes an :ref:`election <replica-set-elections>`.
   When the primary steps down, the :program:`mongod` closes all client
   connections. While this typically takes 10-20 seconds, attempt to
   make these changes during scheduled maintenance periods. To
   successfully reconfigure a replica set, a majority of the members
   must be accessible.

.. include:: /includes/seealso-elections.rst

.. index:: replica set members; secondary only
.. _replica-set-secondary-only-members:
.. _replica-set-secondary-only-configuration:

Secondary-Only Members
~~~~~~~~~~~~~~~~~~~~~~

The secondary-only configuration prevents a :term:`secondary` member in a
:term:`replica set` from ever becoming a :term:`primary` in a
:term:`failover`. You can set secondary-only mode for any member of
the set except the current primary.

For example, you may want to configure all members of a replica sets
located outside of the main data centers as secondary-only to prevent
these members from ever becoming primary.

To configure a member as secondary-only, set its
:data:`~local.system.replset.members[n].priority` value to ``0``. Any member with a
:data:`~local.system.replset.members[n].priority` equal to ``0`` will never seek
:ref:`election <replica-set-elections>` and cannot become primary in any
situation. For more information on priority levels, see
:ref:`replica-set-node-priority`.

.. include:: /includes/note-rs-conf-array-index.rst

As an example of modifying member priorities, assume a four-member
replica set. Use the following sequence of operations in the
:program:`mongo` shell to modify member priorities:

.. code-block:: javascript

   cfg = rs.conf()
   cfg.members[0].priority = 2
   cfg.members[1].priority = 1
   cfg.members[2].priority = 0.5
   cfg.members[3].priority = 0
   rs.reconfig(cfg)

This reconfigures the set, with the following priority settings:

- Member ``0`` to a priority of ``2`` so that it becomes primary, under
  most circumstances.

- Member ``1`` to a priority of ``1``, which is the default value.
  Member ``1`` becomes primary if no member with a *higher* priority is
  eligible.

- Member ``2`` to a priority of ``0.5``, which makes it less likely to
  become primary than other members but doesn't prohibit the
  possibility.

- Member ``3`` to a priority of ``0``.
  Member ``3`` cannot become the :term:`primary` member under any
  circumstances.

.. note::

   If your replica set has an even number of members, add an
   :ref:`arbiter <replica-set-arbiters>` to ensure that
   members can quickly obtain a majority of votes in an
   election for primary.

.. note::

   MongoDB does not permit the current :term:`primary` to have a
   :data:`~local.system.replset.members[n].priority` of ``0``.  If you
   want to prevent the current primary from becoming primary, first
   use :method:`rs.stepDown()` to step down the current primary, and
   then :ref:`reconfigure the replica set
   <replica-set-reconfiguration-usage>` with :method:`rs.conf()` and
   :method:`rs.reconfig()`.

.. seealso:: :data:`~local.system.replset.members[n].priority` and
   :ref:`Replica Set Reconfiguration <replica-set-reconfiguration-usage>`.

.. index:: replica set members; hidden
.. _replica-set-hidden-members:
.. _replica-set-hidden-configuration:

Hidden Members
~~~~~~~~~~~~~~

Hidden members are part of a replica set but cannot become
primary and are invisible to client applications. *However,*
hidden members **do** vote in :ref:`elections <replica-set-elections>`.

Hidden members are ideal for instances that will have significantly
different usage patterns than the other members and require separation
from normal traffic. Typically, hidden members provide reporting,
dedicated backups, and dedicated read-only testing and integration
support.

Hidden members have :data:`~local.system.replset.members[n].priority` set
``0`` and have :data:`~local.system.replset.members[n].hidden` set to ``true``.

To configure a :term:`hidden member`, use the following sequence of
operations in the :program:`mongo` shell:

.. code-block:: javascript

   cfg = rs.conf()
   cfg.members[0].priority = 0
   cfg.members[0].hidden = true
   rs.reconfig(cfg)

After re-configuring the set, the first member of the set in the
:data:`~local.system.replset.members` array will have a priority of ``0``
so that it cannot become primary. The other members in the set will
not advertise the hidden member in the :dbcommand:`isMaster` or
:method:`db.isMaster()` output.

.. note::

   You must send the :method:`rs.reconfig()` command to a set member
   that *can* become :term:`primary`. In the above example, if you
   issue the :method:`rs.reconfig()` operation to a member with a
   :data:`~local.system.replset.members[n].priority` of ``0`` the operation will
   fail.

.. note::

   .. versionchanged:: 2.0

   For :term:`sharded clusters <sharded cluster>` running with replica sets before 2.0 if
   you reconfigured a member as hidden, you *had* to restart
   :program:`mongos` to prevent queries from reaching the hidden
   member.

.. seealso:: :ref:`Replica Set Read Preference <replica-set-read-preference>`
   and :ref:`Replica Set Reconfiguration <replica-set-reconfiguration-usage>`.

.. index:: replica set members; delayed
.. _replica-set-delayed-members:
.. _replica-set-delayed-configuration:

Delayed Members
~~~~~~~~~~~~~~~

Delayed members copy and apply operations from the primary's :term:`oplog` with
a specified delay. If a member has a delay of one hour, then
the latest entry in this member's oplog will not be more recent than
one hour old, and the state of data for the member will reflect the state of the
set an hour earlier.

.. example:: If the current time is 09:52 and the secondary is a
   delayed by an hour, no operation will be more recent than 08:52.

Delayed members may help recover from various kinds of human error. Such
errors may include inadvertently deleted databases or botched
application upgrades. Consider the following factors when determining
the amount of slave delay to apply:

- Ensure that the length of the delay is equal to or greater than your
  maintenance windows.

- The size of the oplog is sufficient to capture *more than* the
  number of operations that typically occur in that period of
  time. For more information on oplog size, see the
  :ref:`replica-set-oplog-sizing` topic in the :doc:`/core/replication` document.

Delayed members must have a :term:`priority` set to ``0`` to prevent
them from becoming primary in their replica sets. Also these members
should be :ref:`hidden <replica-set-hidden-members>` to prevent your
application from seeing or querying this member.

To configure a :term:`replica set` member with a one hour delay, use the
following sequence of operations in the :program:`mongo` shell:

.. code-block:: javascript

   cfg = rs.conf()
   cfg.members[0].priority = 0
   cfg.members[0].slaveDelay = 3600
   rs.reconfig(cfg)

After the replica set reconfigures, the first member of the set in the
:data:`~local.system.replset.members` array will have a priority
of ``0`` and cannot become :term:`primary`. The :data:`slaveDelay <members[n].slaveDelay>` value
delays both replication and the member's :term:`oplog` by 3600 seconds (1
hour). Setting :data:`~local.system.replset.members[n].slaveDelay` to a
non-zero value also sets :data:`~local.system.replset.members[n].hidden` to
``true`` for this replica set so that it does not receive application
queries in normal operations.

.. warning::

   The length of the secondary
   :data:`~local.system.replset.members[n].slaveDelay` must
   fit within the window of the oplog. If the oplog is shorter than
   the :data:`~local.system.replset.members[n].slaveDelay`
   window, the delayed member cannot successfully replicate
   operations.

.. seealso:: :data:`~local.system.replset.members[n].slaveDelay`, :ref:`Replica Set Reconfiguration
   <replica-set-reconfiguration-usage>`, :ref:`replica-set-oplog-sizing`,
   :ref:`replica-set-procedure-change-oplog-size` in this document,
   and the :doc:`/tutorial/change-oplog-size` tutorial.

.. index:: replica set members; arbiters
.. _replica-set-arbiters:
.. _replica-set-arbiter-configuration:

Arbiters
~~~~~~~~

Arbiters are special :program:`mongod` instances that do not hold a
copy of the data and thus cannot become primary. Arbiters exist solely
to participate in :ref:`elections <replica-set-elections>`.

.. note::

   Because of their minimal system requirements, you may safely deploy an
   arbiter on a system with another workload, such as an application
   server or monitoring member.

.. warning::

   Do not run arbiter processes on a system that is an active
   :term:`primary` or :term:`secondary` of its :term:`replica set`.

Arbiters never receive the contents of any collection but do have the
following interactions with the rest of the replica set:

- Credential exchanges that authenticate the arbiter with
  the replica set. All MongoDB processes within a replica set use
  keyfiles. These exchanges are encrypted.

  MongoDB only transmits the authentication credentials in a
  cryptographically secure exchange, and encrypts no other
  exchange.

- Exchanges of replica set configuration data and of votes. These are
  not encrypted.

If your MongoDB deployment uses SSL, then all communications between
arbiters and the other members of the replica set are secure. See the
documentation for :doc:`/administration/ssl` for more information.
As with all MongoDB components, run arbiters on secure networks.

To add an arbiter, see :ref:`replica-set-procedure-add-arbiter`.

.. index:: replica set members; non-voting
.. _replica-set-non-voting-members:
.. _replica-set-non-voting-configuration:

Non-Voting Members
~~~~~~~~~~~~~~~~~~

You may choose to change the number of votes that each member has in
:ref:`elections <replica-set-elections>` for :term:`primary`. In general, all
members should have only 1 vote to prevent intermittent ties, deadlock,
or the wrong members from becoming :term:`primary`. Use :ref:`replica
set priorities <replica-set-node-priority>` to control which members
are more likely to become primary.

To disable a member's ability to vote in elections, use the following
command sequence in the :program:`mongo` shell.

.. code-block:: javascript

   cfg = rs.conf()
   cfg.members[3].votes = 0
   cfg.members[4].votes = 0
   cfg.members[5].votes = 0
   rs.reconfig(cfg)

This sequence gives ``0`` votes to the fourth, fifth, and sixth
members of the set according to the order of the
:data:`~local.system.replset.members` array in the output of
:method:`rs.conf()`.  This setting allows the set to elect these
members as :term:`primary` but does not allow them to vote in
elections. If you have three non-voting members, you can add three
additional voting members to your set. Place voting members so that
your designated primary or primaries can reach a majority of votes in
the event of a network partition.

.. note::

   In general and when possible, all members should have only 1 vote. This
   prevents intermittent ties, deadlocks, or the wrong members from
   becoming primary. Use :ref:`Replica Set Priorities
   <replica-set-node-priority>` to control which members are more
   likely to become primary.

.. seealso:: :data:`~local.system.replset.members[n].votes` and :ref:`Replica Set
   Reconfiguration <replica-set-reconfiguration-usage>`.

.. _replica-set-chained-replication:

Chained Replication
~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.0

Chained replication occurs when a :term:`secondary` member replicates
from another secondary member instead of from the :term:`primary`. This
might be the case, for example, if a secondary selects its replication
target based on ping time and if the closest member is another secondary.

Chained replication can reduce load on the primary. But chained
replication can also result in increased replication lag, depending on
the topology of the network.

Beginning with version 2.2.2, you can use the
:data:`~local.system.replset.settings.chainingAllowed` setting in
:doc:`/reference/replica-configuration` to disable chained replication
for situations where chained replication is causing lag. For details,
see :doc:`/tutorial/manage-chained-replication`.

.. _replica-set-security:

Security Considerations for Replica Sets
----------------------------------------

In most cases, the most effective ways to control access and to secure
the connection between members of a :term:`replica set` depend on
network-level access control. Use your environment's firewall and
network routing to ensure that traffic *only* from clients and other
replica set members can reach your :program:`mongod` instances. If needed,
use virtual private networks (VPNs) to ensure secure connections
over wide area networks (WANs.)

Additionally, MongoDB provides an authentication mechanism for
:program:`mongod` and :program:`mongos` instances connecting to
replica sets. These instances enable authentication but specify a
shared key file that serves as a shared password.

.. versionadded:: 1.8
   Added support authentication in replica set deployments.

.. versionchanged:: 1.9.1
   Added support authentication in sharded replica set deployments.


To enable authentication add the following option to your configuration file:

.. code-block:: cfg

   keyFile = /srv/mongodb/keyfile

.. note::

   You may chose to set these run-time configuration options using the
   :option:`--keyFile <mongod --keyFile>` (or :option:`mongos --keyFile`)
   options on the command line.

Setting :setting:`keyFile` enables authentication and specifies a key
file for the replica set members to use when authenticating to each
other. The content of the key file is arbitrary but must be the same
on all members of the replica set and on all :program:`mongos`
instances that connect to the set.

The key file must be less one kilobyte in size and may only contain
characters in the base64 set. The key file must not have group or "world"
permissions on UNIX systems. Use the following command to use the
OpenSSL package to generate "random" content for use in a key file:

.. code-block:: bash

   openssl rand -base64 753

.. note::

   Key file permissions are not checked on Windows systems.
