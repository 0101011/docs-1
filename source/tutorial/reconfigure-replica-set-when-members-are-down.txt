===============================================
Reconfigure a Replica Set when Members are Down
===============================================

.. default-domain:: mongodb

To reconfigure a :term:`replica set` when a majority of the members are
down or unreachable, you must manually change the set configuration.

This includes situations where you have a network partition and where
neither side of the partition has a majority. In such cases the two
sides of the partition cannot see each other when determining whether a
majority exists (see
:ref:`replica-set-elections-and-network-partitions`). Therefore, do not
use scripts to reconfigure but do so manually.

This section gives several procedures for reconfiguring when a majority
is down. Use the procedure appropriate to your version and situation.

.. note:: To reconfigure a replica set when a majority of members are
   running, run the :method:`rs.reconfig()` command on the current
   :term:`primary`. For examples of using :method:`rs.reconfig()`, see
   :ref:`replica-set-reconfiguration-usage`.

Force a Reconfiguration when the Primary is Down
------------------------------------------------

.. versionchanged:: 2.0

This procedure lets you recover while a majority of :term:`replica set`
members are down or unreachable. A member might be unreachable, for
example, if it is on the wrong side of a network partition.

.. TODO Question: must the primary be down for you to use this procedure?

You connect to any surviving member and use the the ``force : true``
option to force a reconfiguration of the replica set.

The ``force : true`` option manually reconfigures the set. The option is
intended only for serious problems, such as a disaster recovery
failover. Do not use ``force : true`` every time you reconfigure. Also,
do not put ``force : true`` into any automatic scripts and do not use
``force : true`` when there is still a primary.

To force reconfiguration:

1. Back up a surviving member, both for safety and to bring up more new
   set members more easily.

#. Connect to any surviving member and save the current configuration
   so that you can switch back to the old configuration once the members
   are restored. Consider the following example commands for saving the
   configuration:

   .. code-block:: javascript

      cfg = rs.config()

      printjson(cfg)

#. On the same member, remove the down and unreachable members of the
   replica set from the :data:`members <rs.conf.members>` array by
   setting the array equal to the surviving members alone. Consider the
   following example, which uses the ``cfg`` variable created in the
   previous step:

   .. code-block:: javascript

      cfg.members = [cfg.members[0] , cfg.members[4] , cfg.members[7]]

#. On the same member, reconfigure the set by using the
   :method:`rs.reconfig()` command with the ``force : true`` option:

   .. code-block:: javascript

      rs.reconfig(cfg, {force : true})

   The replica set elects a new primary, most likely the member you are
   connected to.

   .. note:: When you use ``force : true``, the version number in the
   replica set configuration increases significantly, by tens or
   hundreds of thousands. This is normal and designed to prevent set
   version collisions if network partitioning ends.

#. If the failure or partition was only temporary, then as members
   recover they detect that they have been removed from the set and
   enter a special state where they are up but refuse to answer
   requests, as they are no longer syncing changes. You can now re-add
   them to the configuration object:

   Be sure that each member has the same _id it had before.

   .. TODO why does each member have to have the same ID as before?
   .. The wiki said they'd have to run rs.reconfig(). Why?

   Consider the following example:

   .. code-block:: javascript

      rs.add("example.com:30003")

   Once you add the removed members back into the set, they detect they
   have been added and synchronize to the current state of the set.

   Be aware that if the original primary was one of the removed members,
   these members may need to rollback.
