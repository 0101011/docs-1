=================================================
Backup a Small Sharded Cluster with ``mongodump``
=================================================

.. default-domain:: mongodb

Overview
--------

If your :term:`sharded cluster` comprises a realtively small amount of data,
you can connect to a :program:`mongos` and issue the
:program:`mongodump` command. You can use this approach it's possible to 
store the entire backup on one system or on a single storage device in 
a reasonable period of time.

Read :ref:`sharded-cluster-backups` for a high-level overview of important
considerations as well as a list of alternate backup tutorials.

By default :program:`mongodump` will issue its queries to the non-primary 
nodes.

Procedure
---------

.. note:: If you use :program:`mongodump` without specifying the a database or
   collection, the output will contain both the collection data and the
   sharding config metadata from the :ref:`config servers <sharding-config-server>`.

   You cannot use the :option:`--oplog <mongodump --oplog>` option for
   :program:`mongodump` when dumping from a :program:`mongos`. This option is only
   available when running directly against a :term:`replica set` member.

To perform a backup of a :term:`sharded cluster` by connecting
:program:`mongodump` by connecting to a :program:`mongos`, use the following
operation at your system's prompt: 

.. code-block:: sh

   mongodump --host mongos3.example.net --port 27017

This will create a database dump of the :term:`sharded cluster` accessible via
the :program:`mongos` listening on port ``27017`` of the ``mongos3.example.net`` 
mongos instance.

The dump produced by this operation does not reflect the chunks nor distribution of your 
sharded data. It will be broken down by collection, in each database only. You can restore 
to any type of instance but if you restore to a (new) :term:`sharded cluster` then 
you must have a :term:`sharded cluster` setup already, before you restore.
