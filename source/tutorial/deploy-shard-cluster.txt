======================
Deploy a Shard Cluster
======================

.. default-domain:: mongodb

Synopsis
--------

This document describes how to deploy a :term:`shard cluster` for a
standalone :program:`mongod` instance.

To deploy a shard cluster for an existing replica set, see
:doc:`/tutorial/convert-replica-set-to-replicated-shard-cluster`.

Before deploying a shard cluster, see the requirements listed in
:ref:`Requirements for Shard Clusters <sharding-requirements>`.

.. warning:: Sharding and "localhost" Addresses

   If you use either "localhost" or ``127.0.0.1`` as the hostname
   portion of any host identifier, for example as the ``host`` argument to
   :dbcommand:`addShard` or the value to the :option:`mongos --configdb`
   run time option, then you must use "localhost" or ``127.0.0.1``
   for *all* host settings. If you mix localhost addresses and remote
   host address, MongoDB will error.

Procedure
---------

Start Config Server Database Instances
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Begin by configuring three config server database processes. These are small
:program:`mongod` instances that store the cluster's metadata. You must
have exactly *three* instances in production deployments. Each has a complete copy
of the cluster's metadata for redundancy. These instances should run on different servers
to assure good uptime and data safety.

Since config database :program:`mongod` instances receive relatively
little traffic and demand only a small portion of system resources, you
can run the instances on systems that run other cluster components.

To start a config database, type the following command at a system prompt:

.. code-block:: sh

   mongod --configsvr

By default a :option:`--configsrv <mongod --configsrv>` process stores its data files
in the `/data/configdb` directory.  You can specify a different
location using the :setting:`dbpath` run-time option  option. The config :program:`mongod` instance
is accessible via port ``27019``. In addition to :setting:`configsvr`,
use other :program:`mongod`
:doc:`runtime options </reference/configuration-options>` as needed.

Repeat this process for all three config server instances.

Start ``mongos`` Instances
~~~~~~~~~~~~~~~~~~~~~~~~~~

All client operations against a shard cluster go through :program:`mongos`
instances. The :program:`mongos` instance routes queries and operations
to the appropriate shards and interacts with the config server instances.

:program:`mongos` instances are lightweight, and a shard cluster typically 
has several instances. For example, you run one :program:`mongos`
instance on each of your application servers, or you might run a mongos instance 
on each of the servers running a mongod process.

You must specify the names (locations) of the config servers on the mongos command line.
Use DNS names for the config servers rather than explicit IP addresses for operational 
flexibility; in part this is a best practice as you cannot change the config server names 
without a full cluster reboot (including mongod processes).

The :program:`mongos` instance runs on the TCP port ``27017``.  MongoDB clients by default 
connect to this port number.

Use the following command at a system prompt to start a
:program:`mongos` instance:

.. code-block:: sh

   mongos --configdb config0.mongodb.example.net,config1.mongodb.example.net,config2.mongodb.example.net --port 27017

The above example assumes that you have config instances running on the following hosts:

- ``config0.mongodb.example.net``
- ``config1.mongodb.example.net``
- ``config2.mongodb.example.net``

Add Shards to the Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~

In a production shard cluster, each shard is itself a :term:`replica
set`. You must deploy at least one replica set, that is, at least one shard. 
Note you can add additional shards later to a live system.  For
instructions on deploying replica sets, see
:doc:`/tutorial/deploy-replica-set`.

In the example below we will add two shards, shard zero and shard one, to the cluster. 
When you have two active and initiated replica sets, perform the
following procedure:

Using the :program:`mongo` shell, connect to a :program:`mongos`. For example,
if the :program:`mongos` is accessible at
``mongos0.mongodb.example.net`` on port ``27017`` you would type:

.. code-block:: sh

   mongo mongos0.mongodb.example.net

To add each shard to the cluster, Use :method:`sh.addShard()` in the mongo shell. For
example, here we add two shards.  For the first shard one of the hostnames in its replica set is 
``sfo-foo30`` and for the second shard one of the hostnames is ``sfo-foo40``.

.. code-block:: javascript

   sh.addShard( "sfo-foo30.example.net" )
   sh.addShard( "sfo-foo40.example.net" )

.. admonition:: All shards should be replica sets.

   .. versionchanged:: 2.0.3

   After version 2.0.3, you may use the above form to add replica
   sets to a cluster. The cluster will automatically discover
   the other members of the replica set and note their names 
   accordingly.

   Before version 2.0.3, you must specify the shard in the
   following form: the replica set name, followed by a forward
   slash, followed by a comma-separated list of seeds for the
   replica set. For example, if the name of the replica set is
   ``sh0``, and the replica set were to have three members, then your :method:`sh.addShard` command might resemble:

   .. code-block:: javascript

      sh.addShard( "sh0/sfo-foo30.example.net,sfo-foo31.example.net,sfo-foo32.example.net" )

The :method:`sh.addShard()` helper in the :program:`mongo` shell is a wrapper for 
the :dbcommand:`addShard` :term:`database command`.

Enable Sharding for Databases
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

While sharding operates on a per-collection basis, you must enable
sharding for each database that holds a database that you would like
to shard.  Databases are logical constructs somewhat analogous to a "schema" in some 
products. A single cluster can have many databases, with each database housing collections.

Use the following operation in a :program:`mongo` shell session
connected to a :program:`mongos` instance in your cluster:

.. code-block:: javascript

   sh.enableSharding("records")

Where ``records`` is the name of the database that holds the collection
you want to shard. :method:`sh.enableSharding()` is a wrapper
around the :dbcommand:`enableSharding` :term:`database command`. You
can enable sharding for multiple databases stored in the cluster.

Enable Sharding for Collections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can enable sharding on a per-collection basis. Because
MongoDB uses "range based sharding," you must specify a :term:`shard
key` MongoDB can use to distribute your documents among the
shards. For more information, see the sections of this manual that give
an :ref:`overview of shard keys <sharding-shard-key>` and that
give an in-depth exploration of the
:ref:`features of good shard keys <sharding-shard-key>`.

To enable sharding for a collection, use the
:method:`sh.shardCollection()` helper in the :program:`mongo` shell.
The helper provides a wrapper around the :dbcommand:`shardCollection`
:term:`database command` and has the following prototype form:

.. code-block:: javascript

   sh.shardCollection("[database].[collection]", shard-key-pattern)

Replace the ``[database].[collection]`` string with the full namespace
of your database, which consists of the name of your database, a dot
(e.g. ``.``), and the full name of the collection. The ``shard-key-pattern``
represents your shard key, which you specify in the same form as you
would an :dbcommand:`index <ensureIndex>` key pattern. If you do not specify the
``key`` argument, MongoDB will use the ``_id`` field as the shard
key.

Consider the following example invocations of
:method:`sh.shardCollection()`:

.. code-block:: javascript

   sh.shardCollection("records.people", { "zipcode": 1, "name": 1 } )
   sh.shardCollection("people.addresses", { "state": 1, "_id": 1 } )
   sh.shardCollection("assets.chairs", { "type": 1, "_id": 1 } )
   sh.shardCollection("events.alerts", { "hashed_id": 1 } )

In order, these operations shard:

#. The ``people`` collection in the ``records`` database using the shard key
   ``{ "zipcode": 1, "name": 1 }``.

   This shard key distributes documents by the value of the
   ``zipcode`` field. If a number of documents have the same value for
   this field, then that :term:`chunk` will be :ref:`splitable
   <sharding-shard-key-cardinality>` by the values of the ``name``
   field.

#. The ``addresses`` collection in the ``people`` database using the shard key
   ``{ "state": 1, "_id": 1 }``.

   This shard key distributes documents by the value of the ``state``
   field. If a number of documents have the same value for this field,
   then that :term:`chunk` will be :ref:`splitable
   <sharding-shard-key-cardinality>` by the values of the ``_id``
   field.

#. The ``chairs`` collection in the ``assets`` database using the shard key
   ``{ "type": 1, "_id": 1 }``.

   This shard key distributes documents by the value of the ``type``
   field. If a number of documents have the same value for this field,
   then that :term:`chunk` will be :ref:`splitable
   <sharding-shard-key-cardinality>` by the values of the ``_id``
   field.

#. The ``alerts`` collection in the ``events`` database using the shard key
   ``{ "hashed_id": 1 }``.

   This shard key distributes documents by the value of the
   ``hashed_id`` field. Presumably this is a computed value that
   holds the hash of some value in your documents and is able to
   evenly distribute documents throughout your cluster.
