===========================
Define MongoDB Access Roles
===========================

.. default-domain:: mongodb

.. todo:: Link 'role' below to the conceptual doc, when written

Overview
--------

Roles grant users access to MongoDB resources. By default, MongoDB
provides a number of roles that administrators may use to control
access to a MongoDB system. However, if these roles cannot describe
the proper limited subset of access that a user might require in a
deployment, you can define a unique role to provide these access.

Create new roles to define access to resources according to the
operational needs of a deployment.

MongoDB limits the scope of each role to the database where the role
was created. The combination of the database name and the role name
uniquely defines a role in MongoDB.

Prerequisites
-------------

.. include:: /includes/access-create-role.rst

Procedure
---------

Identify Resources and Actions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Decide which :ref:`resources <resource-document>` to grant access to
and which :ref:`actions <security-user-actions>` to grant on each
resource.

.. include:: /includes/privilege-resource-for-non-admin-roles.rst
   :end-before: inherit-role

When creating the role, enter these resource-action pairings as
documents in the ``privileges`` array. See :ref:`create-the-role`
section.

Identify Privileges from Existing Roles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If this role must include *all* the privileges of an existing role, you
can specify that the role inherit privileges from an existing role,
rather than adding privileges individually. The role inherits all the
privileges from the existing role.

.. include:: /includes/privilege-resource-for-non-admin-roles.rst
   :start-after: inherit-role

When creating the new role, specify the roles to inherit from in the
``roles`` array. See :ref:`create-the-role` section.

.. _create-the-role:

Create the Role
~~~~~~~~~~~~~~~

To create the role, use the :dbcommand:`createRole` command. Consider
the following example that creates the ``myClusterwideAdmin`` role in
the ``admin`` database. In the example, the ``myClusterwideAdmin`` role
directly specifies its own privileges in the ``privileges`` array as
well as inherits privileges from the ``read`` role on the ``admin``
database.

.. code-block:: javascript

   use admin
   db.runCommand( { createRole: "myClusterwideAdmin",
                    privileges: [
                        { resource: { cluster: true }, actions: [ "addShard" ] },
                        { resource: { db: "config", collection: "" }, actions: [ "find", "update", "insert", "remove" ] },
                        { resource: { db: "users", collection: "usersCollection" }, actions: [ "update", "insert", "remove" ] },
                        { resource: { db: "", collection: "" }, actions: [ "find" ] }
                    ],
                    roles: [
                        { role: "read", db: "admin" }
                    ],
                    writeConcern: { w: "majority" , wtimeout: 5000 }
                } )
