=============================================
Deploy a Geographically Redundant Replica Set
=============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

This tutorial outlines the process for deploying a :term:`replica set`
with :doc:`members in multiple locations
</core/replica-set-architecture-geographically-distributed>`. The
tutorial addresses three-member sets, four-member sets, and
considerations for deploying replica sets with more than four members.

For more information on distributed replica sets, see
:doc:`/core/replica-set-architecture-geographically-distributed`. See
also :doc:`/core/replica-set-architectures` and see :doc:`/replication`.

Considerations
--------------

.. include:: /includes/considerations-deploying-replica-set.rst

Distribution of the Members
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If possible, use an odd number of data centers, and choose a
distribution of members that maximizes the likelihood that even with a
loss of a data center, the remaining replica set members can form a
majority or at minimum, provide a copy of your data.

Prerequisites
-------------

For all configurations in this tutorial, deploy each replica set member
on a separate system. Although you may deploy more than one replica set member on a
single system, doing so reduces the redundancy and capacity
of the replica set. Such deployments are typically for testing
purposes.

This tutorial assumes you have installed MongoDB on each system that
will be part of your replica set. If you have not already installed
MongoDB, see the :ref:`installation tutorials <tutorial-installation>`.

Procedures
----------

.. _replica-set-deploy-distributed-three-member:

Deploy a Geographically Redundant Three-Member Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For a geographically redundant three-member replica set deployment, you
must decide how to distribute your system. Some possible distributions
for the three members are:

- Across Three Data Centers: One members to each site.

- Across Two Data Centers: Two members to Site A and one member to Site
  B. If one of the members of the replica set is an arbiter, distribute
  the arbiter to Site A with a data-bearing member.
  
.. include:: /includes/steps/deploy-geographically-distributed-replica-set-3member.rst

.. _replica-set-deploy-distributed-four-member:

Deploy a Geographically Redundant Four-Member Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A geographically redundant four-member deployment has two additional
considerations:

- You must add an :term:`arbiter` to ensure an odd number of votes. The
  arbiter can run on a system that is also used for an application
  server or on the same machine as another MongoDB process.

- You must decide how to distribute your systems. Some possible
  distributions for the four members plus the arbiter are:

  - Across Three Data Centers: Two members in Site A, two members in
    Site B, one member in Site C.

  - Across Four Data Centers: Two members in one site, and one member
    in the other three sites.

  - Across Five Data Centers: One members in each site.

  - Across Two Data Centers: Three members in Site A and two members in
    Site B.

To deploy a geographically redundant four-member set:
`````````````````````````````````````````````````````

.. include:: /includes/steps/deploy-geographically-distributed-replica-set-4member.rst

Deploy a Geographically Redundant Set with More than Four Members
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The above procedures detail the steps necessary for deploying a
geographically redundant replica set. Larger replica set deployments
generally follow the same steps, but have additional considerations:

- Never deploy more than seven voting members.

- If you have an even number of members, similar to :ref:`the procedure
  for a four-member set <replica-set-deploy-distributed-four-member>`,
  deploy an arbiter.
