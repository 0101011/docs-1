============================
Upgrade a Cluster to Use SSL
============================

.. default-domain:: mongodb

.. include:: /includes/note-general-ssl-support.rst

.. versionchanged:: 2.5.3

The MongoDB server supports listening for both SSL encrypted and
unencrypted connections on the same TCP port. This allows upgrades of
MongoDB clusters to use SSL encrypted connections. To upgrade from a
MongoDB cluster using no SSL encryption to one using *only* SSL
encryption, use the following rolling upgrade process:

#. For each node of a cluster, start the node with the option
   :option:`--sslMode` set to ``acceptSSL``. The :option:`--sslMode
   acceptSSL <--sslMode>` setting allows the node to accept both SSL
   and non-SSL incoming connections. Its connections to other servers
   do not use SSL. Include other :doc:`SSL options
   </tutorial/configure-ssl>` as well as any other options that are
   required for your specific configuration. For example:

   .. code-block:: sh

      mongod --replSet <name> --sslMode acceptSSL --sslPEMKeyFile <path to SSL Certificate and key PEM file> --sslCAFile <path to root CA PEM file>

   Upgrade all nodes of the cluster to these settings.

#. Switch all clients to use SSL. See :ref:`ssl-clients`.

#. For each node of a cluster, start the node with the option
   :option:`--sslMode` set to ``sendAcceptSSL``. With the
   :option:`--sslMode sendAcceptSSL <--sslMode>` setting, the node
   accepts both SSL and non-SSL incoming connections, and its
   connections to other servers use SSL. Include other :doc:`SSL
   options </tutorial/configure-ssl>` as well as any other options that
   are required for your specific configuration. For example:

   .. code-block:: sh

      mongod --replSet <name> --sslMode sendAcceptSSL --sslPEMKeyFile <path to SSL Certificate and key PEM file> --sslCAFile <path to root CA PEM file>

   .. TODO When available, switch to use the command to avoid downtime.
      db.getSiblingDB('admin').runCommand( { setParameter: 1, setSSLMode: "sendAcceptSSL" } )

   Upgrade all nodes of the cluster to these settings. 

   At this point, all connections should be using SSL.

#. Finally, for each node of the cluster, restart the node with the
   option :option:`--sslMode` set to ``sslOnly``. With the
   :option:`--sslMode` set to ``sslOnly``, the node will reject any
   non-SSL connections. Include other :doc:`SSL options
   </tutorial/configure-ssl>` as well as any other options that are
   required for your specific configuration. For example:

   .. code-block:: sh

      mongod --replSet <name> --sslMode sslOnly --sslPEMKeyFile <path to SSL Certificate and key PEM file> --sslCAFile <path to root CA PEM file>

.. TODO When available, switch to use the command to avoid downtime.
   db.getSiblingDB('admin').runCommand( { setParameter: 1, setSSLMode: "sslOnly" } )

.. note::
   You may also specify these options in the :doc:`configuration file
   </reference/configuration-options>`, as in the following example:

   .. code-block:: ini

      sslMode = <noSSL|acceptSSL|sendAcceptSSL|sslOnly>
      sslPEMKeyFile = <path to SSL certificate and key PEM file>
      sslCAFile = <path to root CA PEM file>

.. TODO for future release. The modes may have changed.
