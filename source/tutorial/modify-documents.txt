======
Update
======

.. default-domain:: mongodb

*Update* operations are those that modify existing :term:`documents
<document>` in a :term:`collection`. A document is the equivalent of an
:term:`RDBMS` record, and a collection is the equivalent of an RDBMS
table. *Update* operations are one of the three categories of
:doc:`/core/write-operations`, along with :doc:`/core/create` and
:doc:`/core/delete` operations.

You can update documents in a MongoDB collection using either of the
following *update* operations:

- :ref:`Updates <crud-update-update>`, which are MongoDB's core update
  operation.

- :ref:`Saves <crud-update-save>`, which updates a document if you
  specify an existing ``_id``.

The update operations have following behaviors:

- .. include:: /includes/fact-update-field-order.rst

- .. include:: /includes/fact-write-concern.rst

.. _crud-update-update:

Updates
-------

The :method:`~db.collection.update()` method is the primary method to
update documents in a MongoDB collection. By default, the
:method:`~db.collection.update()` method updates a **single** document,
but by using the ``multi`` option, :method:`~db.collection.update()` can
update all documents that match the query criteria in the collection.

The :method:`~db.collection.update()` method either updates specific
fields in the existing document or replaces the document. The method
updates specific fields if the ``<update>`` argument contains only
:ref:`update operator <update-operators>` expressions, such as a
:operator:`$set` operator expression. Otherwise the method replaces the
existing document.

To update specific fields in subdocuments, MongoDB uses :term:`dot
notation`.

The :method:`~db.collection.update()` has the following syntax
[#previous-version]_:

.. code-block:: javascript

   db.collection.update( {<query>}, {<update>}, { upsert: <boolean>, multi: <boolean>})

Prior to version 2.2, the :method:`~db.collection.update()` method has
the following form:

.. code-block:: javascript

   db.collection.update( <query>, <update>, <bool>, <bool> )

.. example:: The following operation updates a the ``votes`` by ``1``.
   document or creates a new one. The operation leaves out the
   ``upsert`` and ``multi`` parameters.

   .. code-block:: javascript

       db.favorites.update( { author : "Dante" } , { $inc : { votes : 1 } } )

For further examples, see :method:`~db.collection.update()`.

.. admonition:: Corresponding operation in SQL

   The :method:`~db.collection.update()` method corresponds to the
   ``UPDATE`` operation in SQL. The ``<query>`` argument corresponds to
   the ``WHERE`` statement, and the ``<update>`` corresponds to the
   ``SET ...`` statement.

   The default behavior of :method:`~db.collection.update()` corresponds
   to SQL ``UPDATE`` with ``LIMIT 1``. With the ``multi`` option,
   :method:`~db.collection.update()` corresponds to SQL ``UPDATE``
   without the ``LIMIT`` clause.

.. [#previous-version] This shows the syntax for MongoDB 2.2 and later.
   For syntax for versions prior to 2.2, see :method:`~db.collection.update()`.

.. include:: /includes/fact-upsert-multi-options.rst

.. _crud-update-save:

Save
----

The :method:`~db.collection.save()` method performs an update *if an
existing document has the same "_id" field*. Otherwise
:method:`~db.collection.save()` creates a new document. The
:method:`~db.collection.save()` method is equivalent to the
:method:`~db.collection.update()` method with the ``upsert`` option and
a ``<query>`` argument with an ``_id`` field.

The :method:`~db.collection.save()` method has the following syntax:

.. code-block:: javascript

   db.collection.save( <document> )

If the ``<document>`` argument contains an ``_id`` field that exists in
the collection, :method:`~db.collection.save()` performs an update that
replaces the existing document with the ``<document>`` argument.

.. example:: The following operation queries the :doc:`bios collection
   </reference/bios-example-collection>` for a document where the
   ``_id`` equals ``100`` and replaces the document with the
   ``<document>`` argument:

   .. code-block:: javascript

      db.bios.save(
         {
           _id: 100,
           name: { first: 'Martin', last: 'Odersky' },
           contribs: [ 'Scala' ]
         }
      )

For further examples, see :method:`~db.collection.save()`.
