.. index:: index; replica set
.. index:: replica set; index
.. _index-build-on-replica-sets:
.. _index-building-replica-sets:

=============================
Build Indexes on Replica Sets
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

For replica sets, secondaries will begin building indexes *after* the
:term:`primary` finishes building the index. In :term:`sharded clusters
<sharded cluster>`, the :binary:`~bin.mongos` will send :method:`createIndex()
<db.collection.createIndex()>` to the primary members of the replica
set for each shard, which then replicate to the secondaries after the
primary finishes building the index.

To minimize the impact of building an index on your replica set, you
can use the following procedure to build indexes.


Considerations
--------------

.. important::

   To create :ref:`unique indexes <index-type-unique>` using the
   following procedure, you must stop all writes to the collection
   during this procedure.

   If you cannot stop all writes to the collection during this
   procedure, do not use the procedure on this page. Instead, build
   your unique index on the collection by:

   - issuing :method:`db.collection.createIndex()` on the primary for a
     replica set, or

   - issuing :method:`db.collection.createIndex()` on the
     :binary:`~bin.mongos` for a sharded cluster.

- Ensure that your :term:`oplog` is large enough to permit the
  indexing or re-indexing operation to complete without falling
  too far behind to catch up. See the :ref:`oplog sizing
  <replica-set-oplog-sizing>` documentation for additional
  information.

- This procedure *does* take one member out of the replica set at a
  time. However, this procedure will only affect one member of the
  set at a time rather than *all* secondaries at the same time.

Procedure
---------

.. note::

   If you need to build an index in a :term:`sharded cluster`, repeat
   the following procedure for each replica set that provides each
   :term:`shard`.

   To create :ref:`unique indexes <index-type-unique>` using the
   following procedure, you must stop all writes to the collection
   during the index build. Otherwise, you may end up with inconsistent
   data across the replica set members. If you cannot stop all writes to
   the collection, do not use the following procedure to create unique
   indexes.

.. _tutorial-index-on-replica-sets-stop-one-member:

Stop One Secondary
~~~~~~~~~~~~~~~~~~

Stop the :binary:`~bin.mongod` process on one secondary. Restart the
:binary:`~bin.mongod` process, making the following modifications to the 
configuration file.

- Comment out the :setting:`replication.replSetName` option.
- For :term:`shard` or :term:`config server` replica sets, comment out
  the :setting:`sharding.clusterRole` option.
- Change the :setting:`net.port` to a different port. Make a note
  of the original port setting as a comment. [#different-port]_

If using command line options, modify :option:`--port <mongod --port>` 
and remove the :option:`--replSetName <mongod --replSet>`, 
:option:`--shardsvr <mongod --shardsvr>`, and
:option:`--configsvr <mongod --configsvr>` options.

This instance is now in "standalone" mode.

For example, if your :binary:`~bin.mongod` *normally* runs with on the
default port of ``27017`` with the :option:`--replSet
<mongod --replSet>` option you would use the following invocation:

.. code-block:: sh

   mongod --port 47017

.. [#different-port] By running the :binary:`~bin.mongod` on a different
   port, you ensure that the other members of the replica set and all
   clients will not contact the member while you are building the
   index.

.. _tutorial-index-on-replica-sets-build-index:

Build the Index
~~~~~~~~~~~~~~~

Create the new index using the :method:`~db.collection.createIndex()`
in the :binary:`~bin.mongo` shell, or comparable method in your
driver. This operation will create the index on this
:binary:`~bin.mongod` instance

For example, to create an ascending index on the ``username`` field of
the ``records`` collection, use the following :binary:`~bin.mongo` shell
operation:

.. code-block:: sh

   db.records.createIndex( { username: 1 } )

.. _tutorial-index-on-replica-sets-restart-mongod:

Restart the Program ``mongod`` as a Replica Set Member
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When the index build completes, restart the :binary:`~bin.mongod`
instance as a member of the replica set using its normal
configuration file or command-line arguments.

When the index build completes, start the :binary:`~bin.mongod` instance
with the :option:`--replSet <mongod --replSet>` option on its usual port:

.. code-block:: sh

   mongod --port 27017 --replSet rs0

Allow replication to catch up on this member.

Build Indexes on all Secondaries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For each secondary in the set, build an index according to the
following steps:

#. :ref:`tutorial-index-on-replica-sets-stop-one-member`
#. :ref:`tutorial-index-on-replica-sets-build-index`
#. :ref:`tutorial-index-on-replica-sets-restart-mongod`

Build the Index on the Primary
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When all the secondaries have the new index, step down the primary,
restart it as a standalone using the procedure described above, 
and build the index on the former primary:

#. :ref:`Build the index in the background
   <index-creation-background>` on the primary.

#. Step down the primary using the :method:`rs.stepDown()` method in
   the :binary:`~bin.mongo` shell to cause the current primary to become a
   secondary graceful and allow the set to elect another member as
   primary.

   Then repeat the index building procedure, listed below, to build the
   index on the primary:

   #. :ref:`tutorial-index-on-replica-sets-stop-one-member`

   #. :ref:`tutorial-index-on-replica-sets-build-index`

   #. :ref:`tutorial-index-on-replica-sets-restart-mongod`

Building the index on the background, takes longer than the foreground
index build and results in a less compact index structure. Additionally,
the background index build may impact write performance on the
primary. However, building the index in the background allows the set to
be continuously up for write operations while MongoDB builds the
index.
