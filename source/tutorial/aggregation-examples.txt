==============================
Aggregation Framework Examples
==============================

.. default-domain:: mongodb

MongoDB provides flexible data aggregation functionality by way of the
:dbcommand:`aggregate` command. These aggregation operations are
flexible and provide an idiomatic way to combine and perform basic
transformations on data inside of MongoDB. See the
:doc:`/applications/aggregation` document for a full overview of
aggregation capabilities and :doc:`/reference/aggregation` for a
complete reference of all aggregation operators.

This document provides a number of practical examples that display the
capabilities of the aggregation framework. All examples, refer to an
example data set including the "zip codes" in the United States, that
is publicly accessible.

Requirements
------------

#. :program:`mongod` and :program:`mongo`, version 2.1 or later.

#. The zipcode data set. These data are available at:
   `media.mongodb.org/zips.json <http://media.mongodb.org/zips.json>`_.
   Use :program:`mongoimport` to load this data set into your
   :program:`mongod` instance.

Data Model
----------

Each document in this collection has the following form:

.. code-block:: javascript

   {
     "city" : "ACMAR",
     "loc" : [
       -86.51557,
       33.584132
     ],
     "pop" : 6055,
     "state" : "AL",
     "_id" : "35004"
   }

In these documents:

- The ``loc`` field holds the location as a latitude longitude pair.

- The ``pop`` field holds the population.

- The ``_id`` field holds the zipcode as a string.

- The ``city`` field holds the city.

- The ``state`` field holds the two letter state abbreviation.

Examples
--------

All of the following examples use the :func:`aggregate()
<db.collection.aggregate()>` helper in the :program:`mongo`
shell. :func:`aggregate() <db.collection.aggregate()>` provides a
wrapper around the :dbcommand:`aggregate` database command. See the
documentation for your :doc:`driver </applications/drivers>` for a
more idiomatic interface for data aggregation operations.

Cities With Populations Over One Million
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To return all cities with a population greater than one million, use
the following aggregation operation:

.. code-block:: javascript

   db.zipcodes.aggregate( [
                            { $group :
                              { _id : "$city",
                                totalpop : { $sum : "$pop" } } },
                            { $match : {totalpop : { $gte : 1000000 } } }
                          ] );

Aggregations operations using the :func:`aggregate()
<db.collection.aggregate()>` helper, process all documents on the
``zipcodes`` collection. :func:`aggregate()
<db.collection.aggregate()>` takes a single argument, which is an
array of :ref:`pipeline <aggregation-pipelines>` operators that define
the aggregation process.

In the above example, the pipeline passes all documents in the
``zipcodes`` collection through the following steps:

- the :agg:pipeline:`$group` operator collects all documents and
  creates documents for each city.

  These new per-city documents have one field in addition the
  ``_id`` field: ``totalpop`` which is a generated field using the
  :agg:expression:`$sum` operation to calculate the total value of all
  ``pop`` fields in the source documents.

  After the :agg:pipeline:`$group` operation the document in the
  pipeline resemble the following:

  .. code-block:: javascript

     {
       "_id" : "HILLISBURG",
       "totalpop" : 20713
     }

- the :agg:pipeline:`$match` operation filters these documents so that
  the only documents that remain are those where the value of
  ``totalpop`` is greater than or equal to one million.

  The :agg:pipeline:`$match` operation does not alter the documents,
  which have the same format as the documents output by
  :agg:pipeline:`$group`.

Largest and Smallest Cities by State
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To return the smallest and largest cities by population for each
state, use the following aggregation operation:

.. code-block:: javascript

   db.zipcodes.aggregate( [
                            { $group :
                              { _id : { state : "$state", city : "$city" },
                                pop : { $sum : "$pop" } } },
                            { $sort : { pop : 1 } },
                            { $group :
                              { _id : "$_id.state",
                                biggestcity : { $last : "$_id.city" },
                                biggestpop : { $last : "$pop" },
                                smallestcity : { $first : "$_id.city" },
                                smallestpop : { $first : "$pop" } } },
                            { $project :
                              { _id : 0,
                                state : "$_id",
                                biggestCity : { name : "$biggestcity", pop: "$biggestpop" },
                                smallestCity : { name : "$smallestcity", pop : "$smallestpop" } } }
                          ] );


Aggregations operations using the :func:`aggregate()
<db.collection.aggregate()>` helper, process all documents on the
``zipcodes`` collection. :func:`aggregate()
<db.collection.aggregate()>` takes a single argument, which is an
array of :ref:`pipeline <aggregation-pipelines>` operators that define
the aggregation process.

In the above example, the pipeline passes all documents in the
``zipcodes`` collection through the following steps:

- the :agg:pipeline:`$group` operator collects all documents and
  creates new documents for every combination of the ``city`` and
  ``state`` fields in the source documents.

  By specifying the value of ``_id`` as a sub-document that contains
  both field, the operation preserves the ``state`` field for use
  later in the pipeline. The documents produced by this stage of the
  pipeline have a second field, ``pop``, which uses the
  :agg:expression:`$sum` operator to provide the total of the ``pop``
  fields in the source document.

  At this stage in the pipeline, the documents resemble the following:

  .. code-block:: javascript

     {
       "_id" : {
         "state" : "CO",
         "city" : "EDGEWATER"
       },
       "pop" : 13154
     }

- :agg:pipeline:`$sort` operator orders the documents in the pipeline
  based on the vale of the ``pop`` field from largest to
  smallest. This operation does not alter the documents.

- the second :agg:pipeline:`$group` operator collects the documents in
  the pipeline by the ``state`` field, which is a field inside the
  nested ``_id`` document.

  Within each per-state document this :agg:pipeline:`$group` operator
  specifies four fields: Using the :agg:expression:`$last` expression,
  the :agg:pipeline:`$group` operator creates the ``biggestcity`` and
  ``biggestpop`` fields that store the city with the largest
  population and that population. Using the :agg:expression:`$first`
  expression, the :agg:pipeline:`$group` operator creates the
  ``smallestcity`` and ``smallestpop`` fields that store the city with
  the smallest population and that population.

  The documents, at this stage in the pipeline resemble the following:

  .. code-block:: javascript

     {
       "_id" : "WA",
       "biggestcity" : "SEATTLE",
       "biggestpop" : 520096,
       "smallestcity" : "BENGE",
       "smallestpop" : 2
     }

- The final operation is :agg:pipeline:`$project`, which  renames the
  ``_id`` field  to ``state`` and moves the ``biggestcity``,
  ``biggestpop``, ``smallestcity``, and ``smallestpop`` into ``biggestCity`` and
``smallestCity`` sub-documments.

The final output of this aggregation operation is:

.. code-block:: javascript

   {
     "state" : "RI",
     "biggestCity" : {
       "name" : "CRANSTON",
       "pop" : 176404
     },
     "smallestCity" : {
       "name" : "CLAYVILLE",
       "pop" : 45
     }
   }

Average City Population by State
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To return the average populations for cities in each state, use the
following aggregation operation:

.. code-block:: javascript

   db.zipcode.aggregate( [
                           { $group :
                             { _id : { state : "$state", city : "$city" },
                               pop : { $sum : "$pop" } } },
                           { $group :
                             { _id : "$_id.state",
                               avgCityPop : { $avg : "$pop" } } },
                         ] );

Aggregations operations using the :func:`aggregate()
<db.collection.aggregate()>` helper, process all documents on the
``zipcodes`` collection. :func:`aggregate()
<db.collection.aggregate()>` takes a single argument, which is an
array of :ref:`pipeline <aggregation-pipelines>` operators that define
the aggregation process.

In the above example, the pipeline passes all documents in the
``zipcodes`` collection through the following steps:

- the :agg:pipeline:`$group` operator collects all documents and
  creates new documents for every combination of the ``city`` and
  ``state`` fields in the source document.

  After this stage in the pipeline, the documents resemble the
  following:

  .. code-block:: javascript

     {
       "_id" : {
         "state" : "CO",
         "city" : "EDGEWATER"
       },
       "pop" : 13154
     }

- the second :agg:pipeline:`$group` operator collects documents by the
  ``state`` field and use the :agg:expression:`$avg` expression to
  compute a value for the ``avgCityPop`` field.

The final output of this aggregation operation is:

.. code-block:: javascript

   {
     "_id" : "MN",
     "avgCityPop" : 5335
   },
