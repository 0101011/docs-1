=======================
Administer Replica Sets
=======================

.. default-domain:: mongodb

This section gives overview information on a number of replica set
administration procedures. You can find documentation of additional
procedures in the :ref:`replica set tutorials
<replica-set-tutorials-list>` section.

.. _replica-set-admin-procedure-add-member:

Adding Members
--------------

Before adding a new member to an existing :term:`replica set`, do one of
the following to prepare the new member's :term:`data directory <dbpath>`:

- Make sure the new member's data directory *does not* contain data. The
  new member will copy the data from an existing member.

  If the new member is in a :term:`recovering` state, it must exit and
  become a :term:`secondary` before MongoDB
  can copy all data as part of the replication process. This process
  takes time but does not require administrator intervention.

- Manually copy the data directory from an existing member. The new
  member becomes a secondary member and will catch up to the current
  state of the replica set after a short interval. Copying the data over
  manually shortens the amount of time for the new member to become
  current.

  Ensure that you can copy the data directory to the new member and
  begin replication within the :ref:`window allowed by the oplog <replica-set-oplog-sizing>`. If the
  difference in the amount of time between the most recent operation and
  the most recent operation to the database exceeds the length of the
  :term:`oplog` on the existing members, then the new instance will have
  to perform an initial sync, which completely resynchronizes the data, as described in
  :ref:`replica-set-resync-stale-member`.

   Use :method:`db.printReplicationInfo()` to check the current state of
   replica set members with regards to the oplog.

For the procedure to add a member to a replica set, see
:doc:`/tutorial/expand-replica-set`.

.. _replica-set-admin-procedure-remove-members:

Removing Members
----------------

You may remove a member of a replica set at any time; *however*, for best
results always *shut down* the :program:`mongod` instance before
removing it from a  replica set.

.. versionchanged:: 2.2
   Before 2.2, you *had* to shut down the :program:`mongod` instance
   before removing it. While 2.2 removes this  requirement, it remains
   good practice.

To remove a member, use the
:method:`rs.remove()` method in the :program:`mongo` shell while
connected to the current :term:`primary`. Issue the
:method:`db.isMaster()` command when connected to *any* member of the
set to determine the current primary. Use a command in either
of the following forms to remove the member:

.. code-block:: javascript

   rs.remove("mongo2.example.net:27017")
   rs.remove("mongo3.example.net")

This operation disconnects the shell briefly and forces a
re-connection as the :term:`replica set` renegotiates which member
will be primary. The shell displays an error even if this
command succeeds.

You can re-add a removed member to a replica set at any time using the
:ref:`procedure for adding replica set members <replica-set-admin-procedure-add-member>`.
Additionally, consider using the :ref:`replica set reconfiguration procedure
<replica-set-reconfiguration-usage>` to change the
:data:`~local.system.replset.members[n].host` value to rename a member in a replica set
directly.

.. _replica-set-admin-procedure-replace-member:

Replacing a Member
------------------

Use this procedure to replace a member of a replica set when the hostname
has changed. This procedure preserves all existing configuration
for a member, except its hostname/location.

You may need to replace a replica set member if you want to replace an
existing system and only need to change the hostname rather than
completely replace all configured options related to the previous
member.

Use :method:`rs.reconfig()` to change the value of the
:data:`~local.system.replset.members[n].host` field to reflect the new hostname or port
number. :method:`rs.reconfig()` will not change the value of
:data:`~local.system.replset.members[n]._id`.

.. code-block:: javascript

   cfg = rs.conf()
   cfg.members[0].host = "mongo2.example.net:27019"
   rs.reconfig(cfg)

.. warning::

   Any replica set configuration change can trigger the current
   :term:`primary` to step down, which forces an :ref:`election <replica-set-elections>`. This
   causes the current shell session, and clients connected to this replica set,
   to produce an error even when the operation succeeds.

.. _replica-set-node-priority-configuration:
.. _replica-set-member-priority-configuration:

Adjusting Priority
------------------

To change the value of the :data:`~local.system.replset.members[n].priority` in the
replica set configuration, use the following sequence of commands in
the :program:`mongo` shell:

.. code-block:: javascript

   cfg = rs.conf()
   cfg.members[0].priority = 0.5
   cfg.members[1].priority = 2
   cfg.members[2].priority = 2
   rs.reconfig(cfg)

The first operation uses :method:`rs.conf()` to set the local variable
``cfg`` to the contents of the current replica set configuration, which
is a :term:`document`. The next three operations change the
:data:`~local.system.replset.members[n].priority` value in the ``cfg`` document for the
first three members configured in the :data:`members
<local.system.replset.members>` array. The final operation
calls :method:`rs.reconfig()` with the argument of ``cfg`` to initialize
the new configuration.

.. include:: /includes/note-rs-conf-array-index.rst

If a member has :data:`~local.system.replset.members[n].priority` set to ``0``, it is
ineligible to become :term:`primary` and will not seek
election. :ref:`Hidden members <replica-set-hidden-members>`,
:ref:`delayed members <replica-set-delayed-members>`, and
:ref:`arbiters <replica-set-arbiters>` all have :data:`~local.system.replset.members[n].priority`
set to ``0``.

All members have a :data:`~local.system.replset.members[n].priority` equal to ``1`` by default.

The value of :data:`~local.system.replset.members[n].priority` can be any floating point
(i.e. decimal) number between ``0`` and ``1000``. Priorities
are only used to determine the preference in election. The priority
value is used only in relation to other members. With the exception of
members with a priority of ``0``, the absolute value of the
:data:`~local.system.replset.members[n].priority` value is irrelevant.

Replica sets will preferentially elect and maintain the primary status
of the member with the highest :data:`~local.system.replset.members[n].priority` setting.

.. warning::

   Replica set reconfiguration can force the current primary to step
   down, leading to an election for primary in the replica
   set. Elections cause the current primary to close all open
   :term:`client` connections.

   Perform routine replica set reconfiguration during scheduled
   maintenance windows.

.. seealso:: The :ref:`Replica Reconfiguration Usage
   <replica-set-reconfiguration-usage>` example revolves around
   changing the priorities of the :data:`~local.system.replset.members` of a replica set.

.. _replica-set-procedure-add-arbiter:

Adding an Arbiter
-----------------

For a description of :term:`arbiters <arbiter>` and their purpose in
:term:`replica sets <replica set>`, see :ref:`replica-set-arbiters`.

To prevent tied :term:`elections <election>`, do not add an arbiter to a
set if the set already has an odd number of voting members.

Because arbiters do not hold a copies of collection data, they have minimal
resource requirements and do not require dedicated hardware.

1. Create a data directory for the arbiter. The :program:`mongod` uses
   this directory for
   configuration information. It *will not* hold database collection data.
   The following example creates the ``/data/arb`` data directory:

   .. code-block:: sh

      mkdir /data/arb

#. Start the arbiter, making sure to specify the replica set name and
   the data directory. Consider the following example:

   .. code-block:: sh

      mongod --port 30000 --dbpath /data/arb --replSet rs

#. In a :program:`mongo` shell connected to the :term:`primary`, add the
   arbiter to the replica set by issuing the :method:`rs.addArb()`
   method, which uses the following syntax:

   .. code-block:: javascript

      rs.addArb("<hostname><:port>")

   For example, if the arbiter runs on ``m1.example.net:30000``, you
   would issue this command:

   .. code-block:: javascript

      rs.addArb("m1.example.net:30000")

.. _replica-set-configure-sync-target:

Manually Configuring a Secondary's Sync Target
----------------------------------------------

To override the default sync target selection logic, you may manually
configure a :term:`secondary` member's sync target for pulling
:term:`oplog` entries temporarily. The following operations provide
access to this functionality:

- :dbcommand:`replSetSyncFrom` command, or

- :method:`rs.syncFrom()` helper in the :program:`mongo` shell

Only modify the default sync logic as needed, and always exercise
caution.  :method:`rs.syncFrom()` will not affect an in-progress
initial sync operation. To affect the sync target for the initial sync, run
:method:`rs.syncFrom()` operation *before* initial sync.

If you run :method:`rs.syncFrom()` during initial sync, MongoDB
produces no error messages, but the sync target will not change until
after the initial sync operation.

.. note::

   .. include:: /includes/fact-replica-set-sync-from-is-temporary.rst

.. _replica-set-procedure-change-oplog-size:

Changing Oplog Size
-------------------

The following is an overview of the procedure for changing the size of
the oplog. For a detailed procedure, see
:doc:`/tutorial/change-oplog-size`.

.. include:: /includes/procedure-change-oplog-size.rst

.. _replica-set-resync-stale-member:

Resyncing a Member of a Replica Set
-----------------------------------

When a secondary's replication process falls behind so far that
:term:`primary` overwrites oplog entries that the secondary has not
yet replicated, that secondary cannot catch up and becomes "stale."
When that occurs, you must completely resynchronize the member by removing its data and
performing an initial sync.

To do so, use one of the following approaches:

- Restart the :program:`mongod` with an empty data directory and let
  MongoDB's normal initial syncing feature restore the data. This
  is the more simple option, but may take longer to replace the data.

  See :ref:`replica-set-auto-resync-stale-member`.

- Restart the machine with a copy of a recent data directory from
  another member in the :term:`replica set`. This procedure can replace
  the data more quickly but requires more manual steps.

  See :ref:`replica-set-resync-by-copying`.

.. index:: replica set; resync
.. _replica-set-auto-resync-stale-member:

Automatically Resync a Stale Member
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This procedure relies on MongoDB's regular process for initial
sync. This will restore the data on the stale member to reflect the
current state of the set. For an overview of MongoDB initial sync
process, see the :ref:`replica-set-syncing` section.

To resync the stale member:

1. Stop the stale member's :program:`mongod` instance. On Linux
   systems you can use :option:`mongod --shutdown` Set
   :option:`--dbpath <mongod --dbpath>` to the member's data
   directory, as in the following:

   .. code-block:: sh

      mongod --dbpath /data/db/ --shutdown

#. Delete all data and sub-directories from the member's data
   directory.  By removing the data :setting:`dbpath`, MongoDB will
   perform a complete resync. Consider making a backup first.

#. Restart the :program:`mongod` instance on the member.  For example:

   .. code-block:: sh

      mongod --dbpath /data/db/ --replSet rsProduction

   At this point, the :program:`mongod` will perform an initial
   sync. The length of the initial sync may process depends on the
   size of the database and network connection between members of the
   replica set.

   Initial sync operations can impact the other members of the set and
   create additional traffic to the primary, and can only occur if
   another member of the set is accessible and up to date.

.. index:: replica set; resync
.. _replica-set-resync-by-copying:

Resync by Copying All Datafiles from Another Member
```````````````````````````````````````````````````

This approach uses a copy of the data files from an existing member of
the replica set, or a back of the data files to "seed" the stale member.

The copy or backup of the data files **must** be sufficiently recent
to allow the new member to catch up with the :term:`oplog`, otherwise
the member would need to perform an initial sync.

.. note::

   In most cases you cannot copy data files from a running
   :program:`mongod` instance to another, because the data files will
   change during the file copy operation. Consider the
   :doc:`/core/backups` documentation for several methods
   that you can use to capture a consistent snapshot of a running
   :program:`mongod` instance.

After you have copied the data files from the "seed" source, start the
:program:`mongod` instance and allow it to apply all operations from
the oplog until it reflects the current state of the replica set.
