======================
Modify User Privileges
======================

.. default-domain:: mongodb

Overview
--------

A user's privileges determine the  :ref:`actions
<security-user-actions>` available to that user in the context of a
:ref:`resource <resource-document>`. Users receive privileges
through role assignments. A user can have multiple roles, and each role
can have multiple privileges.

Grant and revoke the user's roles using the :dbcommand:`grantRolesToUser`
and :dbcommand:`revokeRolesFromUser` commands.

For an overview of roles and privileges, see :ref:`authorization`.

Prerequisites
-------------

.. include:: /includes/access-grant-role-to-user.rst

.. include:: /includes/access-revoke-role-from-user.rst

Procedure
---------

Collect User's Roles
~~~~~~~~~~~~~~~~~~~~

Issue the :dbcommand:`usersInfo` command or :method:`db.getUser()` method to
display user information. The :data:`~admin.system.users.roles` array
specifies the user's roles.

For example, to view roles for ``accountUser01`` on the ``accounts``
database, issue the following:

.. code-block:: javascript

   use accounts
   db.getUser("accountUser01")

The :data:`~admin.system.users.roles` array displays all roles for
``accountUser01``:

.. code-block:: javascript

   "roles" : [
       {
           "role" : "readWrite",
           "db" : "accounts"
       },
       {
           "role" : "siteRole01",
           "db" : "records"
        }
   ]

Identify the Privileges Granted by the Roles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For a given role, issue the :dbcommand:`rolesInfo` command or
:method:`db.getRole()` method, and include the ``showPrivileges`` parameter.
The resulting role document displays the privileges granted directly and the
roles from which this role inherits privileges.

For example, to view the privileges granted by ``siteRole01``, use the
following operation:

.. code-block:: javascript

   use records
   db.getRole("siteRole01", {showPrivileges: true})

In the :data:`~admin.system.roles.roles` array, ``siteRole01`` inherits
privileges from the ``corporate`` database's ``read`` role. In
:data:`~admin.system.roles.privileges` array, ``siteRole01`` grants the
privilege to perform ``find``, ``insert``, and ``update`` actions on the
``records`` database:

.. code-block:: javascript

   "roles" : [
       {
           "role" : "read",
           "db" : "corporate"
       }
   ],
   "privileges" : [
       {
           "resource" : {
               "db" : "records",
               "collection" : ""
           },
           "actions" : [
               "find",
               "insert",
               "update"
           ]
       }
   ]

To view the privileges granted by the :authrole:`read` role, use
:method:`db.getRole()` again with the appropriate parameters.

Identify the Privileges to Grant or Revoke
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Determine which role contains the privileges *and only those privileges*.

If such a role does not exist, then to grant the privileges will require
:doc:`creating a new role </tutorial/define-roles>` with the specific
set of privileges.

To revoke a subset of privileges provided by an existing role: revoke
the original role, :doc:`create a new role </tutorial/define-roles>`
that contains the privileges *to keep*, and then grant that role to
the user.

Modify User
~~~~~~~~~~~

Revoke a Role
`````````````

Revoke a role using the :dbcommand:`revokeRolesFromUser` command. For
example, to remove the :authrole:`readWrite` role on the ``accounts``
database from the user ``accountUser01``, use an operation that
resembles the following:

.. code-block:: javascript

   use accounts
   db.runCommand( { revokeRolesFromUser: "accountUser01",
                    roles: [ { role: "readWrite", db: "accounts" } ]
                } )

The :dbcommand:`revokeRolesToUser` command removes the
:authrole:`readWrite` role on the ``accounts`` database from
``accountUser01``\ 's existing roles.

Grant a Role
````````````

Grant the role using the :dbcommand:`grantRolesToUser` command. For example,
to grant the user ``accountUser01`` the :authrole:`read` role on
the ``records`` database, use an operation that resembles the following:

.. code-block:: javascript

   use accounts
   db.runCommand( { grantRolesToUser: "accountUser01",
                    roles: [ { role: "read", db: "records" } ]
                } )

The :dbcommand:`grantRolesToUser` command adds the ``read`` role on the
``records`` database to ``accountUser01``\ 's existing roles.
