==========================================
Restore a Replica Set from MongoDB Backups
==========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This procedure outlines the process for taking MongoDB data and
restoring that data into a new :term:`replica set`. Use this approach
for seeding test deployments from production backups as well as part
of disaster recovery.

You *cannot* restore a single data set to three new
:binary:`~bin.mongod` instances and *then* create a replica set. In this
situation MongoDB will force the secondaries to perform an initial
sync. The procedures in this document describe the correct and
efficient ways to deploy a replica set.

Restore Database into a Single Node Replica Set
-----------------------------------------------

#. Obtain backup MongoDB Database files. These files may come from a
   :doc:`file system snapshot
   </tutorial/backup-with-filesystem-snapshots>`.  The
   |MMS|
   produces MongoDB database files for :mms-docs:`stored snapshots
   </backup/tutorial/restore-from-snapshot/>` and :mms-docs:`point and time
   snapshots </backup/tutorial/restore-from-point-in-time-snapshot/>`.
   You can also use :binary:`~bin.mongorestore` to restore database files
   using data created with :binary:`~bin.mongodump`. See
   :doc:`/tutorial/backup-with-mongodump` for
   more information.


#. Start a :binary:`~bin.mongod` using data files from the backup as the
   ``dbpath``. In the following example, ``/data/db`` is the ``dbpath`` to
   the data files.

   .. code-block:: sh

      mongod --dbpath /data/db --replSet <replName>

#. Connect a :binary:`~bin.mongo` shell to the :binary:`~bin.mongod` instance.

   .. code-block:: sh

      mongo

#. Use :method:`rs.initiate()` to initiate the new replica set.

   .. code-block:: sh

      rs.initiate()

.. include:: /includes/replacement-mms.rst

Add Members to the Replica Set
------------------------------

MongoDB provides two options for restoring secondary members of a
replica set:

1. Manually copy the database files to each data directory.

2. Allow :ref:`initial sync <replica-set-initial-sync>` to distribute
   data automatically.

The following sections outlines both approaches.

.. note::

   If your database is large, initial sync can take a long time to
   complete. For large databases, it might be preferable to copy the
   database files onto each host.

Copy Database Files and Restart :binary:`~bin.mongod` Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the following sequence of operations to "seed" additional members
of the replica set with the restored data by copying MongoDB data
files directly.

#. Shut down the :binary:`~bin.mongod` instance that you restored.
   Using :option:`--shutdown <mongod --shutdown>` or
   :method:`db.shutdownServer()` to ensure a clean shut down.

#. Copy the :term:`primary's <primary>` data directory into the
   :setting:`dbpath` of the other members of the replica set. The
   :setting:`dbpath` is ``/data/db`` by default.

#. Start the :binary:`~bin.mongod` instance that you restored.

#. In a :binary:`~bin.mongo` shell connected to the :term:`primary`, add
   the :term:`secondaries <secondary>` to the replica set using
   :method:`rs.add()`. See :doc:`/tutorial/deploy-replica-set` for
   more information about deploying a replica set.

Update Secondaries using Initial Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the following sequence of operations to "seed" additional members
of the replica set with the restored data using the default *initial
sync* operation.

#. Ensure that the data directories on the prospective replica set
   members are empty.

#. Add each prospective member to the replica set. :ref:`Initial Sync
   <replica-set-initial-sync>` will copy the data from the
   :term:`primary` to the other members of the replica set.
