collection: "inventory"
options:
  show_title: False
  show_collection: False
content:
  source:
    file: example/example-gs-insert.yaml
    ref: 0
---
ref: 1
title:
  text: Query by a Top Level Field
  level: 3
pre: |
  The following operation finds documents whose ``category``
  field equals ``"clothing"``.
operation:
  language: javascript
  code: |
    db.inventory.find( { "category": "clothing" } )
post: "The result set includes only the matching documents."
results:
  - |
    {
      "_id" : ObjectId("53d98f133bb604791249ca99"),
      "item" : "ABC1",
      "details" : { "model" : "14Q3", "manufacturer" : "XYZ Company" },
      "stock" : [ { "size" : "S", "qty" : 25 }, { "size" : "M", "qty" : 50 } ],
      "category" : "clothing"
    }
  - |
    {
      "_id" : ObjectId("53d98fc93bb604791249ca9a"),
      "item" : "ABC2",
      "details" : { "model" : "14Q3", "manufacturer" : "M1 Corporation" },
      "stock" : [ { "size" : "M", "qty" : 50 } ],
      "category" : "clothing"
    }
  - |
    {
      "_id" : ObjectId("53d98fc93bb604791249ca9b"),
      "item" : "MNO2",
      "details" : { "model" : "14Q3", "manufacturer" : "ABC Company" },
      "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ],
      "category" : "clothing"
    }
  - |
    {
      "_id" : ObjectId("53d990403bb604791249ca9d"),
      "item" : "BE10",
      "details" : { "model" : "14Q2", "manufacturer" : "XYZ Company" },
      "stock" : [ { "size" : "L", "qty" : 5 } ],
      "category" : "clothing"
    }
---
ref: 2
title:
  text: Query by a Field in an Embedded Document
  level: 3
pre: |
  To specify a condition on a field within an embedded document, use the
  :term:`dot notation`. Dot notation *requires* quotes around the dotted
  field name.
operation:
  pre: |
    The following operation specifies a condition on the ``model`` field
    contained in the ``details`` embedded document.
  language: javascript
  code: |
    db.inventory.find( { "details.model": "14Q3" } )
post: |
  The result set includes only the matching documents.
results:
  - |
    {
      "_id" : ObjectId("53d98f133bb604791249ca99"),
      "item" : "ABC1",
      "details" : { "model" : "14Q3", "manufacturer" : "XYZ Company" },
      "stock" : [ { "size" : "S", "qty" : 25 }, { "size" : "M", "qty" : 50 } ],
      "category" : "clothing"
    }
  - |
    {
      "_id" : ObjectId("53d98fc93bb604791249ca9a"),
      "item" : "ABC2",
      "details" : { "model" : "14Q3", "manufacturer" : "M1 Corporation" },
      "stock" : [ { "size" : "M", "qty" : 50 } ],
      "category" : "clothing"
    }
  - |
    {
      "_id" : ObjectId("53d98fc93bb604791249ca9b"),
      "item" : "MNO2",
      "details" : { "model" : "14Q3", "manufacturer" : "ABC Company" },
      "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ],
      "category" : "clothing"
    }
final: |
  For more information on querying on fields within an embedded
  document, see :ref:`read-operations-subdocuments`.
---
ref: 3
title:
  text: Query by a Field in an Array
  level: 3
pre: |
  The ``stock`` array contains embedded documents as its elements. To
  specify a condition on a field in these documents, use the
  :term:`dot notation`. Dot notation *requires* quotes around the dotted
  field names in the query condition.
operation:
  pre: |
    Query for documents whose ``stock`` array contains an embedded
    document with a field ``size`` equal to ``"L"``.
  language: javascript
  code: |
    db.inventory.find( { "stock.size": "L" } )
post: The result set includes only the matching documents.
results:
  - |
    {
      "_id" : ObjectId("53d98fc93bb604791249ca9b"),
      "item" : "MNO2",
      "details" : { "model" : "14Q3", "manufacturer" : "ABC Company" },
      "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ],
      "category" : "clothing"
    }
  - |
    {
      "_id" : ObjectId("53d98fc93bb604791249ca9c"),
      "item" : "IJK2",
      "details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" },
      "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ],
      "category" : "houseware"
    }
  - |
    {
      "_id" : ObjectId("53d990403bb604791249ca9d"),
      "item" : "BE10",
      "details" : { "model" : "14Q2", "manufacturer" : "XYZ Company" },
      "stock" : [ { "size" : "L", "qty" : 5 } ],
      "category" : "clothing"
    }
final: |
  For more information on querying on arrays, such as specifying multiple
  conditions on array elements, see :ref:`read-operations-arrays` and
  :operator:`$elemMatch`.
---
ref: 4
title:
  text: Combine Query Conditions
  level: 3
pre: |
  You can combine query conditions by separating the conditions with a
  comma in the conditions document.

  The following query combines three conditions.
operation:
  language: javascript
  code: |
    db.inventory.find( { "category": "clothing", "details.model": "14Q3", "stock.size": "L" } )
post: |
  The displayed result set shows that the query matched only one
  document that satisfies all three criteria.
results:
  - |
    {
        "_id" : ObjectId("53d98fc93bb604791249ca9b"),
        "item" : "MNO2",
        "details" : { "model" : "14Q3", "manufacturer" : "ABC Company" },
        "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ],
        "category" : "clothing"
    }
...