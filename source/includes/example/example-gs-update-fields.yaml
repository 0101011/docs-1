collection: "inventory"
options:
  show_title: False
  show_collection: False
content:
  - '{ "item" : "ABC1", "details" : { "model" : "14Q3", "manufacturer" : "XYZ Company" }, "stock" : [ { "size" : "S", "qty" : 25 }, { "size" : "M", "qty" : 50 } ], "category" : "clothing" }'
  - '{ "item" : "ABC2", "details" : { "model" : "14Q3", "manufacturer" : "M1 Corporation" }, "stock" : [ { "size" : "M", "qty" : 50 } ], "category" : "clothing" }'
  - '{ "item" : "MNO2", "details" : { "model" : "14Q3", "manufacturer" : "ABC Company" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "clothing" }'
  - '{ "item" : "IJK2", "details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }'
  - '{ "item" : "BE10", "details" : { "model" : "14Q2", "manufacturer" : "XYZ Company" }, "stock" : [ { "size" : "L", "qty" : 5 } ], "category" : "clothing" }'
  - '{ "item" : "ZYT1", "details" : { "model" : "14Q1", "manufacturer" : "ABC Company" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 } ], "category" : "houseware" }'
---
title:
  text: Update Top-Level Fields
  level: 4
ref: 1
pre: |
  For the document with ``item`` equal to ``"MNO2"``, use the
  :update:`$set` operator to update the ``category`` field and the
  ``details`` field to the specified values and the
  :update:`$currentDate` operator to update the field ``lastModified``
  with the current date.
operation:
    language: javascript
    code: |
      db.inventory.update(
          { "item": "MNO2" },
          {
            $set: {
              "category": "apparel",
              "details": { "model": "14Q3", "manufacturer": "XYZ Company" }
            },
            $currentDate: { "lastModified": true }
          }
      )
post: |
  The update operation returns a :method:`WriteResult` object which
  contains the status of the operation. A successful update of the
  document returns the following object:
results:
  - 'WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })'
---
title:
  text: Update an Embedded Field
  level: 4
ref: 2
pre: |
  To update a field within an embedded document, use the :term:`dot
  notation`. When using the dot notation, enclose the whole dotted
  field name in quotes.
operation:
  - pre: |
      The following updates the ``model`` field within the embedded
      ``details`` document.
    language: javascript
    code: |
      db.inventory.update(
        { item: "ABC1" },
        { $set: { "details.model": "14Q2" } }
      )
post: |
   The update operation returns a :method:`WriteResult` object which
   contains the status of the operation. A successful update of the
   document returns the following object:
results:
  - 'WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })'
---
title: 
  text: Update Multiple Documents
  level: 4
ref: 3
pre: |
  By default, the :method:`~db.collection.update()` method updates a
  single document. To update multiple documents, use the ``multi``
  option in the :method:`~db.collection.update()` method.
operation:
  - pre: |
      Update the ``category`` field to ``"apparel"`` and update the
      ``lastModified`` field to the current date for *all* documents
      that have ``category`` field equal to ``"clothing"``.
    language: javascript
    code: |
      db.inventory.update( 
         { "category": "clothing" },
         {
           $set: { "category": "apparel" },
           $currentDate: { "lastModified": true }
         },
         { multi: true }
      )
post: |
  The update operation returns a :method:`WriteResult` object which
  contains the status of the operation. A successful update of the
  document returns the following object:
results:
  - 'WriteResult({ "nMatched" : 3, "nUpserted" : 0, "nModified" : 3 })'
...