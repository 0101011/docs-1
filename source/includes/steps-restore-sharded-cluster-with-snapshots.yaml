title: Shut down the entire cluster.
stepnum: 1
ref: shutdown-cluster
pre: |
  Stop all :binary:`~bin.mongos` and :binary:`~bin.mongod` processes, including
  all shards *and* all config servers. To stop all members, connect to
  **each** member and issue following operations:
action:
  language: javascript
  code: |
    use admin
    db.shutdownServer()
---
title: Restore the data files.
stepnum: 2
ref: restore
content: |
  On each server, extract the data files to the location where the
  :binary:`~bin.mongod` instance will access them and restore the following:

  - **Data files for each server in each shard.**

    For each shard replica set, restore all the members of the replica
    set. See :doc:`/tutorial/restore-replica-set-from-backup`.

  - **Data files for each config server.**
 
    .. versionchanged:: 3.2

       If restoring to a :ref:`config server replica set (CSRS)
       <csrs>`, restore the members of the replica
       set. See :doc:`/tutorial/restore-replica-set-from-backup`.

    Else, if restoring to 3 mirrored config servers, restore the files
    on each config server :binary:`~bin.mongod` instance as you would a
    standalone node.

  .. seealso:: :ref:`backup-restore-snapshot`.
---
title: Restart the config servers.
stepnum: 3
ref: restart-config-servers
content: |
   - If restoring to a :ref:`config server replica set <csrs>`, restart
     each member of the CSRS.
       
     .. code-block:: sh

       mongod --configsvr --replSet <CSRS name> --dbpath <config dbpath> --port 27019

   - Or, if restoring to a three mirrored :binary:`~bin.mongod` instances,
     start exactly three :binary:`~bin.mongod` config server instances.

     .. code-block:: sh

        mongod --configsvr --dbpath <config dbpath> --port 27019
---
title: "Start **one** :binary:`~bin.mongos` instance."
stepnum: 4
ref: restart-one-mongos
content: |
  - If using a :ref:`CSRS <csrs>` deployment, start :binary:`~bin.mongos`
    with the :option:`--configdb` option set to the replica set name
    and seed list of the CSRS started in {{step}}

  - Or, if using three mirrored config servers, start :binary:`~bin.mongos`
    with the :option:`--configdb` option set to the hostnames (and port
    numbers) of the config servers started in {{step}}
    
replacement:
   step: "the step `Restart the config servers.`_"
---
title: "If shard hostnames have changed, update the config database."
stepnum: 5
ref: shard-hostname
content: |
   If shard hostnames have changed, connect a :binary:`~bin.mongo` shell to
   the :binary:`~bin.mongos` instance and update the :data:`~config.shards`
   collection in the :ref:`config-database` to reflect the new
   hostnames.
---
title: "Clear per-shard sharding recovery information."
stepnum: 6
ref: per-shard-recovery
pre: |
   If the backup data was from a deployment using :ref:`CSRS <csrs>`,
   clear out the no longer applicable recovery information on each shard. For each
   shard:
      
   #. Restart the replica set members for the shard with the
      :parameter:`recoverShardingState` parameter set to ``false``.
      Include additional options as required for your specific
      configuration.

      .. code-block:: sh

         mongod --setParameter=recoverShardingState=false --replSet <replSetName>

   #. Connect :binary:`~bin.mongo` shell to the primary of the replica set
      and delete from the ``admin.system.version`` collection the
      document where ``_id`` equals ``minOpTimeRecovery`` id. Use
      write concern ``"majority"``.

      .. code-block:: javascript

         use admin
         db.system.version.remove(
            { _id: "minOpTimeRecovery" },
            { writeConcern: { w: "majority" } }
         )

   #. Shut down the replica set members for the shard.
---
title: "Restart all the shard :binary:`~bin.mongod` instances."
stepnum: 7
ref: restart-shards
content: |
   Do not include the :parameter:`recoverShardingState`  parameter.
---
title: "Restart the other :binary:`~bin.mongos` instances."
stepnum: 8
ref: restart-mongos-instances
content: |
  - If using a CSRS deployment, specify for :option:`--configdb` the
    config server replica set name and a seed list of the CSRS started
    in {{step}}

  - Or, if using three mirrored config servers, specify for
    :option:`--configdb` the hostnames (and port numbers) of the config
    servers started in {{step}} All :binary:`~bin.mongos` must specify the
    same :option:`--configdb` string.

replacement:
   step: "the step `Restart the config servers.`_"
---
title: "Verify that the cluster is operational."
stepnum: 9
ref: ensure
pre: |
  Connect to a :binary:`~bin.mongos` instance from a :binary:`~bin.mongo` shell
  and use the :method:`db.printShardingStatus()` method to ensure that
  the cluster is operational.
action:
  language: javascript
  code: |
    db.printShardingStatus()
    show collections
...
