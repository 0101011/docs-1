======================================================
Release Notes for MongoDB 2.4 (2.3 Development Series)
======================================================

.. default-domain:: mongodb

MongoDB 2.4 is currently in development, as part of the 2.3
development release series. While 2.3-series releases are currently
available, these versions of MongoDB are for **testing** *only*, and
are *not for production use* under any circumstances.

.. important:: *All* interfaces *and* functionality described in this
   document are subject to change before the 2.4.0 release.

This document will eventually contain the full release notes for
MongoDB 2.4; during the development cycle this document will contain
documentation of new features and functionality only available in the
2.3 releases.

.. contents:: See the :doc:`full index of this page <2.4-changes>` for
              a complete list of changes included in 2.4.
   :backlinks: none
   :local:
   :depth: 2

Downloading
-----------

You can download the 2.3 release on the `downloads page`_ in the
:guilabel:`Development Release (Unstable)` section. There are no
distribution packages for development releases, but you can use the
binaries provided for testing purposes. See
:doc:`/tutorial/install-mongodb-on-linux`,
:doc:`/tutorial/install-mongodb-on-windows`, or
:doc:`/tutorial/install-mongodb-on-os-x` for the basic installation
process.

.. _`downloads page`: http://www.mongodb.org/downloads

Upgrade Process
---------------

See :doc:`/release-notes/2.4-upgrade` for full upgrade instructions.

Changes
-------

Text Search
~~~~~~~~~~~

Text search supports the search of string content in documents of a
collection. Text search introduces a :ref:`text index
<index-feature-text>` type and a new :dbcommand:`text` command. See
:doc:`/applications/text-search` for more information the text search
feature.

Enable Text Search
``````````````````

.. include:: /includes/warning-text-search-not-for-production.rst
   :end-before: significant-storage-requirements

To perform text search, you need to enable the text search feature.

.. include:: /includes/fact-text-search-beta.rst

You can enable the ``text`` search feature at startup. See
:doc:`/tutorial/enable-text-search` for details.

Index Behavior
``````````````

To support text search, MongoDB 2.4 introduces a new ``text`` index
type:

- You can only access the index with the :dbcommand:`text` command.

- Any set of fields containing string data may be text indexed.

- ``text`` indexes are fully consistent and updated in real-time as
  applications insert, update, or delete documents from the database.

- ``text`` indexes drop language-specific stop words (e.g. in English,
  “the,” “an,” “a,” “and,” etc.) and uses simple language-specific
  suffix stemming. See :ref:`text-search-languages` for the supported
  languages.:

- MongoDB stores words stemmed during insertion, using simple suffix
  stemming. MongoDB automatically stems :dbcommand:`text` queries
  before beginning the query.

``text`` indexes have the following storage requirements and
performance impacts:

- Text indexes can be large. They contain one index entry for each
  unique post-stemmed word in each indexed field for each document
  inserted.

- Building a ``text`` index is very similar to building a large
  multi-key index, and therefore may take longer than building a simple
  ordered (scalar) index.

- ``text`` indexes will impact insertion throughput because MongoDB
  must add an index entry for each unique post-stemmed word in each
  indexed field of each new source document.

- Additionally, ``text`` indexes do not store phrases or information
  about the proximity of words in the documents. As a result, phrase
  queries will run much more effectively when the entire collection
  fits in RAM.

Additionally, the current **beta** implementation of ``text``
indexes have the following limitations and behaviors:

- Some :dbcommand:`text` searches may affect performance on your
  :program:`mongod`, particularly for negation queries and phrase
  matches that cannot use the index as effectively as other kinds of
  queries.

- MongoDB does not stem phrases or negations in :dbcommand:`text`
  queries.

- The index is case-insensitive.

- .. include:: /includes/fact-text-index-limit-one.rst

- API is subject to change in subsequent releases.

Create Text Index
``````````````````

The following example creates a ``text`` index on the field ``content``
in the collection ``articles``:

.. code-block:: javascript

   db.articles.ensureIndex( { content: "text" } )

For more information on text indexes and examples, see
:ref:`create-text-index`.

Text Command
````````````

To query ``text`` indexes, you must use the :dbcommand:`text` command.
The :dbcommand:`text` command:

- Is case-insensitive.

- Tokenizes and stems the search term(s) during the execution.

- For each tokenized/stemmed search term, assigns a score to each
  document that contains the term in the indexed fields. The score
  determines the relevance of a document to a given search query.

By default, the command returns the top 100 scoring documents in
descending order, but you can specify a different limit.

The following example returns documents from the ``articles``
collection that contain the word ``coffee``, case-insensitive.

.. code-block:: javascript

   db.articles.runCommand( "text", { search: "coffee" } )

.. _kerberos-authentication:

New Modular Authentication System with Support for Kerberos
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   Kerberos authentication is only present in the `MongoDB Subscriber
   Edition <https://www.10gen.com/mongodb-subscriber-edition-download>`_.
   To download the 2.4.0 release candidate the Subscriber Edition, use
   the following resources:

   - `Amazon Linux 6.4 <http://s3.amazonaws.com/downloads.10gen.com/linux/mongodb-linux-x86_64-subscription-amzn64-2.4.0-rc0.tgz>`_
   - `Red Hat Enterprise Linux 6.2 <http://s3.amazonaws.com/downloads.10gen.com/linux/mongodb-linux-x86_64-subscription-rhel62-2.4.0-rc0.tgz>`_
   - `Ubuntu 11.04 <http://s3.amazonaws.com/downloads.10gen.com/linux/mongodb-linux-x86_64-subscription-ubuntu1104-2.4.0-rc0.tgz>`_
   - `SUSE 11 <http://s3.amazonaws.com/downloads.10gen.com/linux/mongodb-linux-x86_64-subscription-suse11-2.4.0-rc0.tgz>`_

In 2.4 the MongoDB Subscriber edition now supports authentication via
a Kerberos mechanism. See
:doc:`/tutorial/control-access-to-mongodb-with-kerberos-authentication`
for more information.

Also consider the following documents that address authenticating to
MongoDB using Kerberos:

- :ecosystem:`Authenticate to MongoDB using Kerberos and the Java
  Driver </ecosystem/tutorial/authenticate-with-java-driver/>`

- :ecosystem:`Authenticate to MongoDB using Kerberos and the C# Driver
  </ecosystem/tutorial/authenticate-with-csharp-driver/>`

.. see:: :doc:`MongoDB Security Practices and Procedures </security>`.

Role Based Access Control and New Privilege Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 2.4 introduces a role based access control system that
provides more granular privileges to MongoDB users. See
:doc:`/reference/user-privileges` for more information.

To support the new access control system, 2.4 also introduces a new
format for documents in a database's :data:`system.user
<<database>.system.user>` collection. See
:doc:`/reference/privilege-documents` for more information.

Use :parameter:`supportCompatibilityFormPrivilegeDocuments` to disable
the legacy privilege documents, which MongoDB continues to support in
2.4.

Default JavaScript Engine Switched to V8 from SpiderMonkey
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The default JavaScript engine used throughout MongoDB, for the
:program:`mongo` shell, :dbcommand:`mapReduce`, :operator:`$where`,
:dbcommand:`group`, and :dbcommand:`eval` is now `V8
<https://developers.google.com/v8/>`_.

.. data:: serverBuildInfo.interpreterVersion

   The :data:`interpreterVersion` field of the document output by
   :method:`db.serverBuildInfo()` in the :program:`mongo` shell
   reports which JavaScript interpreter the :program:`mongod` instance
   is running.

.. method:: interpreterVersion()

   The :method:`interpreterVersion()` in the :program:`mongo` shell
   reports which JavaScript interpreter this :program:`mongo` shell
   uses.

.. DOCS-981

The primary impacts of the switch to V8 are:

- concurrency improvements,
- modernized JavaScript implementation, and
- removal of non-standard SpiderMonkey features.

Improved Concurrency
````````````````````

Previously, MongoDB operations that required the JavaScript interpreter
had to acquire a lock, and a single :program:`mongod` could only run a
single JavaScript operation at a time. The switch to V8 improves
concurrency by permitting multiple JavaScript operations to run at the
same time.

Modernized JavaScript Implementation (ES5)
``````````````````````````````````````````

The 5th edition of `ECMAscript
<http://www.ecma-international.org/publications/standards/Ecma-262.htm>`_,
abbreviated as ES5, adds many new language features, including:

- standardized `JSON
  <http://www.ecma-international.org/ecma-262/5.1/#sec-15.12.1>`_,

- `strict mode
  <http://www.ecma-international.org/ecma-262/5.1/#sec-4.2.2>`_,

- `function.bind()
  <http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.5>`_,

- `array extensions
  <http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.16>`_, and

- getters and setters.

With V8, MongoDB supports the latest standardized version of JavaScript
with the following exceptions. The following features do not work as expected
on documents returned from MongoDB queries:

- ``Object.seal()``,

- ``Object.freeze()``,

- ``Object.preventExtensions()``, and

- enumerable properties.

Removed Non-standard SpiderMonkey Features
``````````````````````````````````````````

V8 does **not** support the following *non-standard* `SpiderMonkey
<https://developer.mozilla.org/en-US/docs/SpiderMonkey>`_ JavaScript
extensions, previously supported by MongoDB's use of SpiderMonkey as
its JavaScript engine.

E4X Extensions
^^^^^^^^^^^^^^

V8 does not support the *non-standard* `E4X
<https://developer.mozilla.org/en-US/docs/E4X>`_ extensions. E4X
provides a native `XML
<https://developer.mozilla.org/en-US/docs/E4X/Processing_XML_with_E4X>`_
object to the JavaScript language and adds the syntax for embedding
literal XML documents in JavaScript code.

You need to use alternative XML processing if you used any of the
following constructors/methods:

- ``XML()``

- ``Namespace()``

- ``QName()``

- ``XMLList()``

- ``isXMLName()``

Destructuring Assignment
^^^^^^^^^^^^^^^^^^^^^^^^

V8 does not support the non-standard destructuring assignments.
Destructuring assignment "extract[s] data from arrays or objects using
a syntax that mirrors the construction of array and object literals." -
`Mozilla docs
<https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7#Destructuring_assignment_(Merge_into_own_page.2Fsection)>`_

.. example::

   The following destructuring assignment is **invalid** with V8 and
   throws a ``SyntaxError``:

   .. code-block:: javascript

      original = [4, 8, 15];
      var [b, ,c] = a;  // <== destructuring assignment
      print(b) // 4
      print(c) // 15

``Iterator()``, ``StopIteration()``, and Generators
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

V8 does not support `Iterator(), StopIteration(), and generators
<https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators>`_.

``InternalError()``
^^^^^^^^^^^^^^^^^^^

V8 does not support ``InternalError()``. Use ``Error()`` instead.

``for each...in`` Construct
^^^^^^^^^^^^^^^^^^^^^^^^^^^

V8 does not support the use of `for each...in
<https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for_each...in>`_
construct. Use ``for (var x in y)`` construct
instead.

.. example::

   The following ``for each (var x in y)`` construct is **invalid**
   with V8:

   .. code-block:: javascript

      var o = { name: 'MongoDB', version: 2.4 };

      for each (var value in o) {
        print(value);
      }

   Instead, in version 2.4, you can use the ``for (var x in y)``
   construct:

   .. code-block:: javascript

      var o = { name: 'MongoDB', version: 2.4 };

      for (var prop in o) {
        var value = o[prop];
        print(value);
      }

   You can also use the array *instance* method ``forEach()`` with the
   ES5 method ``Object.keys()``:

   .. code-block:: javascript

      Object.keys(o).forEach(function (key) {
        var value = o[key];
        print(value);
      });

Array Comprehension
^^^^^^^^^^^^^^^^^^^

V8 does not support `Array comprehensions
<https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Predefined_Core_Objects#Array_comprehensions>`_.

Use other methods such as the ``Array`` instance methods ``map()``,
``filter()``, or ``forEach()``.

.. example::

   With V8, the following array comprehension is **invalid**:

   .. code-block:: javascript

      var a = { w: 1, x: 2, y: 3, z: 4 }

      var arr = [i * i for each (i in a) if (i > 2)]
      printjson(arr)

   Instead, you can implement using the ``Array`` *instance* method
   ``forEach()`` and the ES5 method ``Object.keys()`` :

   .. code-block:: javascript

      var a = { w: 1, x: 2, y: 3, z: 4 }

      var arr = [];
      Object.keys(a).forEach(function (key) {
        var val = a[key];
        if (val > 2) arr.push(val * val);
      })
      printjson(arr)

   .. note::

      The new logic uses the ``Array`` *instance* method ``forEach()`` and
      not the *generic* method ``Array.forEach()``; V8 does **not**
      support ``Array`` *generic* methods. See :ref:`array-generics` for
      more information.

Multiple Catch Blocks
^^^^^^^^^^^^^^^^^^^^^

V8 does not support multiple ``catch`` blocks and will throw a
``SyntaxError``.

.. example::

   The following multiple catch blocks is **invalid** with V8 and will
   throw ``"SyntaxError: Unexpected token if"``:

   .. code-block:: javascript

      try {
        something()
      } catch (err if err instanceof SomeError) {
        print('some error')
      } catch (err) {
        print('standard error')
      }

Conditional Function Definition
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

V8 will produce different outcomes than SpiderMonkey with `conditional
function definitions
<https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Functions>`_.

.. example::

   The following conditional function definition produces different
   outcomes in SpiderMonkey versus V8:

   .. code-block:: javascript

      function test () {
         if (false) {
            function go () {};
         }
         print(typeof go)
      }

   With SpiderMonkey, the conditional function outputs ``undefined``,
   whereas with V8, the conditional function outputs ``function``.

   If your code defines functions this way, it is highly recommended
   that you refactor the code. The following example refactors the
   conditional function definition to work in both SpiderMonkey and V8.

   .. code-block:: javascript

      function test () {
        var go;
        if (false) {
          go = function () {}
        }
        print(typeof go)
      }

   The refactored code outputs ``undefined`` in both SpiderMonkey and V8.

.. note::

   ECMAscript prohibits conditional function definitions. To force V8
   to throw an ``Error``, `enable strict mode
   <http://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/>`_.

   .. code-block:: javascript

      function test () {
        'use strict';

        if (false) {
          function go () {}
        }
      }

   The JavaScript code throws the following syntax error:

   .. code-block:: none

      SyntaxError: In strict mode code, functions can only be declared at top level or immediately within another function.

String Generic Methods
^^^^^^^^^^^^^^^^^^^^^^

V8 does not support `String generics
<https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String#String_generic_methods>`_.
String generics are a set of methods on the ``String`` class that
mirror instance methods.

.. example::

   The following use of the generic method
   ``String.toLowerCase()`` is **invalid** with V8:

   .. code-block:: javascript

      var name = 'MongoDB';

      var lower = String.toLowerCase(name);

   With V8, use the ``String`` instance method ``toLowerCase()`` available
   through an *instance* of the ``String`` class instead:

   .. code-block:: javascript

      var name = 'MongoDB';

      var lower = name.toLowerCase();
      print(name + ' becomes ' + lower);

With V8, use the ``String`` *instance* methods instead of following
*generic* methods:

.. list-table::

   * - ``String.charAt()``
     - ``String.quote()``
     - ``String.toLocaleLowerCase()``

   * - ``String.charCodeAt()``
     - ``String.replace()``
     - ``String.toLocaleUpperCase()``

   * - ``String.concat()``
     - ``String.search()``
     - ``String.toLowerCase()``

   * - ``String.endsWith()``
     - ``String.slice()``
     - ``String.toUpperCase()``

   * - ``String.indexOf()``
     - ``String.split()``
     - ``String.trim()``

   * - ``String.lastIndexOf()``
     - ``String.startsWith()``
     - ``String.trimLeft()``

   * - ``String.localeCompare()``
     - ``String.substr()``
     - ``String.trimRight()``

   * - ``String.match()``
     - ``String.substring()``
     -

.. _array-generics:

Array Generic Methods
^^^^^^^^^^^^^^^^^^^^^

V8 does not support `Array generic methods
<https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array#Array_generic_methods>`_.
Array generics are a set of methods on the ``Array`` class that mirror
instance methods.

.. example::

   The following use of the generic method ``Array.every()`` is
   **invalid** with V8:

   .. code-block:: javascript

      var arr = [4, 8, 15, 16, 23, 42];

      function isEven (val) {
         return 0 === val % 2;
      }

      var allEven = Array.every(arr, isEven);
      print(allEven);

   With V8, use the ``Array`` instance method ``every()`` available through
   an *instance* of the ``Array`` class instead:

   .. code-block:: javascript

      var allEven = arr.every(isEven);
      print(allEven);

With V8, use the ``Array`` *instance* methods instead of the following
*generic* methods:

.. list-table::

   * - ``Array.concat()``
     - ``Array.lastIndexOf()``
     - ``Array.slice()``

   * - ``Array.every()``
     - ``Array.map()``
     - ``Array.some()``

   * - ``Array.filter()``
     - ``Array.pop()``
     - ``Array.sort()``

   * - ``Array.forEach()``
     - ``Array.push()``
     - ``Array.splice()``

   * - ``Array.indexOf()``
     - ``Array.reverse()``
     - ``Array.unshift()``

   * - ``Array.join()``
     - ``Array.shift()``
     -

Array Instance Method ``toSource()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

V8 does not support the ``Array`` instance method `toSource()
<https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/toSource>`_.
Use the ``Array`` instance method ``toString()`` instead.

``uneval()``
^^^^^^^^^^^^

V8 does not support the non-standard method ``uneval()``. Use the
standardized `JSON.stringify()
<https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify>`_
method instead.

Additional Limitations for ``Map-Reduce`` and ``$where``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In MongoDB 2.4, :doc:`map-reduce operations
</applications/map-reduce>`, the :command:`group` command, and
:operator:`$where` operator expressions **cannot** access certain
global functions or properties, such as ``db``, that are available in
the :program:`mongo` shell.

When upgrading to MongoDB 2.4, you will need to refactor your code if
your :doc:`map-reduce operations </applications/map-reduce>`,
:command:`group` commands, or :operator:`$where` operator expressions
include any global shell functions or properties that are no longer
available, such as ``db``.

The following shell functions and properties **are available** to
:doc:`map-reduce operations </applications/map-reduce>`, the
:command:`group` command, and :operator:`$where` operator expressions
in MongoDB 2.4:

.. list-table::
  :header-rows: 1

  * - Available Properties
    - Available Functions
    -

  * -
      | ``args``
      | ``MaxKey``
      | ``MinKey``

    -
      | ``assert()``
      | ``BinData()``
      | ``DBPointer()``
      | ``DBRef()``
      | ``doassert()``
      | ``emit()``
      | ``gc()``
      | ``HexData()``
      | ``hex_md5()``
      | ``isNumber()``
      | ``isObject()``
      | ``ISODate()``
      | ``isString()``

    -
      | ``Map()``
      | ``MD5()``
      | ``NumberInt()``
      | ``NumberLong()``
      | ``ObjectId()``
      | ``print()``
      | ``sleep()``
      | ``Timestamp()``
      | ``tojson()``
      | ``tojsononeline()``
      | ``tojsonObject()``
      | ``UUID()``
      | ``version()``

.. DOCS-752

New Geospatial Indexes with GeoJSON and Improved Spherical Geometry
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   In 2.3.2, the index type for Spherical Geospatial Indexes
   become ``2dsphere``.

The 2.3 series adds a new type of geospatial index that supports
improved spherical queries and GeoJSON. Create the index by specifying
``2dsphere`` as the value of the field in the index specification, as
any of the following:

.. code-block:: javascript

   db.collection.ensureIndex( { geo: "2dsphere" } )
   db.collection.ensureIndex( { type: 1, geo: "2dsphere" } )
   db.collection.ensureIndex( { geo: "2dsphere", type: 1 } )

In the first example you create a spherical geospatial index on the
field named ``geo``, in the second example, you create a compound
index where the first field is a normal index, and the index of the
second field is a spherical geospatial index. Unlike ``2d`` indexes,
fields indexed using the ``2dsphere`` type do not have to be the first
field in a compound index.

You must store data in the fields indexed using the ``2dsphere`` index
using the `GeoJSON`_ specification, at the moment. Support for storing
points, in the form used by the existing ``2d`` (i.e. geospatial)
indexes is forthcoming. Currently, ``2dsphere`` indexes only support
the following GeoJSON shapes:

- ``Point``, as in the following:

  .. code-block:: javascript

     { "type": "Point", "coordinates": [ 40, 5 ] }

- ``LineString``, as in the following:

  .. code-block:: javascript

     { "type": "LineString", "coordinates": [ [ 40, 5 ], [ 41, 6 ] ] }

- ``Polygon``, as in the following:

  .. code-block:: javascript

     {
       "type": "Polygon",
       "coordinates": [ [ [ 40, 5 ], [ 40, 6 ], [ 41, 6 ], [ 41, 5 ], [ 40, 5 ] ] ]
     }

To query ``2dsphere`` indexes, all current geospatial :ref:`query operators
<query-selectors-geospatial>` with an additional
:operator:`$geoIntersects` operator. Currently, all queries using the
``2dsphere`` index must pass the query selector (e.g. :operator:`$near`,
:operator:`$geoIntersects`) a GeoJSON document. With the exception of the
GeoJSON requirement, the operation of :operator:`$near` is the same
for ``2dsphere`` indexes as ``2d`` indexes.

.. operator:: $geoIntersects

   The :operator:`$geoIntersects` selects all indexed points that
   intersect with the provided geometry. (i.e. ``Point``, ``LineString``,
   and ``Polygon``.) You must pass :operator:`$geoIntersects` a document
   in GeoJSON format.

   .. code-block:: javascript

      db.collection.find( { loc: { $geoIntersects:
                                   { $geometry: { "type": "Point",
                                                  "coordinates": [ 40, 5 ]
                                   } } } } )

   This query will select all indexed objects that intersect with the
   ``Point`` with the coordinates ``[ 40, 5 ]``. MongoDB will return
   documents as intersecting if they have a shared edge.

   The :operator:`$geometry` operator takes a single `GeoJSON
   document`_.

.. operator:: $geometry

   .. _`GeoJSON document`: http://www.geojson.org/geojson-spec.html#appendix-a-geometry-examples

.. _`GeoJSON`: http://geojson.org/geojson-spec.html

New Hashed Index and Sharding with a Hashed Shard Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To support an easy to configure and evenly distributed shard key, version 2.3 adds a
new "``hashed``" index type that indexes based on hashed values. This
section introduces and documents both the new index type and its use
in sharding:

Hashed Index
````````````

The new ``hashed`` index exists primarily to support automatically
hashed shard keys. Consider the following properties of hashed
indexes:

- Hashed indexes must only have a single field, and cannot be compound
  indexes.

- Fields indexed with hashed indexes must *not* hold arrays. Hashed
  indexes cannot be multikey indexes.

- Hashed indexes cannot have a ``unique`` constraint.

  You *may* create hashed indexes with the ``sparse`` property.

- MongoDB can use the hashed index to support equality queries, but
  cannot use these indexes for range queries.

- Hashed indexes offer no performance advantage over normal indexes.
  *However*, hashed indexes may be smaller than a normal index when
  the values of the indexed field are larger than 64 bits. [#hash-size]_

- it's possible to have a hashed and non-hashed index on the same
  field: MongoDB will use the non-hashed for range queries.

.. _hashed-index-warning:

.. warning::

   Hashed indexes round floating point numbers to 64-bit integers
   before hashing. For example, a hashed index would store the same
   value for a field that held a value of ``2.3`` and ``2.2``. To
   prevent collisions do not use a hashed index for floating point
   numbers that cannot be consistently converted to 64-bit integers (and
   then back to floating point.) Hashed indexes do not support
   floating point values larger than 2\ :sup:`53`.

Create a hashed index using an operation that resembles the
following:

.. code-block:: javascript

   db.records.ensureIndex( { a: "hashed" } )

This operation creates a hashed index for the ``records`` collection
on the ``a`` field.

.. [#hash-size] The hash stored in the hashed index is 64 bits long.

Hashed Sharding
```````````````

To shard a collection using a hashed shard key, issue an operation in
the :program:`mongo` shell that resembles the following:

.. code-block:: javascript

   sh.shardCollection( "records.active", { a: "hashed" } )

This operation shards the ``active`` collection in the ``records``
database, using a hash of the ``a`` field as the shard
key. Consider the following properties when using a hashed shard key:

- As with other kinds of shard key indexes, if your collection has
  data, you must create the hashed index before sharding. If your
  collection does not have data, sharding the collection will create
  the appropriate index.

- The :program:`mongos` will route all equality queries to a specific
  shard or set of shards; however, the :program:`mongos` must route
  range queries to all shards.

- When using a hashed shard key on a new collection, MongoDB
  automatically pre-splits the range of 64-bit hash values into
  chunks. By default, the initial number of chunks is equal to twice
  the number of shards at creation time. You can change the number of
  chunks created, using the ``numInitialChunks`` option, as in the
  following invocation of :dbcommand:`shardCollection`:

  .. code-block:: javascript

     db.adminCommand( { shardCollection: "test.collection",
                        key: { a: "hashed"},
                        numInitialChunks: 2001 } )

  MongoDB will only pre-split chunks in a collection when sharding
  empty collections. MongoDB will not create chunk splits in a
  collection sharding collections that have data.

.. warning::

   Avoid using hashed shard keys when the hashed field has non-integral floating
   point values, see :ref:`hashed indexes <hashed-index-warning>` for
   more information.

``db.killOp()`` Can Now Kill Foreground Index Builds
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :method:`db.killOp()` method will now terminate a foreground index
build, in addition to the other operations supported in previous
versions.
