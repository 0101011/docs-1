======================
Upgrade MongoDB to 3.2
======================

.. default-domain:: mongodb

MongoDB 3.2 is currently in development.

.. warning::

   While 3.2 release candidates are available, these versions of
   MongoDB are for **testing purposes only and not for production use**.

Before you attempt any upgrade, please familiarize yourself with the
content of this document.

If you need guidance on upgrading to 3.2, `MongoDB offers consulting
<https://www.mongodb.com/products/consulting?jmp=docs#major_version_upgrad
e>`_ to help ensure a smooth transition without interruption to your
MongoDB application.

.. _3.0-upgrade-considerations:

Upgrade Recommendations and Checklists
--------------------------------------

When upgrading, consider the following:

Upgrade Requirements
~~~~~~~~~~~~~~~~~~~~

To upgrade an existing MongoDB deployment to 3.2, you must be running
3.0.7 or later.

To upgrade from version 2.6-series, you *must* upgrade to version 3.0.7
or later before upgrading to 3.2. For the procedure to upgrade from
2.6-series to 3.0-series, see :doc:`/release-notes/3.0-upgrade`.

Preparedness
~~~~~~~~~~~~

Before beginning your upgrade, see the
:doc:`/release-notes/3.2-compatibility` document to ensure that your
applications and deployments are compatible with MongoDB 3.2. Resolve
the incompatibilities in your deployment before starting the upgrade.

Before upgrading MongoDB, always test your application in a staging
environment before deploying the upgrade to your production
environment.


.. _3.2-upgrade-standalone:

Upgrade Standalone ``mongod`` Instance to MongoDB 3.2
-----------------------------------------------------

The following steps outline the procedure to upgrade a standalone
:program:`mongod` from version 3.0 to 3.2. To upgrade from version
2.6 to 3.2, :doc:`upgrade to version 3.0 </release-notes/3.0-upgrade>`
*first*, and then use the following procedure to upgrade from 3.0 to 3.2.

Upgrade with Package Manager
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you installed MongoDB from the MongoDB ``apt``, ``yum``, ``dnf``, or
``zypper`` repositories, you should upgrade to 3.2 using your package
manager. Follow the appropriate :doc:`installation instructions
</administration/install-on-linux>` for your Linux system. This will
involve adding a repository for the new release, then performing the
actual upgrade.

Manual Upgrade
~~~~~~~~~~~~~~

Otherwise, you can manually upgrade MongoDB:

1. Download binaries of the latest release in the 3.2 series from the
   `MongoDB Download Page`_. See :doc:`/installation` for more
   information.

#. Shut down your :program:`mongod` instance. Replace the existing
   binary with the 3.2 :program:`mongod` binary and restart
   :program:`mongod`.

.. note::
   MongoDB 3.2 generates core dumps on some :program:`mongod`
   failures. For production environments, you may prefer to turn off core
   dumps for the operating system, if not already.

.. _3.2-upgrade-replica-set:

Upgrade a Replica Set to 3.2
----------------------------

Prerequisites
~~~~~~~~~~~~~

All replica set members must be running version 3.0 before you can
upgrade them to version 3.2. To upgrade a replica set from an earlier
MongoDB version, :doc:`upgrade all members of the replica set to version
3.0 </release-notes/3.0-upgrade>` *first*, and then follow the procedure
to upgrade from MongoDB 3.0 to 3.2.

Upgrade Binaries
~~~~~~~~~~~~~~~~

You can upgrade from MongoDB 3.0 to 3.2 using a "rolling" upgrade to
minimize downtime by upgrading the members individually while the other
members are available:

1. Upgrade the :ref:`secondary <replica-set-secondary-members>`
   members of the replica set one at a time:

   - Shut down the :program:`mongod` instance and replace the 3.0
     binary with the 3.2 binary.

   - Restart the member and wait for the member to recover to
     ``SECONDARY`` state before upgrading the next secondary member.
     To check the member’s state, issue :method:`rs.status()` in the
     :program:`mongo` shell.

#. Step down the replica set primary.

   Connect a :program:`mongo` shell to the primary and use
   :method:`rs.stepDown()` to step down the primary and force an
   election of a new primary:

   .. code-block:: javascript

      rs.stepDown()

#. When :method:`rs.status()`
   shows that the primary has stepped down and another member
   has assumed ``PRIMARY`` state, upgrade the stepped-down primary: 

   - Shut down the stepped-down primary and replace the
     :program:`mongod` binary with the 3.2 binary.

   - Restart.

#. Connect a :program:`mongo` shell to the current primary and
   upgrade the replication protocol:

   .. code-block:: javascript

      cfg = rs.conf();
      cfg.settings.protocolVersion=1;
      rs.reconfig(cfg);

Replica set failover is not instant and will render the set
unavailable to accept writes until the failover process
completes. This may take 30 seconds or more: schedule the
upgrade procedure during a scheduled maintenance window.

.. note::
   MongoDB 3.2 generates core dumps on some :program:`mongod`
   failures. For production environments, you may prefer to turn off core
   dumps for the operating system, if not already.

.. _3.2-upgrade-cluster:

Upgrade a Sharded Cluster to 3.2
----------------------------------

Prerequisites
~~~~~~~~~~~~~

- Version 3.0 or Greater
    To upgrade a sharded cluster to 3.2, **all** members of the
    cluster must be at least version 3.0. The upgrade process checks
    all components of the cluster and will produce warnings if any
    component is running version earlier than 3.0.

- Stop Metadata Changes during the Upgrade
    During the upgrade, ensure that clients do not make changes to the
    collection metadata. For example, during the upgrade, do **not**
    perform any of the following operations:

    - :method:`sh.enableSharding()`

    - :method:`sh.shardCollection()`

    - :method:`sh.addShard()`

    - :method:`db.createCollection()`

    - :method:`db.collection.drop()`

    - :method:`db.dropDatabase()`

    - any operation that creates a database

    - any other operation that modifies the cluster metadata in any way.

    See the :doc:`/reference/sharding` for a complete list of sharding
    commands. Not all commands on the :doc:`/reference/sharding` page
    modify the cluster metadata.

- :ref:`Disable the balancer <sharding-balancing-disable-temporarily>`

- Back up the ``config`` Database
    *Optional but Recommended.* As a precaution, take a backup of the
    ``config`` database *before* upgrading the sharded cluster.

Upgrade Sharded Clusters
~~~~~~~~~~~~~~~~~~~~~~~~~

#. **Disable the balancer** as described in
   :ref:`sharding-balancing-disable-temporarily`.

#. **Upgrade the shards.** If the shards are replica sets, for each shard:

   a. Upgrade the :ref:`secondary <replica-set-secondary-members>`
      members of the replica set one at a time:

      - Shut down the :program:`mongod` instance and replace the 3.0
        binary with the 3.2 binary.

      - Restart the member and wait for the member to recover to
        ``SECONDARY`` state before upgrading the next secondary member.
        To check the member’s state, issue :method:`rs.status()` in the
        :program:`mongo` shell.

   #. Step down the replica set primary.

      Connect a :program:`mongo` shell to the primary and use
      :method:`rs.stepDown()` to step down the primary and force an
      election of a new primary:

      .. code-block:: javascript

         rs.stepDown()

   #. When :method:`rs.status()`
      shows that the primary has stepped down and another member
      has assumed ``PRIMARY`` state, upgrade the stepped-down primary: 

      - Shut down the stepped-down primary and replace the
        :program:`mongod` binary with the 3.2 binary.

      - Restart.

   #. Connect a :program:`mongo` shell to the current primary and
      upgrade the replication protocol for the shard:

      .. code-block:: javascript

         cfg = rs.conf();
         cfg.settings.protocolVersion=1;
         rs.reconfig(cfg);

#. **Upgrade the config servers one at a time** in reverse order of the
   :setting:`~sharding.configDB` or :option:`--configdb` setting for
   the :program:`mongos`. That is, if the :program:`mongos` has the
   :setting:`~sharding.configDB` or the :option:`--configdb` option set
   to ``<cfgsvr1:port1>,<cfgsvr2:port2>,<cfgsvr3:port3>``, upgrade
   ``<cfgsvr3>`` first, then ``<cfgsvr2>``, and lastly, ``<cfgsvr1>``.

   Starting with the last config server listed in the
   :setting:`~sharding.configDB` setting:

   a. Stop the config server and replace with the 3.2 binary.

   #. Start the 3.2 binary with both the ``--configsvr`` and
      ``--port`` options:

      .. note::
         The default port for the config server has changed from
         ``27019`` to ``27017``.

      .. code-block:: sh

         mongod --configsvr --port <port> --dbpath <path>

      If using a :doc:`configuration file
      </reference/configuration-options>`, specify
      :setting:`sharding.clusterRole: configsvr <sharding.clusterRole>`
      and :setting:`net.port` in the file:

      .. code-block:: yaml

         sharding:
            clusterRole: configsvr
         net:
            port: <port>
         storage:
            dbpath: <path>

   Repeat for the config server listed *second* in the
   :setting:`~sharding.configDB` setting, and finally the config server
   listed *first* in the :setting:`~sharding.configDB` setting.

#. **Upgrade the mongos instances**. Replace each :program:`mongos`
   instance with the 3.2 binary and restart.

   .. code-block:: sh

      mongos --configdb <cfgsvr1:port1>,<cfgsvr2:port2>,<cfgsvr3:port3>

#. **Re-enable the balancer** as described in
   :ref:`sharding-balancing-enable`.

.. note::
   MongoDB 3.2 generates core dumps on some :program:`mongod`
   failures. For production environments, you may prefer to turn off core
   dumps for the operating system, if not already.

.. _`MongoDB Download Page`: http://www.mongodb.org/downloads?jmp=docs
