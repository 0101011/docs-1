:orphan:

=================================================================
Development Encryption Key Management for 3.2.0 Release Candidate
=================================================================

.. default-domain:: mongodb

MongoDB 3.2 is currently in development.

.. warning::

   While 3.2 release candidates are available, these versions of
   MONGODB are for **testing purposes only and not for production use**.

See also :doc:`/release-notes/3.2`.

Overview
--------

.. include:: /includes/fact-enterprise-only-admonition.rst

.. important::

   Available for the WiredTiger Storage Engine Only.

MongoDB Enterprise 3.2 introduces a native encryption option for the
WiredTiger storage engine. With storage encryption, the secure
management of the encryption keys is critical.

Only the system key is external to the server and requires external
management. To manage the system key, MongoDB's encrypted storage
engine supports two key management options:

- Integration with a third party key management appliance via the Key
  Management Interoperability Protocol (KMIP). **Recommended**

- Use of local key management via a keyfile.

The following tutorial outlines the procedures to configure MongoDB for
encryption and key management.

Key Manager
-----------

MongoDB Enterprise supports secure transfer of keys with compatible key
management appliances. Using a key manager allows for the keys to be
stored in the key manager.

MongoDB Enterprise supports secure transfer of keys with Key Management
Interoperability Protocol (KMIP) compliant key management appliances.
While any appliance vendor that provides support for KMIP is expected
to be compatible, MongoDB has certified against SafeNet KeySecure and
Vormetric Data Security Manager (DSM).

.. admonition:: Recommended

   Using a key manager meets regulatory key management guidelines, such
   as HIPAA, PCI-DSS, and FERPA, and is recommended over the local key
   management.

Prerequisites
~~~~~~~~~~~~~

- Your key manager must support the KMIP communication protocol, such
  as Vormetric DSM and Safenet KeySecure.

- For Vormetric or Safenet, you must have a valid certificates issued
  by the specific appliance vendor in order to authenticate MongoDB to
  the KMIP server.

.. _encrypt-with-new-key:

Encrypt Using a New Key
~~~~~~~~~~~~~~~~~~~~~~~

To create a new key, connect :program:`mongod` to the key manager by starting
:program:`mongod` with the following options:

- ``--enableEncryption``,

- ``--kmipServerName <KMIP Server Hostname>``,

- ``--kmipServerCAFile <path to KMIP Server's CA File>``, and

- ``--kmipClientCertificateFile <path to valid client certificate>``.

Include any other options specific to your configuration.

.. code-block:: sh

   mongod --enableEncryption --kmipServerName <KMIP Server HostName> \
     --kmipServerCAFile ca.pem --kmipClientCertificateFile client.pem

This operation creates a new system key in your key manager for use by
the :program:`mongod` to wrap the keys :program:`mongod` generates for
each database.

To verify that the key creation and usage was successful, check the log
file. If successful, the process will log the following messages:

.. code-block:: sh

   [initandlisten] Created KMIP key with id: <UID>
   [initandlisten] Encryption key manager initialized using system key with id: <UID>

.. seealso:: :ref:`3.2-encryption-key-management-options`, --sslAllowInvalidHostnames

.. _encrypt-with-existing-key:

Encrypt Using an Existing Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use an existing system key created and managed by your KMIP. To
use an existing key, connect :program:`mongod` to the key manager by
starting :program:`mongod` with the following options:

- ``--enableEncryption``,

- ``--kmipServerName <KMIP Server Hostname``,

- ``--kmipServerCAFile <path to KMIP Server's CA File>``,

- ``--kmipClientCertificateFile <path to valid client certificate>``, and

- ``--kmipKeyIdentifier <UID>``.

Include any other options specific to your configuration.

.. code-block:: sh

   mongod --enableEncryption --kmipServerName <KMIP Server HostName> \
     --kmipServerCAFile ca.pem --kmipClientCertificateFile client.pem \
     --kmipKeyIdentifier <UID>

.. important::

   If data is already encrypted with a key, you must specify that key's
   ``<UID>`` for the ``--kmipKeyIdentifier`` option. Otherwise, MongoDB
   will not start and log an error.

.. seealso:: :ref:`3.2-encryption-key-management-options`

Local Key Management
--------------------

.. important::

   Using the keyfile method does not meet most regulatory key
   management guidelines and requires users to securely manage their
   own keys.

   The safe management of the keyfile is critical.

To encrypt using a keyfile, you must have a base64 encoded keyfile that
contains a 16 or 32 character string. The keyfile must only be
accessible by the owner of the :program:`mongod` process.

#. Create the base64 encoded keyfile with the 16 or 32 character
   string. You can generate the encoded keyfile using any method you
   prefer. For example,

   .. code-block:: sh

      openssl rand -base64 32 > mongodb-keyfile

#. Update the file permissions.

   .. code-block:: sh

      chmod 600 mongodb-keyfile

#. To use the key file, start :program:`mongod` with the following
   options:

   - ``--enableEncryption``,

   - ``--encryptionKeyFile <path to keyfile>``,

   .. code-block:: sh

      mongod --enableEncryption --encryptionKeyFile  mongodb-keyfile

#. Verify if the encryption key manager successfully initialized with
   the keyfile. If the operation was successful, the process will log the
   following message:

   .. code-block:: sh

      [initandlisten] Encryption key manager initialized using system key with id:

.. seealso:: :ref:`3.2-encryption-key-management-options`

.. _3.2-rotate-encryption-keys:

Rotating Keys
-------------

Most regulatory requirements mandate that a managed key used to decrypt
sensitive data must be rotated out and replaced with a new key once a
year.

MongoDB provides two options for key rotation. You can rotate out the
binary with a new instance that uses a new key. Or, if you are using a
KMIP server for key management, you can rotate the master key.

Rotate a Member of Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For a replica set, to rotate out a member:

#. Start a new :program:`mongod` instance, configured to use a new key.
   Include the ``--replSet`` option with the name of the replica set as
   well as any other options specific to your configuration, such as
   ``--dbpath``.

   .. code-block:: sh

      mongod --replSet myReplSet --enableEncryption --kmipServerName
      <KMIP Server HostName> \ --kmipServerCAFile ca.pem
      --kmipClientCertificateFile client.pem

#. Connect a :program:`mongo` shell to the replica set's primary.

#. Add the instance to the replica set.

   .. code-block:: javascript

      rs.add("<hostname>:<port>")

   During the initial sync process, the re-encryption of the data with
   an entirely new set of database keys as well as a new system key
   occurs.

#. Once the new node completes its initial sync process, remove the old
   node from the replica set and delete all its data. For instructions,
   see :doc:`/tutorial/remove-replica-set-member`

.. _3.1-kmip-master-key-rotation:

KMIP Master Key Rotation
~~~~~~~~~~~~~~~~~~~~~~~~

If you are using a KMIP server for key management, you can rotate
the master key, the only externally managed key. With the new
master key, the internal keystore will be re-encrypted but the
database keys will be otherwise left unchanged. This obviates the need
to re-encrypt the entire data set.

#. Rotate the master key for the :ref:`secondary
   <replica-set-secondary-members>` members of the replica set one at a
   time.

   a. Restart the secondary, including the
      :option:`--kmipRotateMasterKey` parameter. Include any other
      options specific to your configuration. If the member already
      includes the :option:`--kmipKeyIdentifier` option, either update
      the :option:`--kmipKeyIdentifier` option with the new key to use
      or omit to request a new key from the KMIP server:

      .. code-block:: sh

         mongod --enableEncryption --kmipRotateMasterKey \
           --kmipServerName <KMIP Server HostName> \
           --kmipServerCAFile ca.pem --kmipClientCertificateFile client.pem

      If using a configuration file, include the
      :setting:`security.kmip.rotateMasterKey`.

   b. Upon successful completion of the master key rotation and
      re-encryption of the database keystore, the :program:`mongod`
      will exit.

   c. Restart the secondary without the :option:`--kmipRotateMasterKey`
      parameter. Include any other options specific to your
      configuration.

      .. code-block:: sh

         mongod --enableEncryption --kmipServerName <KMIP Server HostName> \
           --kmipServerCAFile ca.pem --kmipClientCertificateFile client.pem

      If using a configuration file, remove the
      :setting:`security.kmip.rotateMasterKey` setting.

#. Step down the replica set primary.

   Connect a :program:`mongo` shell to the primary and use
   :method:`rs.stepDown()` to step down the primary and force an
   election of a new primary:

   .. code-block:: javascript

      rs.stepDown()

#. When :method:`rs.status()`
   shows that the primary has stepped down and another member
   has assumed ``PRIMARY`` state, rotate the master key for the stepped down member:

   a. Restart the stepped-down member, including the
      :option:`--kmipRotateMasterKey` parameter. Include any other
      options specific to your configuration. If the member already
      includes the :option:`--kmipKeyIdentifier` option, either update
      the :option:`--kmipKeyIdentifier` option with the new key to use
      or omit.

      .. code-block:: sh

         mongod --enableEncryption --kmipRotateMasterKey \
           --kmipServerName <KMIP Server HostName> \
           --kmipServerCAFile ca.pem --kmipClientCertificateFile client.pem

      If using a configuration file, include the
      :setting:`security.kmip.rotateMasterKey`.

   b. Upon successful completion of the master key rotation and
      re-encryption of the database keystore, the :program:`mongod`
      will exit.

   c. Restart the stepped-down member without the
      :option:`--kmipRotateMasterKey` parameter. Include any other options
      specific to your configuration.

      .. code-block:: sh

         mongod --enableEncryption --kmipServerName <KMIP Server HostName> \
           --kmipServerCAFile ca.pem --kmipClientCertificateFile client.pem

      If using a configuration file, remove the
      :setting:`security.kmip.rotateMasterKey` setting.
