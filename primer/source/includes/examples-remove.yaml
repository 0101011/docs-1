collection: "restaurants"
options:
  show_title: False
  show_collection: False
edition:
  - shell
  - python
ref: example-collection
---
source:
  file: examples-remove-base.yaml
  ref: _remove-matching-documents
ref: remove-matching-documents
edition: shell
operation:
  language: javascript
  code: |
    db.restaurants.remove( { "borough": "Manhattan" } )
post: |
  The remove operation returns a :method:`WriteResult` object which
  contains the status of the operation. :data:`~WriteResult.nRemoved`
  field specifies the number of documents removed.
---
source:
  file: examples-remove-base.yaml
  ref: _remove-justOne
ref: remove-justOne
edition: shell
operation:
  - language: javascript
    code: |
      db.restaurants.remove( { "borough": "Queens" }, { justOne: true } )
post: |
  Successful operation should return the following
  :method:`WriteResult` object.
results: |
  WriteResult({ "nRemoved" : 1 })
final: |
  :data:`~WriteResult.nRemoved` field specifies the number of documents
  removed, in this case ``1``.
replacement:
  removeMethod: :method:`~db.collection.remove()`
---
source:
  file: examples-remove-base.yaml
  ref: _remove-all-documents
ref: remove-all-documents
edition: shell
operation:
  language: javascript
  code: |
    db.restaurants.remove( { } )
post: |
  The remove operation returns a :method:`WriteResult` object which
  contains the status of the operation. :data:`~WriteResult.nRemoved`
  field specifies the number of documents removed.
replacement:
  removeMethod: :method:`~db.collection.remove()`
---
source:
  file: examples-remove-base.yaml
  ref: _drop-collection
ref: drop-collection
edition: shell
operation:
  language: javascript
  code: |
     db.restaurants.drop()
post: |
   Upon successful drop of the collection, the operation returns
   ``true``.
results:
  - 'true'
final: |
  If the collection to drop does not exist, the operation
  will return ``false``.
replacement:
  dropMethod: :method:`~db.collection.drop()`
---
source:
  file: examples-remove-base.yaml
  ref: _remove-matching-documents
ref: remove-matching-documents
edition: python
operation:
  language: python
  code: |
    db.restaurants.remove( { "borough": "Manhattan" } )
post: |
  The remove operation returns a ``dict`` object which contains the
  status of the operation. Successful operation should return ``u'ok':
  1.0``. ``u'n'`` field indicates the number of documents removed.
replacement:
  removeMethod: :py:meth:`~pymongo.collection.Collection.remove()`
---
source:
  file: examples-remove-base.yaml
  ref: _remove-all-documents
ref: remove-all-documents
edition: python
operation:
  language: python
  code: |
    db.restaurants.remove()
post: |
  The remove operation returns a ``dict`` object which contains the
  status of the operation. Successful operation should return ``u'ok':
  1.0``. ``u'n'`` field indicates the number of documents removed.
replacement:
  removeMethod: :py:meth:`~pymongo.collection.Collection.remove()`
---
source:
  file: examples-remove-base.yaml
  ref: _drop-collection
ref: drop-collection
edition: python
operation:
  language: python
  code: |
     db.restaurants.drop()
replacement:
  dropMethod: :py:meth:`~pymongo.collection.Collection.drop()`
...
