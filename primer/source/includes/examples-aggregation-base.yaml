collection: "inventory"
options:
  base_file: true
---
title:
  text: Group Documents by a Field and Calculate Count
  level: 2
ref: _group-documents-by-a-field-and-calculate-count
pre: |
  Use the :pipeline:`$group` stage to group by a specified key. In the
  :pipeline:`$group` stage, specify the group by key in the ``_id``
  field. :pipeline:`$group` accesses fields by the field path, which is
  the field name prefixed by a dollar sign ``$``. The
  :pipeline:`$group` stage can use :manual:`accumulators
  </meta/aggregation-quick-reference/#group-operators>` to perform
  calculations for each group.
content: |
  The following example groups the documents in the ``inventory``
  collection by the ``category`` field and uses the :group:`$sum`
  accumulator to count the documents for each group.
post: |
  The result set consists of the following documents:
final: |
  The ``_id`` field contains the distinct ``category`` value, i.e., the
  group by key value.
---
title:
  text: Filter and Group Documents
  level: 2
ref: _filter-and-group-documents
pre: |
  Use the :pipeline:`$match` stage to filter documents.
  :pipeline:`$match` uses the MongoDB :doc:`query syntax
  </query>`.
content: |
  The following pipeline uses :pipeline:`$match` to query the
  ``inventory`` collection for documents with ``category`` equal to
  ``"gloves"``.

  Then the :pipeline:`$group` stage groups the matching documents
  by the ``details.model`` field and uses the :group:`$sum`
  accumulator to calculate the count. :pipeline:`$group` accesses
  fields by the field path, which is the field name prefixed by a
  dollar sign ``$``.
post: |
  The result set consists of the following documents:
---
title:
  text: Unwind an Array and Project.
  level: 2
ref: _unwind-an-array-and-project
pre: |
  Use the :pipeline:`$unwind` stage to deconstruct the array element
  and output to the next stage a document for *each* element in the
  array. Each output document is the input document with the value of
  the array field replaced by an element.
  :pipeline:`$unwind` stage takes a field path, which is the field name
  prefixed by a dollar sign ``$``.

  :pipeline:`$project` stage reshapes the output documents, such as by
  specifying which fields to include in the output documents. Specify
  the inclusion of a field in the output with ``<field>: 1``. The
  output documents include the ``_id`` field by default. To suppress
  the ``_id`` field, include ``_id: 0`` in the :pipeline:`$project`
  stage.
content: |
  The following example first unwinds the ``stock`` array in each
  document, and then projects or returns just the ``item`` and the
  ``stock`` field in the output documents.
operation:
  - language: javascript
    code: |
      db.inventory.aggregate(
         [
           { $unwind: "$stock" },
           { $project: { "_id": 0, "stock": 1, "item": 1 } }
         ]
      )
post: "The result set consists of the following documents:"
results:
  - '{ "item" : "ABC", "stock" : { "size" : "S", "qty" : 25 } }'
  - '{ "item" : "ABC", "stock" : { "size" : "M", "qty" : 50 } }'
  - '{ "item" : "DEF", "stock" : { "size" : "M", "qty" : 50 } }'
  - '{ "item" : "IJK", "stock" : { "size" : "S", "qty" : 5 } }'
  - '{ "item" : "IJK", "stock" : { "size" : "M", "qty" : 5 } }'
  - '{ "item" : "IJK", "stock" : { "size" : "L", "qty" : 1 } }'
  - '{ "item" : "LMN", "stock" : { "size" : "S", "qty" : 5 } }'
  - '{ "item" : "LMN", "stock" : { "size" : "L", "qty" : 1 } }'
  - '{ "item" : "PQR", "stock" : { "size" : "S", "qty" : 5 } }'
  - '{ "item" : "PQR", "stock" : { "size" : "L", "qty" : 1 } }'
...