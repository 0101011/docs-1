collection: "restaurants"
options:
  show_title: False
  show_collection: False
edition:
  - shell
  - python
ref: 0
---
source:
  file: examples-query-sort-base.yaml
  ref: _sort
ref: sort
edition: shell
operation:
  pre: |
    For example, the following operation returns all documents in the
    ``restaurants`` collection, sorted first by the ``borough`` field in
    ascending order, and then, within each borough, by the ``"address.zipcode"``
    field in ascending order
  language: javascript
  code: |
    db.restaurants.find().sort( { "borough": 1, "address.zipcode": 1 } )
replacement:
  sortMethod: :method:`~cursor.remove()`
  ascKey: "``1``"
  descKey: "``-1``"
---
source:
  file: examples-query-sort-base.yaml
  ref: _sort
ref: sort
edition: python
operation:
  - pre: |
      To sort by multiple keys, pass a list of keys and sort type pairs.
      For example, the following operation returns all documents in the
      ``restaurants`` collection, sorted first by the ``borough`` field in
      ascending order, and then, within each borough, by the ``"address.zipcode"``
      field in ascending order:
    language: python
    code: |
      import pymongo
      cursor = db.restaurants.find().sort( [
         ( "borough", pymongo.ASCENDING),
         ( "address.zipcode", pymongo.DESCENDING )
      ] )
  - pre: |
      Iterate the cursor and print the matching documents.
    language: python
    code: |
      for document in cursor:
          print(document)
replacement:
  sortMethod: :method:`~cursor.remove()`
  ascKey: "``pymongo.ASCENDING``"
  descKey: "``pymongo.DESCENDING``"
...
  