collection: "inventory"
options:
  show_title: False
  show_collection: False
content:
  source:
    file: example/example-gs-query-all.yaml
    ref: 0
edition: python
---
title:
  text: Create a Single-Field Index
  level: 2
ref: 1
edition: python
pre: |
  Create an ascending index on the ``"item"`` field of the
  ``inventory`` collection.
operation:
  language: python
  code: |
    db.inventory.ensure_index( [ ( "item", pymongo.ASCENDING ) ] )
post: |
  The method returns the name of the index created.
results: |
  u'item_1'
---
title: 
  text: Create a compound index.
  level: 2
ref: 2
edition: python
pre: |
  MongoDB supports :ref:`compound indexes <index-type-compound>` which
  are indexes on multiple fields. The order of the fields determine how
  the index stores its keys.
post: |
operation:
  - pre: |
      For example, the following operation creates a compound index on
      the ``"category"`` field and the ``"details.model"`` field.

      The index orders its entries first by ascending ``"category"``
      values, and then, within each ``"category"``, by descending
      ``"details.model"`` values.
    language: javascript
    code: |
      db.inventory.ensure_index( [ ( "category", pymongo.ASCENDING ),
                                   ( "details.model", pymongo.DESCENDING ) ] )
post: |
  The method returns the name of the index created.
results: |
  u'category_1_details.model_-1'
...