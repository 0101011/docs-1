collection: "restaurants"
options:
  show_title: False
  show_collection: False
edition:
  - shell
  - python
ref: 0
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-top-level-fields
ref: update-top-level-fields
edition: shell
pre: |
  The following operation updates the first document with ``name``
  equal to ``"Juni"``, using the :update:`$set` operator to update the
  ``cusine`` field and the :update:`$currentDate` operator to update
  the ``lastModified`` field with the current date.
operation:
    language: javascript
    code: |
      db.restaurants.update(
          { "name" : "Juni" },
          {
            $set: {
              "cuisine": "American (New)"
            },
            $currentDate: { "lastModified": true }
          }
      )
post: |
  The update operation returns a :method:`WriteResult` object which
  contains the status of the operation.
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-embedded-field
ref: update-embedded-field
edition: shell
operation:
  pre: |
      The following updates the ``street`` field in the embedded
      ``address`` document.
  language: javascript
  code: |
      db.restaurants.update(
        { "restaurant_id" : "41156888" },
        { $set: { "address.street": "East 31st Street" } }
      )
post: |
   The update operation returns a :method:`WriteResult` object which
   contains the status of the operation.
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-multiple-documents
ref: update-multiple-documents
edition: shell
operation:
  - pre: |
      The following operation updates *all* documents that have
      ``address.zipcode`` field equal to ``"10016"``, setting the ``borough``
      field to ``"Midtown"`` and the ``lastModified`` field to the current
      date.
    language: javascript
    code: |
      db.restaurants.update( 
         { "address.zipcode": "10016" },
         {
           $set: { "borough": "Midtown" },
           $currentDate: { "lastModified": true }
         },
         { multi: true }
      )
post: |
  The update operation returns a :method:`WriteResult` object which
  contains the status of the operation.
replacement:
  updateMethod: :method:`~db.collection.update()`
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-top-level-fields
ref: update-top-level-fields
edition: python
pre: |
  The following operation updates the first document with the field
  ``name`` equal to ``"Juni"``. The operation uses the update:`$set`
  operator to update the ``cusine`` field and the
  :update:`$currentDate` operator to update the ``lastModified`` field
  with the current date.
operation:
    language: python
    code: |
      db.restaurants.update(
          { "name" : "Juni" },
          {
            "$set": {
              "cuisine": "American (New)"
            },
            "$currentDate": { "lastModified": True }
          }
      )
      
post: |
  The operation returns a ``dict`` object which contains the status of
  the operation. Successful operation should return ``u'ok': 1.0``. The
  ``u'n'`` field indicates the number of documents modified.
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-embedded-field
ref: update-embedded-field
edition: python
operation:
  - pre: |
      The following updates the ``street`` field in the embedded
      ``address`` document.
    language: javascript
    code: |
      db.restaurants.update(
        { "restaurant_id" : "41156888" },
        { "$set": { "address.street": "East 31st Street" } }
      )
post: |
  The operation returns a ``dict`` object which contains the status of
  the operation. Successful operation should return ``u'ok': 1.0``. The
  ``u'n'`` field indicates the number of documents modified.
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-multiple-documents
ref: update-multiple-documents
edition: python
operation:
  pre: |
      The following operation updates *all* documents that have
      ``address.zipcode`` field equal to ``"10016"``, setting the ``borough``
      field to ``"Midtown"`` and the ``lastModified`` field to the current
      date.
  language: javascript
  code: |
      db.restaurants.update( 
         { "address.zipcode": "10016" },
         {
           "$set": { "borough": "Midtown" },
           "$currentDate": { "lastModified": True }
         },
         multi=True
      )
post: |
  The operation returns a ``dict`` object which contains the status of
  the operation. Successful operation should return ``u'ok': 1.0``. The
  ``u'n'`` field indicates the number of documents modified.
replacement:
  updateMethod: py:meth:`~pymongo.collection.Collection.update()`
...