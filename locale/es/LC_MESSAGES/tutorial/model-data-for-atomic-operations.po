# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:02-0400\n"
"PO-Revision-Date: 2013-12-16 22:37+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/model-data-for-atomic-operations.txt:5
msgid "Model Data for Atomic Operations"
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:15
msgid ""
"Although MongoDB supports :doc:`multi-document transactions "
"</core/transactions>` starting in version 4.0, for many scenarios, the "
"denormalized data model, as discussed on this page, will continue to be "
"optimal for your data and use cases."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:21
msgid "Pattern"
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:23
msgid ""
"In MongoDB, a write operation on a single document is atomic. For fields "
"that must be updated together, embedding the fields within the same "
"document ensures that the fields can be updated atomically."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:27
msgid ""
"For example, consider a situation where you need to maintain information "
"on books, including the number of copies available for checkout as well "
"as the current checkout information."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:31
msgid ""
"The available copies of the book and the checkout information should be "
"in sync. As such, embedding the ``available`` field and the ``checkout`` "
"field within the same document ensures that you can update the two fields"
" atomically."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:51
msgid ""
"Then to update with new checkout information, you can use the "
":method:`db.collection.updateOne()` method to atomically update both the "
"``available`` field and the ``checkout`` field:"
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:65
msgid ""
"The operation returns a document that contains information on the status "
"of the operation:"
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:72
msgid ""
"The ``matchedCount`` field shows that ``1`` document matched the update "
"condition, and ``modifiedCount`` shows that the operation updated ``1`` "
"document."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:76
msgid ""
"If no document matched the update condition, then ``matchedCount`` and "
"``modifiedCount`` would be ``0`` and would indicate that you could not "
"check out the book."
msgstr ""

#~ msgid ""
#~ "Consider the following example that "
#~ "keeps a library book and its "
#~ "checkout information. The example illustrates"
#~ " how embedding fields related to an"
#~ " atomic update within the same "
#~ "document ensures that the fields are "
#~ "in sync."
#~ msgstr ""

#~ msgid ""
#~ "Consider the following ``book`` document "
#~ "that stores the number of available "
#~ "copies for checkout and the current "
#~ "checkout information:"
#~ msgstr ""

#~ msgid ""
#~ "You can use the "
#~ ":method:`db.collection.findAndModify()` method to "
#~ "atomically determine if a book is "
#~ "available for checkout and update with"
#~ " the new checkout information. Embedding"
#~ " the ``available`` field and the "
#~ "``checkout`` field within the same "
#~ "document ensures that the updates to "
#~ "these fields are in sync:"
#~ msgstr ""

#~ msgid ""
#~ "In MongoDB, write operations, e.g. "
#~ ":method:`db.collection.update()`, "
#~ ":method:`db.collection.findAndModify()`, "
#~ ":method:`db.collection.remove()`, are atomic on "
#~ "the level of a single document. "
#~ "For fields that must be updated "
#~ "together, embedding the fields within "
#~ "the same document ensures that the "
#~ "fields can be updated atomically."
#~ msgstr ""

#~ msgid ""
#~ "Then to update with new checkout "
#~ "information, you can use the "
#~ ":method:`db.collection.update()` method to "
#~ "atomically update both the ``available`` "
#~ "field and the ``checkout`` field:"
#~ msgstr ""

#~ msgid ""
#~ "The operation returns a "
#~ ":method:`WriteResult()` object that contains "
#~ "information on the status of the "
#~ "operation:"
#~ msgstr ""

#~ msgid ""
#~ "The :data:`~WriteResult.nMatched` field shows "
#~ "that ``1`` document matched the update"
#~ " condition, and :data:`~WriteResult.nModified` "
#~ "shows that the operation updated ``1``"
#~ " document."
#~ msgstr ""

#~ msgid ""
#~ "If no document matched the update "
#~ "condition, then :data:`~WriteResult.nMatched` and"
#~ " :data:`~WriteResult.nModified` would be ``0``"
#~ " and would indicate that you could"
#~ " not check out the book."
#~ msgstr ""

