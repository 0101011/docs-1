# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:02-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/hashed-sharding.txt:6
msgid "Hashed Sharding"
msgstr ""

#: ../source/core/hashed-sharding.txt:10
msgid ""
"Hashed sharding uses a :ref:`hashed index <index-hashed-index>` to "
"partition data across your shared cluster. Hashed indexes compute the "
"hash value of a single field as the index value; this value is used as "
"your shard key. [#hashvalue]_"
msgstr ""

#: ../source/core/hashed-sharding.txt:17
msgid ""
"Hashed sharding provides more even data distribution across the sharded "
"cluster at the cost of reducing :ref:`sharding-query-isolation`. Post-"
"hash, documents with \"close\" shard key values are unlikely to be on the"
" same chunk or shard - the :binary:`~bin.mongos` is more likely to "
"perform :ref:`sharding-mongos-broadcast` to fulfill a given ranged query."
" :binary:`~bin.mongos` can target queries with equality matches to a "
"single shard."
msgstr ""

#: ../source/includes/tip-applications-do-not-need-to-compute-hashes.rst:3
msgid ""
"MongoDB automatically computes the hashes when resolving queries using "
"hashed indexes.  Applications do **not** need to compute hashes."
msgstr ""

#: ../source/includes/warning-hashed-index-floating-point.rst:3
msgid ""
"MongoDB ``hashed`` indexes truncate floating point numbers to 64-bit "
"integers before hashing. For example, a ``hashed`` index would store the "
"same value for a field that held a value of ``2.3``, ``2.2``, and "
"``2.9``. To prevent collisions, do not use a ``hashed`` index for "
"floating point numbers that cannot be reliably converted to 64-bit "
"integers (and then back to floating point). MongoDB ``hashed`` indexes do"
" not support floating point values larger than 2\\ :sup:`53`."
msgstr ""

#: ../source/includes/warning-hashed-index-floating-point.rst:11
msgid ""
"To see what the hashed value would be for a key, see "
":method:`convertShardKeyToHashed()`."
msgstr ""

#: ../source/core/hashed-sharding.txt:29
msgid ""
"Starting in version 4.0, the :binary:`~bin.mongo` shell provides the "
"method :method:`convertShardKeyToHashed()`. This method uses the same "
"hashing function as the hashed index and can be used to see what the "
"hashed value would be for a key."
msgstr ""

#: ../source/core/hashed-sharding.txt:37
msgid "Hashed Sharding Shard Key"
msgstr ""

#: ../source/core/hashed-sharding.txt:39
msgid ""
"The field you choose as your hashed shard key should have a good "
":ref:`cardinality<shard-key-range>`, or large number of different values."
" Hashed keys are ideal for shard keys with fields that change "
":ref:`monotonically<shard-key-monotonic>` like :term:`ObjectId` values or"
" timestamps. A good example of this is the default ``_id`` field, "
"assuming it only contains :term:`ObjectID` values."
msgstr ""

#: ../source/core/hashed-sharding.txt:46
msgid ""
"To shard a collection using a hashed shard key, see :doc:`/tutorial"
"/deploy-sharded-cluster-hashed-sharding`."
msgstr ""

#: ../source/core/hashed-sharding.txt:50
msgid "Hashed vs Ranged Sharding"
msgstr ""

#: ../source/core/hashed-sharding.txt:52
msgid ""
"Given a collection using a monotonically increasing value ``X`` as the "
"shard key, using ranged sharding results in a distribution of incoming "
"inserts similar to the following:"
msgstr ""

#: ../source/core/hashed-sharding.txt:58
msgid ""
"Since the value of ``X`` is always increasing, the chunk with an upper "
"bound of :bsontype:`maxKey<data_maxkey>` receives the majority incoming "
"writes. This restricts insert operations to the single shard containing "
"this chunk, which reduces or removes the advantage of distributed writes "
"in a sharded cluster."
msgstr ""

#: ../source/core/hashed-sharding.txt:63
msgid ""
"By using a hashed index on ``X``, the distribution of inserts is similar "
"to the following:"
msgstr ""

#: ../source/core/hashed-sharding.txt:68
msgid ""
"Since the data is now distributed more evenly, inserts are efficiently "
"distributed throughout the cluster."
msgstr ""

#: ../source/core/hashed-sharding.txt:72
msgid "Shard the Collection"
msgstr ""

#: ../source/core/hashed-sharding.txt:74
msgid ""
"Use the :method:`sh.shardCollection()` method, specifying the full "
"namespace of the collection and the target :doc:`hashed index</core"
"/index-hashed>` to use as the :term:`shard key`."
msgstr ""

#: ../source/core/hashed-sharding.txt:83
msgid "Shard a Populated Collection"
msgstr ""

#: ../source/core/hashed-sharding.txt:85
msgid "If you shard a populated collection using a hashed shard key:"
msgstr ""

#: ../source/core/hashed-sharding.txt:87
msgid ""
"The sharding operation creates the initial chunk(s) to cover the entire "
"range of the shard key values. The number of chunks created depends on "
"the :ref:`configured chunk size <sharding-chunk-size>`."
msgstr ""

#: ../source/core/hashed-sharding.txt:91
msgid ""
"After the initial chunk creation, the balancer migrates these initial "
"chunks across the shards as appropriate as well as manages the chunk "
"distribution going forward."
msgstr ""

#: ../source/core/hashed-sharding.txt:96
msgid "Shard an Empty Collection"
msgstr ""

#: ../source/core/hashed-sharding.txt:98
msgid "If you shard an empty collection using a hashed shard key:"
msgstr ""

#: ../source/core/hashed-sharding.txt:100
msgid ""
"With no :doc:`zones and zone ranges </core/zone-sharding>` specified for "
"the empty or non-existing collection:"
msgstr ""

#: ../source/core/hashed-sharding.txt:103
msgid ""
"The sharding operation creates empty chunks to cover the entire range of "
"the shard key values and performs an initial chunk distribution. By "
"default, the operation creates 2 chunks per shard and migrates across the"
" cluster. You can use ``numInitialChunks`` option to specify a different "
"number of initial chunks. This initial creation and distribution of "
"chunks allows for faster setup of sharding."
msgstr ""

#: ../source/core/hashed-sharding.txt:111
#: ../source/core/hashed-sharding.txt:124
msgid ""
"After the initial distribution, the balancer manages the chunk "
"distribution going forward."
msgstr ""

#: ../source/core/hashed-sharding.txt:114
msgid ""
"With :doc:`zones and zone ranges </core/zone-sharding>` specified for the"
" empty or a non-existing collection (Available starting in MongoDB "
"4.0.3),"
msgstr ""

#: ../source/core/hashed-sharding.txt:118
msgid ""
"The sharding operation creates empty chunks for the defined zone ranges "
"as well as any additional chunks to cover the entire range of the shard "
"key values and performs an initial chunk distribution based on the zone "
"ranges. This initial creation and distribution of chunks allows for "
"faster setup of zoned sharding."
msgstr ""

