# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:02-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/read-concern.txt:5
msgid "Read Concern"
msgstr ""

#: ../source/reference/read-concern.txt:15
msgid ""
"The ``readConcern`` option allows you to control the consistency and "
"isolation properties of the data read from replica sets and replica set "
"shards."
msgstr ""

#: ../source/reference/read-concern.txt:19
msgid ""
"Through the effective use of :doc:`write concerns </reference/write-"
"concern>` and read concerns, you can adjust the level of consistency and "
"availability guarantees as appropriate, such as waiting for stronger "
"consistency guarantees, or loosening consistency requirements to provide "
"higher availability."
msgstr ""

#: ../source/reference/read-concern.txt:26
msgid ""
"MongoDB drivers updated for MongoDB 3.2 or later support specifying read "
"concern."
msgstr ""

#: ../source/reference/read-concern.txt:32
msgid "Read Concern Levels"
msgstr ""

#: ../source/reference/read-concern.txt:34
msgid "The following read concern levels are available:"
msgstr ""

#: ../source/reference/read-concern.txt:40
msgid "``level``"
msgstr ""

#: ../source/reference/read-concern.txt:41
msgid "Description"
msgstr ""

#: ../source/reference/read-concern.txt:43
#: ../source/reference/read-concern.txt:265
#: ../source/reference/read-concern.txt:372
msgid ":readconcern:`\"local\"`"
msgstr ""

#: ../source/reference/read-concern.txt:45
#: ../source/reference/read-concern.txt:63
msgid ""
"The query returns data from the instance with no guarantee that the data "
"has been written to a majority of the replica set members (i.e. may be "
"rolled back)."
msgstr ""

#: ../source/reference/read-concern.txt:53
msgid "Default for:"
msgstr ""

#: ../source/reference/read-concern.txt:50
msgid "reads against primary"
msgstr ""

#: ../source/reference/read-concern.txt:52
msgid ""
"reads against secondaries if the reads are associated with :ref:`causally"
" consistent sessions <sessions>`."
msgstr ""

#: ../source/reference/read-concern.txt:55
msgid ""
"Read concern :readconcern:`local` is available for use with causally "
"consistent sessions and transactions."
msgstr ""

#: ../source/reference/read-concern.txt:58
msgid "For more information, see the :readconcern:`\"local\"` reference page."
msgstr ""

#: ../source/reference/read-concern.txt:61
#: ../source/reference/read-concern.txt:266
#: ../source/reference/read-concern.txt:373
msgid ":readconcern:`\"available\"`"
msgstr ""

#: ../source/reference/read-concern.txt:67
msgid ""
"Default for reads against secondaries if the reads are not associated "
"with :ref:`causally consistent sessions <sessions>`."
msgstr ""

#: ../source/reference/read-concern.txt:70
msgid ""
"For sharded collections, :readconcern:`\"available\"` read concern "
"provides the lowest latency reads possible among the various read "
"concerns but at the expense of consistency as "
":readconcern:`\"available\"` read concern can return :term:`orphaned "
"documents <orphaned document>`."
msgstr ""

#: ../source/reference/read-concern.txt:76
msgid ""
"Read concern :readconcern:`available` is unavailable for use with "
"causally consistent sessions."
msgstr ""

#: ../source/reference/read-concern.txt:79
msgid "For more information, see the :readconcern:`\"available\"` reference page."
msgstr ""

#: ../source/reference/read-concern.txt:84
#: ../source/reference/read-concern.txt:267
#: ../source/reference/read-concern.txt:374
msgid ":readconcern:`\"majority\"`"
msgstr ""

#: ../source/reference/read-concern.txt:86
msgid ""
"The query returns the data that has been acknowledged by a majority of "
"the replica set members. The documents returned by the read operation are"
" durable, even in the event of failure."
msgstr ""

#: ../source/includes/fact-enable-majority-readConcern.rst:1
msgid ""
"To use :term:`read concern` level of :readconcern:`\"majority\"`, replica"
" sets must use :ref:`WiredTiger storage engine <storage-wiredtiger>`."
msgstr ""

#: ../source/includes/fact-enable-majority-readConcern.rst:4
msgid ""
"For MongoDB 4.0.3+ (and 3.6.1+), you can disable read concern "
":readconcern:`\"majority\"`. For more information, see :ref:`4.0-disable-"
"read-concern-majority`."
msgstr ""

#: ../source/reference/read-concern.txt:92
msgid ""
"Read concern :readconcern:`majority` is available for use with causally "
"consistent sessions and transactions."
msgstr ""

#: ../source/reference/read-concern.txt:97
msgid ""
"For operations in :doc:`multi-document transactions "
"</core/transactions>`, read concern ``\"majority\"`` provides its "
"guarantees only if the transaction commits with :ref:`write concern "
"\"majority\" <transactions-write-concern>`. Otherwise, the "
":readconcern:`\"majority\"` read concern provides no guarantees about the"
" data read in transactions."
msgstr ""

#: ../source/reference/read-concern.txt:104
msgid "For more information, see the :readconcern:`\"majority\"` reference page."
msgstr ""

#: ../source/reference/read-concern.txt:107
#: ../source/reference/read-concern.txt:269
#: ../source/reference/read-concern.txt:376
msgid ":readconcern:`\"linearizable\"`"
msgstr ""

#: ../source/reference/read-concern.txt:109
msgid ""
"The query returns data that reflects all successful majority-acknowledged"
" writes that completed prior to the start of the read operation. The "
"query may wait for concurrently executing writes to propagate to a "
"majority of replica set members before returning results."
msgstr ""

#: ../source/reference/read-concern.txt:115
msgid ""
"If a majority of your replica set members crash and restart after the "
"read operation, documents returned by the read operation are durable if "
":rsconf:`writeConcernMajorityJournalDefault` is set to the default state "
"of ``true``."
msgstr ""

#: ../source/includes/extracts/no-journaling-rollback.rst:2
msgid ""
"With :rsconf:`writeConcernMajorityJournalDefault` set to ``false``, "
"MongoDB does not wait for :writeconcern:`w: \"majority\" <\"majority\">` "
"writes to be written to the on-disk journal before acknowledging the "
"writes. As such, :writeconcern:`majority` write operations could possibly"
" roll back in the event of a transient loss (e.g. crash and restart) of a"
" majority of nodes in a given replica set."
msgstr ""

#: ../source/reference/read-concern.txt:122
msgid ""
"You can specify linearizable read concern for read operations on the "
":replstate:`primary <PRIMARY>` only."
msgstr ""

#: ../source/reference/read-concern.txt:125
msgid ""
"Read concern :readconcern:`linearizable` is unavailable for use with "
"causally consistent sessions."
msgstr ""

#: ../source/reference/read-concern.txt:128
msgid ""
"Linearizable read concern guarantees only apply if read operations "
"specify a query filter that uniquely identifies a single document."
msgstr ""

#: ../source/reference/read-concern.txt:134
#: ../source/reference/read-concern.txt:462
msgid ""
"Always use ``maxTimeMS`` with linearizable read concern in case a "
"majority of data bearing members are unavailable. ``maxTimeMS`` ensures "
"that the operation does not block indefinitely and instead ensures that "
"the operation returns an error if the read concern cannot be fulfilled."
msgstr ""

#: ../source/reference/read-concern.txt:140
msgid ""
"For more information, see the :readconcern:`\"linearizable\"` reference "
"page."
msgstr ""

#: ../source/reference/read-concern.txt:143
msgid ":readconcern:`\"snapshot\"`"
msgstr ""

#: ../source/reference/read-concern.txt:145
msgid "Only available for operations within multi-document transactions."
msgstr ""

#: ../source/reference/read-concern.txt:147
msgid ""
"If the transaction is not part of a :ref:`causally consistent session "
"<sessions>`, upon transaction commit with write concern "
":writeconcern:`\"majority\"`, the transaction operations are guaranteed "
"to have read from a snapshot of majority-committed data."
msgstr ""

#: ../source/reference/read-concern.txt:153
msgid ""
"If the transaction is part of a :ref:`causally consistent session "
"<sessions>`, upon transaction commit with write concern "
":writeconcern:`\"majority\"`, the transaction operations are guaranteed "
"to have read from a snapshot of majority-committed data that provides "
"causal consistency with the operation immediately preceding the "
"transaction start."
msgstr ""

#: ../source/includes/fact-readConcern-most-recent-data-in-node.rst:1
msgid ""
"Regardless of the :term:`read concern` level, the most recent data on a "
"node may not reflect the most recent version of the data in the system."
msgstr ""

#: ../source/reference/read-concern.txt:162
msgid "For more information on each read concern level, see:"
msgstr ""

#: ../source/reference/read-concern.txt:176
msgid "``readConcern`` Support"
msgstr ""

#: ../source/reference/read-concern.txt:179
msgid "Read Concern Option"
msgstr ""

#: ../source/reference/read-concern.txt:181
msgid ""
"For operations not in :doc:`multi-document transactions "
"</core/transactions>`, you can specify a ``readConcern`` level as an "
"option to commands and methods that support read concern:"
msgstr ""

#: ../source/reference/read-concern.txt:189
msgid ""
"To specify the read concern level for the :binary:`~bin.mongo` shell "
"method :method:`db.collection.find()`, use the "
":method:`cursor.readConcern()` method:"
msgstr ""

#: ../source/reference/read-concern.txt:198
msgid "Transactions and Available Read Concerns"
msgstr ""

#: ../source/reference/read-concern.txt:200
msgid ""
"For :doc:`multi-document transactions </core/transactions>`, you set the "
"read concern at the transaction level, not at the individual operation "
"level. The operations in the transaction will use the transaction-level "
"read concern. Any read concern set at the collection and database level "
"is ignored inside the transaction. If the transaction-level read concern "
"is explicitly specified, the client level read concern is also ignored "
"inside the transaction."
msgstr ""

#: ../source/reference/read-concern.txt:210
msgid ""
"Do not explicitly set the read concern for the individual operations. To "
"set the read concern for transactions, see :ref:`transaction-options`."
msgstr ""

#: ../source/reference/read-concern.txt:214
msgid "You can set the read concern at the transaction start:"
msgstr ""

#: ../source/reference/read-concern.txt:216
msgid ""
"For multi-document transaction, read concern levels "
":readconcern:`\"snapshot\"`, :readconcern:`\"local\"` and "
":readconcern:`\"majority\"` are available."
msgstr ""

#: ../source/includes/extracts/transactions-read-concern-tip.rst:2
msgid ""
"For :readconcern:`\"local\"` and :readconcern:`\"majority\"` read "
"concern, MongoDB may provide stronger isolation guarantees than "
"specified. Specifically, in MongoDB 4.0, all multi-documents transactions"
" have :readconcern:`\"snapshot\"` isolation."
msgstr ""

#: ../source/includes/extracts/transactions-read-concern-tip.rst:7
msgid ""
"In future versions of MongoDB, the server will optimize around the "
"specified read concern (isolation level) instead of providing stronger "
"isolation guarantees than explicitly specified."
msgstr ""

#: ../source/includes/extracts/transactions-read-concern-tip.rst:11
msgid ""
"As such, if stronger guarantees than :readconcern:`\"local\"` and "
":readconcern:`\"majority\"` read concern are needed, explicitly specify "
"the appropriate read concern instead of relying on MongoDB to promote the"
" read concern level."
msgstr ""

#: ../source/reference/read-concern.txt:224
msgid ""
"Write commands that are part of a :doc:`multi-document transactions "
"</core/transactions>` can support the transaction-level read concern."
msgstr ""

#: ../source/reference/read-concern.txt:227
msgid ""
"If unspecified at the transaction start, transactions use the session-"
"level read concern or, if that is unset, the client-level read concern."
msgstr ""

#: ../source/reference/read-concern.txt:231
msgid ""
"For more information, see :ref:`Transaction Read Concern <txn-read-"
"concern>`."
msgstr ""

#: ../source/reference/read-concern.txt:235
msgid "Causally Consistent Sessions and Available Read Concerns"
msgstr ""

#: ../source/reference/read-concern.txt:237
msgid ""
"For operations in a :ref:`causally consistent session <causal-"
"consistency>`, :readconcern:`\"local\"` and :readconcern:`\"majority\"` "
"levels are available. However, to guarantee causal consistency, you must "
"use :readconcern:`\"majority\"`. For details, see :ref:`causal-"
"consistency`."
msgstr ""

#: ../source/reference/read-concern.txt:243
msgid ""
"If a multi-document transaction is associated with a causally consistent "
"session, :readconcern:`\"snapshot\"` is also available for the the "
"transaction."
msgstr ""

#: ../source/reference/read-concern.txt:248
msgid "Operations That Support Read Concern"
msgstr ""

#: ../source/reference/read-concern.txt:250
msgid "The following operations support read concern:"
msgstr ""

#: ../source/reference/read-concern.txt:254
msgid ""
"To set read concern for operations in a transaction, you set the read "
"concern at the transaction level, not at the individual operation level. "
"Do not explicitly set the read concern for the individual operations in a"
" transaction. For more information, see :ref:`Transaction Read Concern "
"<txn-read-concern>`."
msgstr ""

#: ../source/reference/read-concern.txt:264
msgid "Command/Method"
msgstr ""

#: ../source/reference/read-concern.txt:268
#: ../source/reference/read-concern.txt:375
msgid ":readconcern:`\"snapshot\"` [#snapshot]_"
msgstr ""

#: ../source/reference/read-concern.txt:271
msgid ":dbcommand:`count`"
msgstr ""

#: ../source/reference/read-concern.txt:272
#: ../source/reference/read-concern.txt:273
#: ../source/reference/read-concern.txt:274
#: ../source/reference/read-concern.txt:275
#: ../source/reference/read-concern.txt:276
#: ../source/reference/read-concern.txt:280
#: ../source/reference/read-concern.txt:281
#: ../source/reference/read-concern.txt:282
#: ../source/reference/read-concern.txt:283
#: ../source/reference/read-concern.txt:284
#: ../source/reference/read-concern.txt:288
#: ../source/reference/read-concern.txt:289
#: ../source/reference/read-concern.txt:290
#: ../source/reference/read-concern.txt:291
#: ../source/reference/read-concern.txt:292
#: ../source/reference/read-concern.txt:298
#: ../source/reference/read-concern.txt:299
#: ../source/reference/read-concern.txt:300
#: ../source/reference/read-concern.txt:301
#: ../source/reference/read-concern.txt:302
#: ../source/reference/read-concern.txt:307
#: ../source/reference/read-concern.txt:308
#: ../source/reference/read-concern.txt:309
#: ../source/reference/read-concern.txt:311
#: ../source/reference/read-concern.txt:314
#: ../source/reference/read-concern.txt:315
#: ../source/reference/read-concern.txt:316
#: ../source/reference/read-concern.txt:317
#: ../source/reference/read-concern.txt:318
#: ../source/reference/read-concern.txt:321
#: ../source/reference/read-concern.txt:325
#: ../source/reference/read-concern.txt:328
#: ../source/reference/read-concern.txt:329
#: ../source/reference/read-concern.txt:330
#: ../source/reference/read-concern.txt:332
#: ../source/reference/read-concern.txt:337
#: ../source/reference/read-concern.txt:338
#: ../source/reference/read-concern.txt:339
#: ../source/reference/read-concern.txt:340
#: ../source/reference/read-concern.txt:341
#: ../source/reference/read-concern.txt:344
#: ../source/reference/read-concern.txt:345
#: ../source/reference/read-concern.txt:346
#: ../source/reference/read-concern.txt:348
#: ../source/reference/read-concern.txt:352
#: ../source/reference/read-concern.txt:354
#: ../source/reference/read-concern.txt:355
#: ../source/reference/read-concern.txt:382
#: ../source/reference/read-concern.txt:385
#: ../source/reference/read-concern.txt:394
#: ../source/reference/read-concern.txt:397
#: ../source/reference/read-concern.txt:405
#: ../source/reference/read-concern.txt:408
#: ../source/reference/read-concern.txt:417
#: ../source/reference/read-concern.txt:420
msgid "|checkmark|"
msgstr ""

#: ../source/reference/read-concern.txt:278
msgid ":dbcommand:`distinct`"
msgstr ""

#: ../source/reference/read-concern.txt:287
msgid ":dbcommand:`find`"
msgstr ""

#: ../source/reference/read-concern.txt:294
msgid ":method:`db.collection.find()` via :method:`cursor.readConcern()`"
msgstr ""

#: ../source/reference/read-concern.txt:304
msgid ":dbcommand:`geoNear`"
msgstr ""

#: ../source/reference/read-concern.txt:306
msgid "*Deprecated in MongoDB 4.0*"
msgstr ""

#: ../source/reference/read-concern.txt:313
msgid ":dbcommand:`geoSearch`"
msgstr ""

#: ../source/reference/read-concern.txt:320
msgid ":dbcommand:`getMore`"
msgstr ""

#: ../source/reference/read-concern.txt:327
msgid ":dbcommand:`group`"
msgstr ""

#: ../source/reference/read-concern.txt:334
msgid ":dbcommand:`aggregate` :method:`db.collection.aggregate()`"
msgstr ""

#: ../source/reference/read-concern.txt:343
msgid ":dbcommand:`parallelCollectionScan`"
msgstr ""

#: ../source/reference/read-concern.txt:350
msgid ":method:`Session.startTransaction()`"
msgstr ""

#: ../source/reference/read-concern.txt:358
msgid ""
"The following write operations can also accept a read concern if part of "
"a multi-document transaction:"
msgstr ""

#: ../source/reference/read-concern.txt:363
msgid ""
"To set read concern for operations in a transaction, you set the read "
"concern at the transaction level, not at the individual operation level."
msgstr ""

#: ../source/reference/read-concern.txt:371
msgid "Command"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":dbcommand:`delete`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.deleteMany()`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.deleteOne()`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.remove()`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":dbcommand:`findAndModify`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.findAndModify()`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.findOneAndDelete()`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.findOneAndReplace()`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.findOneAndUpdate()`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":dbcommand:`insert`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.insert()`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.insertOne()`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.insertMany()`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":dbcommand:`update`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.update()`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.updateMany()`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.updateOne()`"
msgstr ""

#: ../source/reference/read-concern.txt
msgid ":method:`db.collection.replaceOne()`"
msgstr ""

#: ../source/reference/read-concern.txt:425
msgid ""
"Read concern :readconcern:`\"snapshot\"` is available only for multi-"
"document transactions, and for transactions, you set the read concern at "
"the transaction level. The operations that support "
":readconcern:`\"snapshot\"` correspond to the CRUD operations available "
"in transactions. For more information, see :ref:`Transaction Read Concern"
" <txn-read-concern>`."
msgstr ""

#: ../source/reference/read-concern.txt:433
msgid "Considerations"
msgstr ""

#: ../source/reference/read-concern.txt:436
msgid "Read Your Own Writes"
msgstr ""

#: ../source/includes/fact-read-own-writes.rst:1
msgid ""
"Starting in MongoDB 3.6, you can use :ref:`causally consistent sessions "
"<sessions>` to read your own writes, if the writes request "
"acknowledgement."
msgstr ""

#: ../source/includes/fact-read-own-writes.rst:5
msgid ""
"Prior to MongoDB 3.6, you must have issued your write operation with "
":writeconcern:`{ w: \"majority\" } <\"majority\">` write concern and then"
" use either :readconcern:`\"majority\"` or "
":readconcern:`\"linearizable\"` read concern for the read operations to "
"ensure that a single thread can read its own writes."
msgstr ""

#: ../source/reference/read-concern.txt:443
msgid "Real Time Order"
msgstr ""

#: ../source/reference/read-concern.txt:445
msgid ""
"Combined with :writeconcern:`\"majority\"` write concern, "
":readconcern:`\"linearizable\"` read concern enables multiple threads to "
"perform reads and writes on a single document as if a single thread "
"performed these operations in real time; that is, the corresponding "
"schedule for these reads and writes is considered linearizable."
msgstr ""

#: ../source/reference/read-concern.txt:452
msgid "Performance Comparisons"
msgstr ""

#: ../source/reference/read-concern.txt:454
msgid ""
"Unlike :readconcern:`\"majority\"`, :readconcern:`\"linearizable\"` read "
"concern confirms with secondary members that the read operation is "
"reading from a primary that is capable of confirming writes with "
":writeconcern:`{ w: \"majority\" } <\"majority\">` write concern. [#edge-"
"cases-2-primaries]_ As such, reads with linearizable read concern may be "
"significantly slower than reads with :readconcern:`\"majority\"` or "
":readconcern:`\"local\"` read concerns."
msgstr ""

#: ../source/reference/read-concern.txt:467
msgid "For example:"
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may"
" *transiently* believe that they are the primary, but at most, one of "
"them will be able to complete writes with :writeconcern:`{ w: "
"\"majority\" } <\"majority\">` write concern. The node that can complete "
":writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current "
"primary, and the other node is a former primary that has not yet "
"recognized its demotion, typically due to a :term:`network partition`. "
"When this occurs, clients that connect to the former primary may observe "
"stale data despite having requested read preference :readmode:`primary`, "
"and new writes to the former primary will eventually roll back."
msgstr ""

#: ../source/reference/read-concern.txt:487
msgid "Read Operations and ``afterClusterTime``"
msgstr ""

#: ../source/reference/read-concern.txt:491
msgid ""
"MongoDB 3.6 introduces support for :ref:`causally consistent sessions "
"<sessions>`. For read operations associated with causally consistent "
"session, MongoDB 3.6 introduces the ``afterClusterTime`` read concern "
"option to be set automatically by the drivers for operations associated "
"with causally consistent sessions."
msgstr ""

#: ../source/reference/read-concern.txt:499
msgid ""
"Do not manually set ``afterClusterTime``. MongoDB drivers set this value "
"automatically for operations associated with causally consistent "
"sessions."
msgstr ""

#: ../source/reference/read-concern.txt:503
msgid ""
"To satisfy a read request with an ``afterClusterTime`` value of ``T``, a "
":binary:`~bin.mongod` must perform the request after its oplog reaches "
"time ``T``. If its oplog has not reached time ``T``, the "
":binary:`~bin.mongod` must wait to service the request."
msgstr ""

#: ../source/reference/read-concern.txt:508
msgid ""
"Read operations with a specified ``afterClusterTime`` return data that "
"meet both the :ref:`read concern level <read-concern-levels>` requirement"
" and the specified ``afterClusterTime`` requirement."
msgstr ""

#: ../source/reference/read-concern.txt:512
msgid ""
"For read operations not associated with causally consistent sessions, "
"``afterClusterTime`` is unset."
msgstr ""

