# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 23:38-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/transactions.txt:3
msgid "Transactions"
msgstr ""

#: ../source/core/transactions.txt:19
msgid "In MongoDB, an operation on a single document is atomic. Because you can use embedded documents and arrays to capture relationships between data in a single document structure instead of normalizing across multiple documents and collections, this single-document atomicity obviates the need for multi-document transactions for many practical use cases."
msgstr ""

#: ../source/core/transactions.txt:25
msgid "However, for situations that require atomicity for updates to multiple documents or consistency between reads to multiple documents:"
msgstr ""

#: ../source/core/transactions.txt:28
msgid "**Starting in version 4.0**, MongoDB provides the ability to perform multi-document transactions against replica sets. [#upcoming]_"
msgstr ""

#: ../source/core/transactions.txt:31
msgid "Multi-document transactions can be used across multiple operations, collections, databases, and documents. Multi-document transactions provide an \"all-or-nothing\" proposition. When a transaction commits, all data changes made in the transaction are saved. If any operation in the transaction fails, the transaction aborts and all data changes made in the transaction are discarded without ever becoming visible. Until a transaction commits, no write operations in the transaction are visible outside the transaction."
msgstr ""

#: ../source/includes/extracts/transactions-usage.rst:3
msgid "In most cases, multi-document transaction incurs a greater performance cost over single document writes, and the availability of multi-document transaction should not be a replacement for effective schema design. For many scenarios, the :ref:`denormalized data model (embedded documents and arrays) <data-modeling-embedding>` will continue to be optimal for your data and use cases. That is, for many scenarios, modeling your data appropriately will minimize the need for multi-document transactions."
msgstr ""

#: ../source/core/transactions.txt:44
msgid "Transactions for sharded clusters are scheduled for MongoDB 4.2"
msgstr ""

#: ../source/includes/fact-upcoming.rst:1
msgid "The development, release, and timing of any features or functionality described for our products remains at our sole discretion. This information is merely intended to outline our general product direction and it should not be relied on in making a purchasing decision nor is this a commitment, promise or legal obligation to deliver any material, code, or functionality."
msgstr ""

#: ../source/core/transactions.txt:49
msgid "Transactions API"
msgstr ""

#: ../source/core/transactions.txt:51
msgid "The following :binary:`~bin.mongo` shell example highlights the key components of using transactions:"
msgstr ""

#: ../source/core/transactions.txt:56
msgid "The example omits retry logic and robust error handling for simplicity's sake. For a more practical example of incorporating transactions in applications, see :ref:`transactions-retry` instead."
msgstr ""

#: ../source/core/transactions.txt:88
msgid "Transactions and Sessions"
msgstr ""

#: ../source/core/transactions.txt:90
msgid "Transactions are associated with a session. That is, you start a transaction for a session. At any given time, you can have at most one open transaction for a session."
msgstr ""

#: ../source/core/transactions.txt:96
msgid "When using the drivers, you **must** pass the session to each operation in the transaction."
msgstr ""

#: ../source/core/transactions.txt:99
msgid "If a session ends and it has an open transaction, the transaction aborts."
msgstr ""

#: ../source/core/transactions.txt:105
msgid "Transactions and MongoDB Drivers"
msgstr ""

#: ../source/core/transactions.txt:107
msgid "Clients require MongoDB drivers updated for MongoDB 4.0."
msgstr ""

#: ../source/includes/list-4.0-drivers.rst:4
msgid "Java 3.8.0"
msgstr ""

#: ../source/includes/list-4.0-drivers.rst:6
msgid "Python 3.7.0"
msgstr ""

#: ../source/includes/list-4.0-drivers.rst:8
msgid "C 1.11.0"
msgstr ""

#: ../source/includes/list-4.0-drivers.rst:10
msgid "C# 2.7"
msgstr ""

#: ../source/includes/list-4.0-drivers.rst:12
msgid "Node 3.1.0"
msgstr ""

#: ../source/includes/list-4.0-drivers.rst:14
msgid "Ruby 2.6.0"
msgstr ""

#: ../source/includes/list-4.0-drivers.rst:16
msgid "Perl 2.0.0"
msgstr ""

#: ../source/includes/list-4.0-drivers.rst:18
msgid "PHPC 1.5.0"
msgstr ""

#: ../source/includes/list-4.0-drivers.rst:20
msgid "Scala 2.4.0"
msgstr ""

#: ../source/core/transactions.txt:113
msgid "To associate read and write operations with a transaction, you **must** pass the session to each operation in the transaction. For examples, see :ref:`transactions-retry`."
msgstr ""

#: ../source/core/transactions.txt:118
msgid "Transactions and the ``mongo`` Shell"
msgstr ""

#: ../source/core/transactions.txt:120
msgid "The following :binary:`~bin.mongo` shell methods are available for transactions:"
msgstr ""

#: ../source/core/transactions.txt:123
msgid ":method:`Session.startTransaction()`"
msgstr ""

#: ../source/core/transactions.txt:125
msgid ":method:`Session.commitTransaction()`"
msgstr ""

#: ../source/core/transactions.txt:127
msgid ":method:`Session.abortTransaction()`"
msgstr ""

#: ../source/core/transactions.txt:131
msgid "Transactions and Atomicity"
msgstr ""

#: ../source/core/transactions.txt:133
msgid "Multi-document transactions are atomic:"
msgstr ""

#: ../source/core/transactions.txt:135
msgid "When a transaction commits, all data changes made in the transaction are saved and visible outside the transaction. Until a transaction commits, the data changes made in the transaction are not visible outside the transaction."
msgstr ""

#: ../source/core/transactions.txt:140
msgid "When a transaction aborts, all data changes made in the transaction are discarded without ever becoming visible. For example, if any operation in the transaction fails, the transaction aborts and all data changes made in the transaction are discarded without ever becoming visible."
msgstr ""

#: ../source/core/transactions.txt:150
msgid "Transactions and Operations"
msgstr ""

#: ../source/core/transactions.txt:152
msgid "For transactions:"
msgstr ""

#: ../source/includes/extracts/transactions-operations-crud.rst:2
msgid "You can specify read/write (CRUD) operations on **existing** collections. The collections can be in different databases. For a list of CRUD operations, see :ref:`transactions-operations-crud`."
msgstr ""

#: ../source/includes/extracts/transactions-operations-crud.rst:6
msgid "You cannot read/write to collections in the ``config``, ``admin``, or ``local`` databases."
msgstr ""

#: ../source/includes/extracts/transactions-operations-crud.rst:9
msgid "You cannot write to ``system.*`` collections."
msgstr ""

#: ../source/includes/extracts/transactions-operations-crud.rst:11
msgid "You cannot return the supported operation's query plan (i.e. ``explain``)."
msgstr ""

#: ../source/includes/extracts/transactions-operations-getMore.rst:2
msgid "For cursors created outside of transactions, you cannot call :dbcommand:`getMore` inside a transaction."
msgstr ""

#: ../source/includes/extracts/transactions-operations-getMore.rst:5
msgid "For cursors created in a transaction, you cannot call :dbcommand:`getMore` outside the transaction."
msgstr ""

#: ../source/core/transactions.txt:156
msgid "Operations that affect the database catalog, such as creating or dropping a collection or an index, are not allowed in multi-document transactions. For example, a multi-document transaction cannot include an insert operation that would result in the creation of a new collection. See :ref:`transactions-ops-restricted`."
msgstr ""

#: ../source/includes/extracts/transactions-operations-catalog-tip.rst:4
msgid "When creating or dropping a collection immediately before starting a transaction, if the collection is accessed within the transaction, issue the create or drop operation with write concern :writeconcern:`\"majority\"` to ensure that the transaction can acquire the required locks."
msgstr ""

#: ../source/core/transactions.txt:166
#: ../source/core/transactions.txt:204
msgid ":doc:`Transactions and Operations Reference </core/transactions-operations>`"
msgstr ""

#: ../source/core/transactions.txt:171
msgid "Count Operation"
msgstr ""

#: ../source/core/transactions.txt:173
msgid "To perform a count operation within a transaction, use the :pipeline:`$count` aggregation stage or the :pipeline:`$group` (with a :group:`$sum` expression) aggregation stage."
msgstr ""

#: ../source/core/transactions.txt:177
msgid "MongoDB drivers compatible with the 4.0 features provide a collection-level API ``countDocuments(filter, options)`` as a helper method that uses the :pipeline:`$group` with a :group:`$sum` expression to perform a count. The 4.0 drivers have deprecated the ``count()`` API."
msgstr ""

#: ../source/core/transactions.txt:182
msgid "Starting in MongoDB 4.0.3, the :binary:`~bin.mongo` shell provides the :method:`db.collection.countDocuments()` helper method that uses the :pipeline:`$group` with a :group:`$sum` expression to perform a count."
msgstr ""

#: ../source/core/transactions.txt:189
msgid "Informational Operations"
msgstr ""

#: ../source/includes/extracts/transactions-operations-restrictions-info.rst:2
msgid "Informational commands, such as :dbcommand:`isMaster`, :dbcommand:`buildInfo`, :dbcommand:`connectionStatus` (and their helper methods) are allowed in transactions; however, they cannot be the first operation in the transaction."
msgstr ""

#: ../source/core/transactions.txt:196
msgid "Restricted Operations"
msgstr ""

#: ../source/includes/extracts/transactions-operations-restrictions.rst:2
msgid "The following operations are not allowed in multi-document transactions:"
msgstr ""

#: ../source/includes/extracts/transactions-operations-restrictions.rst:5
msgid "Operations that affect the database catalog, such as creating or dropping a collection or an index. For example, a multi-document transaction cannot include an insert operation that would result in the creation of a new collection."
msgstr ""

#: ../source/includes/extracts/transactions-operations-restrictions.rst:10
msgid "The :dbcommand:`listCollections` and :dbcommand:`listIndexes` commands and their helper methods are also excluded."
msgstr ""

#: ../source/includes/extracts/transactions-operations-restrictions.rst:13
msgid "Non-CRUD and non-informational operations, such as :dbcommand:`createUser`, :dbcommand:`getParameter`, :dbcommand:`count`, etc. and their helpers."
msgstr ""

#: ../source/core/transactions.txt:202
msgid ":ref:`txn-prod-considerations-ddl`"
msgstr ""

#: ../source/core/transactions.txt:210
msgid "Transactions in Applications"
msgstr ""

#: ../source/core/transactions.txt:212
msgid "Highly Available Applications"
msgstr ""

#: ../source/core/transactions.txt:215
msgid "Regardless of the database system, whether MongoDB or relational databases, applications should take measures to handle errors during transaction commits and incorporate retry logic for transactions."
msgstr ""

#: ../source/core/transactions.txt:220
msgid "Retry Transaction"
msgstr ""

#: ../source/core/transactions.txt:222
msgid "The individual write operations inside the transaction are not retryable, regardless of whether :urioption:`retryWrites` is set to ``true``."
msgstr ""

#: ../source/core/transactions.txt:226
msgid "If an operation encounters an error, the returned error may have an ``errorLabels`` array field. If the error is a transient error, the ``errorLabels`` array field contains ``\"TransientTransactionError\"`` as an element and the transaction as a whole can be retried."
msgstr ""

#: ../source/core/transactions.txt:231
msgid "For example, the following helper runs a function and retries the function if a ``\"TransientTransactionError\"`` is encountered:"
msgstr ""

#: ../source/core/transactions.txt:237
msgid "Retry Commit Operation"
msgstr ""

#: ../source/core/transactions.txt:239
msgid "The commit operations are :doc:`retryable write operations </core/retryable-writes>`. If the commit operation encounters an error, MongoDB drivers retry the operation a single time regardless of whether :urioption:`retryWrites` is set to ``true``."
msgstr ""

#: ../source/core/transactions.txt:244
msgid "If the commit operation encounters an error, MongoDB returns an error with an ``errorLabels`` array field. If the error is a transient commit error, the ``errorLabels`` array field contains ``\"UnknownTransactionCommitResult\"`` as an element and the commit operation can be retried."
msgstr ""

#: ../source/core/transactions.txt:250
msgid "In addition to the single retry behavior provided by the MongoDB drivers, applications should take measures to handle ``\"UnknownTransactionCommitResult\"`` errors during transaction commits."
msgstr ""

#: ../source/core/transactions.txt:254
msgid "For example, the following helper commits a transaction and retries if a ``\"UnknownTransactionCommitResult\"`` is encountered:"
msgstr ""

#: ../source/core/transactions.txt:260
msgid "Retry Transaction and Commit Operation"
msgstr ""

#: ../source/core/transactions.txt:262
msgid "Incorporating logic to retrying the transaction for transient errors and retrying the commit, the full code example is:"
msgstr ""

#: ../source/core/transactions.txt:270
msgid "Read Concern/Write Concern/Read Preference"
msgstr ""

#: ../source/core/transactions.txt:275
msgid "Transactions and Read Concern"
msgstr ""

#: ../source/core/transactions.txt:277
msgid "Operations in a transaction use the transaction-level :doc:`read concern </reference/read-concern>`. That is, any read concern set at the collection and database level is ignored inside the transaction."
msgstr ""

#: ../source/core/transactions.txt:281
msgid "You can set the transaction-level :doc:`read concern </reference/read-concern>` at the transaction start."
msgstr ""

#: ../source/core/transactions.txt:284
msgid "If the transaction-level read concern is unset, the transaction-level read concern defaults to the session-level read concern."
msgstr ""

#: ../source/core/transactions.txt:287
msgid "If transaction-level and the session-level read concern are unset, the transaction-level read concern defaults to the client-level read concern. By default, client-level read concern is :readconcern:`\"local\"` for reads against the primary. See also :ref:`transactions-read-preference`."
msgstr ""

#: ../source/core/transactions.txt:293
msgid "Multi-document transactions support the following read concern levels:"
msgstr ""

#: ../source/core/transactions.txt:296
msgid "``\"local\"``"
msgstr ""

#: ../source/core/transactions.txt:300
msgid "Read concern :readconcern:`\"local\"` returns the most recent data available from the node but can be rolled back."
msgstr ""

#: ../source/core/transactions.txt:305
msgid "``\"majority\"``"
msgstr ""

#: ../source/core/transactions.txt:309
msgid "Read concern :readconcern:`\"majority\"` returns data that has been acknowledged by a majority of the replica set members (i.e. data cannot be rolled back) **if** the transaction commits with :ref:`write concern \"majority\" <transactions-write-concern>`. [#psa]_"
msgstr ""

#: ../source/core/transactions.txt:314
msgid "If the transaction does not use :ref:`write concern \"majority\" <transactions-write-concern>` for the commit, the :readconcern:`\"majority\"` read concern provides **no** guarantees that read operations read majority-committed data."
msgstr ""

#: ../source/core/transactions.txt:321
msgid "For a three-member Primary-Secondary-Arbiter (PSA) replica set architecture, you may have :ref:`disabled read concern \"majority\" <4.0-disable-read-concern-majority>` to avoid cache pressure. Disabling :readconcern:`\"majority\"` does not affect transactions; i.e. you can specify read concern :readconcern:`\"majority\"` for transactions even if read concern :readconcern:`\"majority\"` is disabled."
msgstr ""

#: ../source/core/transactions.txt:332
msgid "``\"snapshot\"``"
msgstr ""

#: ../source/core/transactions.txt:336
msgid "Read concern :readconcern:`\"snapshot\"` returns data from a snapshot of majority committed data **if** the transaction commits with :ref:`write concern \"majority\" <transactions-write-concern>`."
msgstr ""

#: ../source/core/transactions.txt:340
msgid "If the transaction does not use :ref:`write concern \"majority\" <transactions-write-concern>` for the commit, the :readconcern:`\"snapshot\"` read concern provides **no** guarantee that read operations used a snapshot of majority-committed data."
msgstr ""

#: ../source/core/transactions.txt:348
msgid "Transactions and Write Concern"
msgstr ""

#: ../source/core/transactions.txt:350
msgid "Transactions use the transaction-level :doc:`write concern </reference/write-concern>` to commit the write operations. Operations inside transactions ignore write concerns."
msgstr ""

#: ../source/core/transactions.txt:356
msgid "Do not explicitly set the write concern for the individual write operations inside a transaction."
msgstr ""

#: ../source/core/transactions.txt:359
msgid "You can set the transaction-level :doc:`write </reference/read-concern>` at the transaction start:"
msgstr ""

#: ../source/core/transactions.txt:362
msgid "If the transaction-level write concern is unset, the transaction-level write concern defaults to the session-level write concern for the commit."
msgstr ""

#: ../source/core/transactions.txt:366
msgid "If the transaction-level write concern and the session-level write concern are unset, transaction-level write concern defaults to the client-level write concern. By default, client-level read concern is :writeconcern:`w: 1 <\\<number\\>>`."
msgstr ""

#: ../source/core/transactions.txt:371
msgid "Multi-document transactions support the following write concern ``w`` values:"
msgstr ""

#: ../source/core/transactions.txt:375
msgid "``w: 1``"
msgstr ""

#: ../source/core/transactions.txt:379
msgid "Write concern :writeconcern:`w: 1 <\\<number\\>>` returns acknowledgement after the commit has been applied to the primary."
msgstr ""

#: ../source/core/transactions.txt:384
msgid "When you commit with :writeconcern:`w: 1 <\\<number\\>>`, your transaction can be :doc:`rolled back if there is a failover </core/replica-set-rollbacks>`."
msgstr ""

#: ../source/core/transactions.txt:388
msgid "When you commit with :writeconcern:`w: 1 <\\<number\\>>` write concern, transaction-level :readconcern:`\"majority\"` read concern provides **no** guarantees that read operations in the transaction read majority-committed data."
msgstr ""

#: ../source/core/transactions.txt:393
msgid "When you commit with :writeconcern:`w: 1 <\\<number\\>>` write concern, transaction-level :readconcern:`\"snapshot\"` read concern provides **no** guarantee that read operations in the transaction used a snapshot of majority-committed data."
msgstr ""

#: ../source/core/transactions.txt:400
msgid "``w: \"majority\"``"
msgstr ""

#: ../source/core/transactions.txt:404
msgid "Write concern :writeconcern:`w: \"majority\" <\"majority\">` returns acknowledgement after the commit has been applied to a majority (M) of voting members; i.e. the commit has been applied to the primary and (M-1) voting secondaries."
msgstr ""

#: ../source/core/transactions.txt:409
msgid "When you commit with :writeconcern:`w: \"majority\" <\"majority\">` write concern, transaction-level :readconcern:`\"majority\"` read concern guarantees that operations have read majority-committed data."
msgstr ""

#: ../source/core/transactions.txt:414
msgid "When you commit with :writeconcern:`w: \"majority\" <\"majority\">` write concern, transaction-level :readconcern:`\"snapshot\"` read concern guarantees that operations have from a synchronized snapshot of majority-committed data."
msgstr ""

#: ../source/core/transactions.txt:422
msgid "Transactions and Read Preference"
msgstr ""

#: ../source/core/transactions.txt:424
msgid "Operations in a transaction use the transaction-level :doc:`read preference </reference/read-preference>`."
msgstr ""

#: ../source/core/transactions.txt:427
msgid "Using the drivers, you can set the transaction-level :doc:`read preference </reference/read-preference>` at the transaction start:"
msgstr ""

#: ../source/core/transactions.txt:430
msgid "If the transaction-level read preference is unset, the transaction uses the session-level read preference."
msgstr ""

#: ../source/core/transactions.txt:433
msgid "If transaction-level and the session-level read preference are unset, the transaction uses the client-level read preference. By default, the client-level read preference is :readmode:`primary`."
msgstr ""

#: ../source/includes/extracts/transactions-read-pref.rst:2
msgid ":doc:`Multi-document transactions </core/transactions>` that contain read operations must use read preference :readmode:`primary`."
msgstr ""

#: ../source/includes/extracts/transactions-read-pref.rst:5
msgid "All operations in a given transaction must route to the same member."
msgstr ""

#: ../source/core/transactions.txt:440
msgid "Feature Compatibility and Storage Engines"
msgstr ""

#: ../source/core/transactions.txt:443
msgid "Feature Compatibility Version (FCV)"
msgstr ""

#: ../source/core/transactions.txt:445
msgid "The ``featureCompatibilityVersion`` (fCV) of all members of the replica set must be ``4.0`` or greater. To check the fCV for a member, connect to the member and run the following command:"
msgstr ""

#: ../source/core/transactions.txt:453
msgid "For more information on fCV, see :dbcommand:`setFeatureCompatibilityVersion`."
msgstr ""

#: ../source/core/transactions.txt:457
msgid "Storage Engines"
msgstr ""

#: ../source/core/transactions.txt:459
msgid "Multi-document transactions are only available for deployments that use WiredTiger storage engine."
msgstr ""

#: ../source/core/transactions.txt:462
msgid "Multi-document transactions are not available for deployments that use in-memory storage engine or the deprecated MMAPv1 storage engine."
msgstr ""

#: ../source/core/transactions.txt:467
msgid "Transactions and Security"
msgstr ""

#: ../source/core/transactions.txt:469
msgid "If running with :doc:`access control </core/authorization>`, you must have privileges for the :ref:`operations in the transaction <transactions-operations>`. [#username-external]_"
msgstr ""

#: ../source/core/transactions.txt:473
msgid "If running with :doc:`auditing </core/auditing>`, operations in an aborted transaction are still audited. However, there is no audit event that indicates that the transaction aborted."
msgstr ""

#: ../source/core/transactions.txt:479
msgid "If using ``$external`` authentication users (i.e. Kerberos, LDAP, x.509 users), the usernames cannot be greater than 10k bytes."
msgstr ""

