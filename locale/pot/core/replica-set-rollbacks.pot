# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 23:38-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replica-set-rollbacks.txt:10
msgid "Rollbacks During Replica Set Failover"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:20
msgid "A rollback reverts write operations on a former :term:`primary` when the member rejoins its :term:`replica set` after a :term:`failover`. A rollback is necessary only if the primary had accepted write operations that the :term:`secondaries <secondary>` had **not** successfully replicated before the primary stepped down. When the primary rejoins the set as a secondary, it reverts, or \"rolls back,\" its write operations to maintain database consistency with the other members."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:29
msgid "MongoDB attempts to avoid rollbacks, which should be rare. When a rollback does occur, it is often the result of a network partition. Secondaries that can not keep up with the throughput of operations on the former primary, increase the size and impact of the rollback."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:35
msgid "A rollback does *not* occur if the write operations replicate to another member of the replica set before the primary steps down *and* if that member remains available and accessible to a majority of the replica set."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:43
msgid "Collect Rollback Data"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:45
msgid "Starting in version 4.0, MongoDB adds the parameter :parameter:`createRollbackDataFiles` to control whether or not rollback files are created during rollbacks."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:49
msgid "By default, when a rollback occurs, MongoDB writes the rollback data to :term:`BSON` files. For each collection whose data is rolled back, the rollback files are located in a ``<dbpath>/rollback/<db>.<collection>`` directory and have filenames of the form: [#previous]_"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:59
msgid "For example, if data for the collection ``comments`` in the ``reporting`` database rolled back:"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:67
msgid "where ``<dbpath>`` is the :binary:`~bin.mongod`'s :setting:`~storage.dbPath`."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:69
msgid "To read the contents of the rollback files, use :doc:`bsondump </reference/program/bsondump>`. Based on the content and the knowledge of their applications, administrators can decide the next course of action to take."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:76
msgid "In previous versions, rollback files are located directly under the ``<dbpath>/rollback`` directory with the filenames of the form ``<db>.<collection>.<timestamp>.bson``."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:83
msgid "Avoid Replica Set Rollbacks"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:85
msgid "For replica sets, the default :doc:`write concern {w: 1} </reference/write-concern>` only provides acknowledgement of write operations on the primary. With the default write concern, data may be rolled back if the primary steps down before the write operations have replicated to any of the secondaries. This includes data written in :doc:`multi-document transactions </core/transactions>` that commit using :writeconcern:`\"w: 1\" <\\<number\\>>` write concern."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:93
msgid "To prevent rollbacks of data that have been acknowledged to the client, run all voting members with journaling enabled and use :ref:`w: majority write concern <wc-w>` to guarantee that the write operations propagate to a majority of the replica set nodes before returning with acknowledgement to the issuing client."
msgstr ""

#: ../source/includes/extracts/no-journaling-rollback.rst:2
msgid "With :rsconf:`writeConcernMajorityJournalDefault` set to ``false``, MongoDB does not wait for :writeconcern:`w: \"majority\" <\"majority\">` writes to be written to the on-disk journal before acknowledging the writes. As such, :writeconcern:`majority` write operations could possibly roll back in the event of a transient loss (e.g. crash and restart) of a majority of nodes in a given replica set."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
msgid "Regardless of :doc:`write concern </reference/write-concern>`, other clients using :readconcern:`\"local\"` or :readconcern:`\"available\"` readConcern can see the result of a write operation before the write operation is acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:6
msgid "For operations in a :doc:`multi-document transaction </core/transactions>`, the data changes made in the transaction are not visible outside the transaction until a transaction commits. However, other clients can see the result at the time of the transaction commit before the commit operation is acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:13
msgid "Clients using :readconcern:`\"local\"` or :readconcern:`\"available\"` readConcern can read data which may be subsequently :doc:`rolled back </core/replica-set-rollbacks>` during replica set failovers."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:108
msgid "Rollback Considerations"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:111
msgid "Background Index Builds"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:115
msgid "Starting in version 4.0, MongoDB waits for any in-progress :ref:`background index builds <index-creation-background>` to finish before starting a rollback."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:120
msgid "Size Limitations"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:124
msgid "Starting in version 4.0, MongoDB has no limit on the amount of data that can be rolled back."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:127
msgid "In previous versions, a :binary:`~bin.mongod` instance will not roll back more than 300 megabytes of data and requires manual intervention if more than 300 megabytes of data need to be rolled back."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:132
msgid "Time Elapsed Limitations"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:136
msgid "Starting in version 4.0, the rollback time limit defaults to 24 hours and is configurable using the parameter :parameter:`rollbackTimeLimitSecs`. :parameter:`rollbackTimeLimitSecs` allows the setting of the maximum time allowed from the common point to the last point in the oplog of the replica set member that is indicated for rollback."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:143
msgid "In previous versions, the rollback time limit is not configurable and is set to 30 minutes."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:146
msgid ":doc:`/core/replica-set-high-availability` and :doc:`/core/replica-set-elections`."
msgstr ""

