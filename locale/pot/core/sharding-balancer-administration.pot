# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 23:38-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/sharding-balancer-administration.txt:6
msgid "Sharded Cluster Balancer"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:17
msgid "The MongoDB balancer is a background process that monitors the number of :term:`chunks <chunk>` on each :term:`shard`. When the number of chunks on a given shard reaches specific :ref:`migration thresholds <sharding-migration-thresholds>`, the balancer attempts to automatically migrate chunks between shards and reach an equal number of chunks per shard."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:23
msgid "The balancing procedure for :term:`sharded clusters <sharded cluster>` is entirely transparent to the user and application layer, though there may be some performance impact while the procedure takes place."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:29
msgid "Starting in MongoDB 3.4, the balancer runs on the primary of the config server replica set (CSRS):"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:32
msgid "In version 3.4, when a balancer process is active, the primary of the config server replica set acquires a \"balancer lock\" by modifying a ``_id: \"balancer\"`` document in the :data:`~config.locks` collection in the :ref:`config-database`. This \"balancer lock\" is never released."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:38
msgid "Starting in version 3.6, the balancer no longer takes a \"lock\"."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:47
msgid "Cluster Balancer"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:49
msgid "The :term:`balancer` process is responsible for redistributing the chunks of a sharded collection evenly among the shards for every sharded collection. By default, the balancer process is always enabled."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:53
msgid "To address uneven chunk distribution for a sharded collection, the balancer :doc:`migrates chunks </core/sharding-balancer-administration>` from shards with more chunks to shards with a fewer number of chunks. The balancer migrates the chunks until there is an even distribution of chunks for the collection across the shards. For details about chunk migration, see :ref:`chunk-migration-procedure`."
msgstr ""

#: ../source/includes/fact-archiveMovedChunks.rst:3
msgid "Chunk migrations can have an impact on disk space. Starting in MongoDB 2.6, the source shard automatically archives the migrated documents by default. For details, see :ref:`moveChunk-directory`."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:62
msgid "Chunk migrations carry some overhead in terms of bandwidth and workload, both of which can impact database performance. [#auto-distribute]_ The :term:`balancer` attempts to minimize the impact by:"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:66
msgid "Restricting a shard to at most one migration at any given time; i.e. a shard cannot participate in multiple chunk migrations at the same time. To migrate multiple chunks from a shard, the balancer migrates the chunks one at a time."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:73
msgid "Starting in MongoDB 3.4, MongoDB can perform parallel chunk migrations. Observing the restriction that a shard can participate in at most one migration at a time, for a sharded cluster with *n* shards, MongoDB can perform at most *n/2* (rounded down) simultaneous chunk migrations."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:79
msgid "See also :ref:`chunk-migration-queuing`."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:81
msgid "Starting a balancing round **only** when the difference in the number of chunks between the shard with the greatest number of chunks for a sharded collection and the shard with the lowest number of chunks for that collection reaches the :ref:`migration threshold <sharding-migration-thresholds>`."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:87
msgid "You may disable the balancer temporarily for maintenance. See :ref:`sharding-balancing-disable-temporally` for details."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:90
msgid "You can also limit the window during which the balancer runs to prevent it from impacting production traffic. See :ref:`Schedule the Balancing Window <sharding-schedule-balancing-window>` for details."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:96
msgid "The specification of the balancing window is relative to the local time zone of the primary of the config server replica set."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:99
msgid ":doc:`/tutorial/manage-sharded-cluster-balancer`."
msgstr ""

#: ../source/includes/extracts/zoned-sharding-shard-operation-chunk-distribution.rst:2
msgid "Starting in MongoDB 4.0.3, the shard collection operation can perform an initial chunk creation and distribution for empty or non-existing collections if :doc:`zones and zone ranges </core/zone-sharding>` have been defined for the collection. Initial creation and distribution of chunk allows for faster setup of zoned sharding. After the initial distribution, the balancer manages the chunk distribution going forward per usual."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:106
msgid "Adding and Removing Shards from the Cluster"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:108
msgid "Adding a shard to a cluster creates an imbalance, since the new shard has no chunks. While MongoDB begins migrating data to the new shard immediately, it can take some time before the cluster balances. See the :doc:`/tutorial/add-shards-to-shard-cluster` tutorial for instructions on adding a shard to a cluster."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:114
msgid "Removing a shard from a cluster creates a similar imbalance, since chunks residing on that shard must be redistributed throughout the cluster. While MongoDB begins draining a removed shard immediately, it can take some time before the cluster balances. *Do not* shutdown the servers associated to the removed shard during this process."
msgstr ""

#: ../source/includes/fact-remove-shard-balance-order.rst:1
msgid "When you remove a shard in a cluster with an uneven chunk distribution, the balancer first removes the chunks from the draining shard and then balances the remaining uneven chunk distribution."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:122
msgid "See the :doc:`/tutorial/remove-shards-from-cluster` tutorial for instructions on safely removing a shard from a cluster."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:128
msgid "Chunk Migration Procedure"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:130
msgid "All chunk migrations use the following procedure:"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:132
msgid "The balancer process sends the :dbcommand:`moveChunk` command to the source shard."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:135
msgid "The source starts the move with an internal :dbcommand:`moveChunk` command. During the migration process, operations to the chunk route to the source shard. The source shard is responsible for incoming write operations for the chunk."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:140
msgid "The destination shard builds any indexes required by the source that do not exist on the destination."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:143
msgid "The destination shard begins requesting documents in the chunk and starts receiving copies of the data. See also :ref:`chunk-migration-replication`."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:147
msgid "After receiving the final document in the chunk, the destination shard starts a synchronization process to ensure that it has the changes to the migrated documents that occurred during the migration."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:152
msgid "When fully synchronized, the source shard connects to the :term:`config database` and updates the cluster metadata with the new location for the chunk."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:156
msgid "After the source shard completes the update of the metadata, and once there are no open cursors on the chunk, the source shard deletes its copy of the documents."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:162
msgid "If the balancer needs to perform additional chunk migrations from the source shard, the balancer can start the next chunk migration without waiting for the current migration process to finish this deletion step. See :ref:`chunk-migration-queuing`."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:169
msgid ":ref:`moveChunk-directory`."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:171
msgid "The migration process ensures consistency and maximizes the availability of chunks during balancing."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:177
msgid "Migration Thresholds"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:179
msgid "To minimize the impact of balancing on the cluster, the :term:`balancer` only begins balancing after the distribution of chunks for a sharded collection has reached certain thresholds. The thresholds apply to the difference in number of :term:`chunks <chunk>` between the shard with the most chunks for the collection and the shard with the fewest chunks for that collection. The balancer has the following thresholds:"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:190
msgid "Number of Chunks"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:191
msgid "Migration Threshold"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:193
msgid "Fewer than 20"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:194
msgid "2"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:196
msgid "20-79"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:197
msgid "4"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:199
msgid "80 and greater"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:200
msgid "8"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:202
msgid "The balancer stops running on the target collection when the difference between the number of chunks on any two shards for that collection is *less than two*, or a chunk migration fails."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:210
msgid "Asynchronous Chunk Migration Cleanup"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:212
msgid "To migrate multiple chunks from a shard, the balancer migrates the chunks one at a time. However, the balancer does not wait for the current migration's delete phase to complete before starting the next chunk migration. See :ref:`sharding-chunk-migration` for the chunk migration process and the delete phase."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:218
msgid "This queuing behavior allows shards to unload chunks more quickly in cases of heavily imbalanced cluster, such as when performing initial data loads without pre-splitting and when adding new shards."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:222
msgid "This behavior also affects the :dbcommand:`moveChunk` command, and migration scripts that use the :dbcommand:`moveChunk` command may proceed more quickly."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:226
msgid "In some cases, the delete phases may persist longer. If multiple delete phases are queued but not yet complete, a crash of the replica set's primary can orphan data from multiple migrations."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:230
msgid "The ``_waitForDelete``, available as a setting for the balancer as well as the :dbcommand:`moveChunk` command, can alter the behavior so that the delete phase of the current migration blocks the start of the next chunk migration. The ``_waitForDelete`` is generally for internal testing purposes. For more information, see :ref:`wait-for-delete-setting`."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:240
msgid "Chunk Migration and Replication"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:244
msgid "During chunk migration, the ``_secondaryThrottle`` value determines when the migration proceeds with next document in the chunk."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:247
msgid "In the :data:`config.settings` collection:"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:249
msgid "If the ``_secondaryThrottle`` setting for the balancer is set to a write concern, each document move during chunk migration must receive the requested acknowledgement before proceeding with the next document."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:254
msgid "If the ``_secondaryThrottle`` setting for the balancer is set to ``true``, each document move during chunk migration must receive acknowledgement from at least one secondary before the migration proceeds with the next document in the chunk. This is equivalent to a write concern of :writeconcern:`{ w: 2 } <\\<number\\>>`."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:260
msgid "If the ``_secondaryThrottle`` setting is unset, the migration process does not wait for replication to a secondary and instead continues with the next document."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:264
msgid "Default behavior for :ref:`WiredTiger <storage-wiredtiger>` starting in MongoDB 3.4."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:267
msgid "For the :dbcommand:`moveChunk` command, you can use the command's ``_secondaryThrottle`` and ``writeConcern`` options to specify the behavior during the command. For details, see :dbcommand:`moveChunk` command."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:272
msgid "Independent of any ``_secondaryThrottle`` setting, certain phases of the chunk migration have the following replication policy:"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:275
msgid "MongoDB briefly pauses all application reads and writes to the collection being migrated, on the source shard, before updating the config servers with the new location for the chunk, and resumes the application reads and writes after the update. The chunk move requires all writes to be acknowledged by majority of the members of the replica set both before and after committing the chunk move to config servers."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:283
msgid "When an outgoing chunk migration finishes and cleanup occurs, all writes must be replicated to a majority of servers before further cleanup (from other outgoing migrations) or new incoming migrations can proceed."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:288
msgid "To update the ``_secondaryThrottle`` setting in the :data:`config.settings` collection, see :ref:`sharded-cluster-config-secondary-throttle` for an example."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:295
msgid "Maximum Number of Documents Per Chunk to Migrate"
msgstr ""

#: ../source/includes/limits-sharding-maximum-documents-chunk.rst:3
msgid "MongoDB cannot move a chunk if the number of documents in the chunk is greater than 1.3 times the result of dividing the configured :ref:`chunk size<sharding-chunk-size>` by the average document size. :method:`db.collection.stats()` includes the ``avgObjSize`` field, which represents the average document size in the collection."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:302
msgid "Shard Size"
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:304
msgid "By default, MongoDB attempts to fill all available disk space with data on every shard as the data set grows. To ensure that the cluster always has the capacity to handle data growth, monitor disk usage as well as other performance metrics."
msgstr ""

#: ../source/core/sharding-balancer-administration.txt:309
msgid "See the :ref:`sharded-cluster-config-max-shard-size` tutorial for instructions on setting the maximum size for a shard."
msgstr ""

