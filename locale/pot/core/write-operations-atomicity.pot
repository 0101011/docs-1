# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 23:38-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/write-operations-atomicity.txt:3
msgid "Atomicity and Transactions"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:14
msgid "Atomicity"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:16
msgid "In MongoDB, a write operation is atomic on the level of a single document, even if the operation modifies multiple embedded documents *within* a single document."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:21
msgid "Multi-Document Transactions"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes.rst:2
msgid "When a single write operation (e.g. :method:`db.collection.updateMany()`) modifies multiple documents, the modification of each document is atomic, but the operation as a whole is not atomic."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes.rst:7
msgid "When performing multi-document write operations, whether through a single write operation or multiple write operations, other operations may interleave."
msgstr ""

#: ../source/includes/extracts/transactions-intro-blurb.rst:1
msgid "Starting in version 4.0, for situations that require atomicity for updates to multiple documents or consistency between reads to multiple documents, MongoDB provides :doc:`multi-document transactions </core/transactions>` for replica sets."
msgstr ""

#: ../source/includes/extracts/transactions-usage.rst:3
msgid "In most cases, multi-document transaction incurs a greater performance cost over single document writes, and the availability of multi-document transaction should not be a replacement for effective schema design. For many scenarios, the :ref:`denormalized data model (embedded documents and arrays) <data-modeling-embedding>` will continue to be optimal for your data and use cases. That is, for many scenarios, modeling your data appropriately will minimize the need for multi-document transactions."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:30
msgid "Concurrency Control"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:32
msgid "Concurrency control allows multiple applications to run concurrently without causing data inconsistency or conflicts."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:35
msgid "One approach is to create a :ref:`unique index <index-type-unique>` on a field that can only have unique values. This prevents insertions or updates from creating duplicate data. Create a unique index on multiple fields to force uniqueness on that combination of field values. For examples of use cases, see :ref:`update() and Unique Index <update-with-unique-indexes>` and :ref:`findAndModify() and Unique Index <upsert-and-unique-index>`."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:43
msgid "Another approach is to specify the expected current value of a field in the query predicate for the write operations."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:46
msgid ":doc:`/core/read-isolation-consistency-recency`"
msgstr ""

