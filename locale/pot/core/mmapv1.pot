# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 23:38-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/mmapv1.txt:5
msgid "MMAPv1 Storage Engine"
msgstr ""

#: ../source/core/mmapv1.txt:15
msgid "Deprecated"
msgstr ""

#: ../source/includes/fact-4.0-mmapv1-deprecated.rst:1
msgid "MongoDB 4.0 deprecates the :ref:`storage-mmapv1` and will remove MMAPv1 in a future release. To change your MMAPv1 storage engine deployment to :doc:`/core/wiredtiger`, see:"
msgstr ""

#: ../source/includes/fact-4.0-mmapv1-deprecated.rst:5
msgid ":doc:`/tutorial/change-standalone-wiredtiger`"
msgstr ""

#: ../source/includes/fact-4.0-mmapv1-deprecated.rst:7
msgid ":doc:`/tutorial/change-replica-set-wiredtiger`"
msgstr ""

#: ../source/includes/fact-4.0-mmapv1-deprecated.rst:9
msgid ":doc:`/tutorial/change-sharded-cluster-wiredtiger`"
msgstr ""

#: ../source/core/mmapv1.txt:20
msgid "MMAPv1 is MongoDB's original storage engine based on memory mapped files. It excels at workloads with high volume inserts, reads, and in-place updates."
msgstr ""

#: ../source/includes/fact-mmapv1-big-endian.rst:3
msgid ":doc:`MMAPv1 </core/mmapv1>` is supported on 64-bit Intel architectures (``x86_64``) only. MongoDB returns an error when starting a :binary:`~bin.mongod` using MMAPv1 on an unsupported architecture."
msgstr ""

#: ../source/core/mmapv1.txt:28
msgid "Journal"
msgstr ""

#: ../source/core/mmapv1.txt:30
msgid "In order to ensure that all modifications to a MongoDB data set are durably written to disk, MongoDB, by default, records all modifications to an on-disk journal. MongoDB writes more frequently to the journal than it writes the data files."
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:1
msgid "In the default configuration for the :doc:`MMAPv1 storage engine </core/mmapv1>`, MongoDB writes to the data files on disk every 60 seconds and writes to the :term:`journal` files roughly every 100 milliseconds."
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:6
msgid "To change the interval for writing to the data files, use the :setting:`storage.syncPeriodSecs` setting. For the journal files, see :setting:`storage.journal.commitIntervalMs` setting."
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:10
msgid "These values represent the *maximum* amount of time between the completion of a write operation and when MongoDB writes to the data files or to the journal files. In many cases MongoDB and the operating system flush data to disk more frequently, so that the above values represents a theoretical maximum."
msgstr ""

#: ../source/core/mmapv1.txt:37
msgid "The journal allows MongoDB to successfully recover data from data files after a :binary:`~bin.mongod` instance exits without flushing all changes. See :doc:`/core/journaling` for more information about the journal in MongoDB."
msgstr ""

#: ../source/core/mmapv1.txt:43
msgid "Record Storage Characteristics"
msgstr ""

#: ../source/core/mmapv1.txt:45
msgid "All records are contiguously located on disk, and when a document becomes larger than the allocated record, MongoDB must allocate a new record. New allocations require MongoDB to move a document and update all indexes that refer to the document, which takes more time than in-place updates and leads to storage fragmentation."
msgstr ""

#: ../source/core/mmapv1.txt:54
msgid "By default, MongoDB uses :ref:`power-of-2-allocation` so that every document in MongoDB is stored in a *record* which contains the document itself and extra space, or :term:`padding`. Padding allows the document to grow as the result of updates while minimizing the likelihood of reallocations."
msgstr ""

#: ../source/core/mmapv1.txt:63
msgid "Record Allocation Strategies"
msgstr ""

#: ../source/core/mmapv1.txt:65
msgid "MongoDB supports multiple record allocation strategies that determine how :binary:`~bin.mongod` adds padding to a document when creating a record. Because documents in MongoDB may grow after insertion and all records are contiguous on disk, the padding can reduce the need to relocate documents on disk following updates. Relocations are less efficient than in-place updates and can lead to storage fragmentation. As a result, all padding strategies trade additional space for increased efficiency and decreased fragmentation."
msgstr ""

#: ../source/core/mmapv1.txt:74
msgid "Different allocation strategies support different kinds of workloads: the :ref:`power of 2 allocations <power-of-2-allocation>` are more efficient for insert/update/delete workloads; while :ref:`exact fit allocations <exact-fit-allocation>` is ideal for collections *without* update and delete workloads."
msgstr ""

#: ../source/core/mmapv1.txt:83
msgid "Power of 2 Sized Allocations"
msgstr ""

#: ../source/core/mmapv1.txt:87
msgid "MongoDB 3.0 uses the power of 2 sizes allocation as the default record allocation strategy for MMAPv1. With the power of 2 sizes allocation strategy, each record has a size in bytes that is a power of 2 (e.g. 32, 64, 128, 256, 512 ... 2 MB). For documents larger than 2 MB, the allocation is rounded up to the nearest multiple of 2 MB."
msgstr ""

#: ../source/core/mmapv1.txt:93
msgid "The power of 2 sizes allocation strategy has the following key properties:"
msgstr ""

#: ../source/core/mmapv1.txt:96
msgid "Can efficiently reuse freed records to reduce fragmentation. Quantizing record allocation sizes into a fixed set of sizes increases the probability that an insert will fit into the free space created by an earlier document deletion or relocation."
msgstr ""

#: ../source/core/mmapv1.txt:101
msgid "Can reduce moves. The added padding space gives a document room to grow without requiring a move. In addition to saving the cost of moving, this results in less updates to indexes. Although the power of 2 sizes strategy can minimize moves, it does not eliminate them entirely."
msgstr ""

#: ../source/core/mmapv1.txt:110
msgid "No Padding Allocation Strategy"
msgstr ""

#: ../source/core/mmapv1.txt:114
msgid "For collections whose workloads do not change the document sizes, such as workloads that consist of insert-only operations or update operations that do not increase document size (such as incrementing a counter), you can disable the :ref:`power of 2 allocation <power-of-2-allocation>` using the :dbcommand:`collMod` command with the :collflag:`noPadding` flag or the :method:`db.createCollection()` method with the ``noPadding`` option."
msgstr ""

#: ../source/core/mmapv1.txt:122
msgid "Prior to version 3.0.0, MongoDB used an allocation strategy that included a dynamically calculated :data:`padding <collStats.paddingFactor>` as a factor of the document size."
msgstr ""

#: ../source/core/mmapv1.txt:129
msgid "Memory Use"
msgstr ""

#: ../source/core/mmapv1.txt:131
msgid "With MMAPv1, MongoDB automatically uses all free memory on the machine as its cache. System resource monitors show that MongoDB uses a lot of memory, but its usage is dynamic. If another process suddenly needs half the server's RAM, MongoDB will yield cached memory to the other process."
msgstr ""

#: ../source/core/mmapv1.txt:137
msgid "Technically, the operating system's virtual memory subsystem manages MongoDB's memory. This means that MongoDB will use as much free memory as it can, swapping to disk as needed. Deployments with enough memory to fit the application's working data set in RAM will achieve the best performance."
msgstr ""

