# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 23:38-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replica-set-architectures.txt:6
msgid "Replica Set Deployment Architectures"
msgstr ""

#: ../source/core/replica-set-architectures.txt:16
msgid "The architecture of a :term:`replica set <replica set>` affects the set's capacity and capability. This document provides strategies for replica set deployments and describes common architectures."
msgstr ""

#: ../source/core/replica-set-architectures.txt:20
msgid "The standard replica set deployment for production system is a three-member replica set. These sets provide redundancy and fault tolerance. Avoid complexity when possible, but let your application requirements dictate the architecture."
msgstr ""

#: ../source/core/replica-set-architectures.txt:26
msgid "Strategies"
msgstr ""

#: ../source/core/replica-set-architectures.txt:29
msgid "Determine the Number of Members"
msgstr ""

#: ../source/core/replica-set-architectures.txt:31
msgid "Add members in a replica set according to these strategies."
msgstr ""

#: ../source/core/replica-set-architectures.txt:34
msgid "Maximum Number of Voting Members"
msgstr ""

#: ../source/core/replica-set-architectures.txt:36
msgid "A replica set can have up to :limit:`50 members <Number of Members of a Replica Set>`, but only :limit:`7 voting members <Number of Voting Members of a Replica Set>`. If the replica set already has 7 voting members, additional members must be :ref:`non-voting members <replica-set-non-voting-members>`."
msgstr ""

#: ../source/core/replica-set-architectures.txt:43
msgid "Deploy an Odd Number of Members"
msgstr ""

#: ../source/core/replica-set-architectures.txt:45
msgid "Ensure that the replica set has an odd number of voting members. If you have an *even* number of voting members, deploy an :ref:`arbiter <replica-set-arbiters>` so that the set has an odd number of voting members."
msgstr ""

#: ../source/core/replica-set-architectures.txt:50
msgid "An :term:`arbiter <arbiter>` does not store a copy of the data and requires fewer resources. As a result, you may run an arbiter on an application server or other shared process. With no copy of the data, it may be possible to place an arbiter into environments that you would not place other members of the replica set. Consult your security policies."
msgstr ""

#: ../source/includes/extracts/arbiters-and-pvs-with-reference.rst:2
msgid "For the following MongoDB versions, ``pv1`` increases the likelihood of :writeconcern:`w:1 <\\<number\\>>` rollbacks compared to ``pv0`` (no longer supported in MongoDB 4.0+) for replica sets with arbiters:"
msgstr ""

#: ../source/includes/extracts/arbiters-and-pvs-with-reference.rst:6
msgid "MongoDB 3.4.1"
msgstr ""

#: ../source/includes/extracts/arbiters-and-pvs-with-reference.rst:8
msgid "MongoDB 3.4.0"
msgstr ""

#: ../source/includes/extracts/arbiters-and-pvs-with-reference.rst:10
msgid "MongoDB 3.2.11 or earlier"
msgstr ""

#: ../source/includes/extracts/arbiters-and-pvs-with-reference.rst:12
msgid "See :doc:`/reference/replica-set-protocol-versions`."
msgstr ""

#: ../source/includes/admonition-multiple-arbiters.rst:3
msgid "In general, avoid deploying more than one arbiter per replica set."
msgstr ""

#: ../source/core/replica-set-architectures.txt:64
msgid "Consider Fault Tolerance"
msgstr ""

#: ../source/core/replica-set-architectures.txt:66
msgid "*Fault tolerance* for a replica set is the number of members that can become unavailable and still leave enough members in the set to elect a primary. In other words, it is the difference between the number of members in the set and the majority of voting members needed to elect a primary. Without a primary, a replica set cannot accept write operations. Fault tolerance is an effect of replica set size, but the relationship is not direct. See the following table:"
msgstr ""

#: ../source/core/replica-set-architectures.txt:78
msgid "Number of Members"
msgstr ""

#: ../source/core/replica-set-architectures.txt:80
msgid "Majority Required to Elect a New Primary"
msgstr ""

#: ../source/core/replica-set-architectures.txt:82
msgid "Fault Tolerance"
msgstr ""

#: ../source/core/replica-set-architectures.txt:84
#: ../source/core/replica-set-architectures.txt:92
#: ../source/core/replica-set-architectures.txt:98
msgid "3"
msgstr ""

#: ../source/core/replica-set-architectures.txt:86
#: ../source/core/replica-set-architectures.txt:100
#: ../source/core/replica-set-architectures.txt:106
msgid "2"
msgstr ""

#: ../source/core/replica-set-architectures.txt:88
#: ../source/core/replica-set-architectures.txt:94
msgid "1"
msgstr ""

#: ../source/core/replica-set-architectures.txt:90
#: ../source/core/replica-set-architectures.txt:104
msgid "4"
msgstr ""

#: ../source/core/replica-set-architectures.txt:96
msgid "5"
msgstr ""

#: ../source/core/replica-set-architectures.txt:102
msgid "6"
msgstr ""

#: ../source/core/replica-set-architectures.txt:108
msgid "Adding a member to the replica set does not *always* increase the fault tolerance. However, in these cases, additional members can provide support for dedicated functions, such as backups or reporting."
msgstr ""

#: ../source/core/replica-set-architectures.txt:113
msgid "Use Hidden and Delayed Members for Dedicated Functions"
msgstr ""

#: ../source/core/replica-set-architectures.txt:115
msgid "Add :ref:`hidden <replica-set-hidden-members>` or :ref:`delayed <replica-set-delayed-members>` members to support dedicated functions, such as backup or reporting."
msgstr ""

#: ../source/core/replica-set-architectures.txt:120
msgid "Load Balance on Read-Heavy Deployments"
msgstr ""

#: ../source/core/replica-set-architectures.txt:122
msgid "In a deployment with *very* high read traffic, you can improve read throughput by distributing reads to secondary members. As your deployment grows, add or move members to alternate data centers to improve redundancy and availability."
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:3
#: ../source/includes/note-csrs-distribution.rst:3
msgid "Distributing replica set members across two data centers provides benefit over a single data center. In a two data center distribution,"
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:7
#: ../source/includes/note-csrs-distribution.rst:7
msgid "If one of the data centers goes down, the data is still available for reads unlike a single data center distribution."
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:10
#: ../source/includes/note-csrs-distribution.rst:10
msgid "If the data center with a minority of the members goes down, the replica set can still serve write operations as well as read operations."
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:14
#: ../source/includes/note-csrs-distribution.rst:14
msgid "However, if the data center with the majority of the members goes down, the replica set becomes read-only."
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:17
#: ../source/includes/note-csrs-distribution.rst:17
msgid "If possible, distribute members across at least three data centers. For config server replica sets (CSRS), the best practice is to distribute across three (or more depending on the number of members) centers. If the cost of the third data center is prohibitive, one distribution possibility is to evenly distribute the data bearing members across the two data centers and store the remaining member (either a data bearing member or an arbiter to ensure odd number of members) in the cloud if your company policy allows."
msgstr ""

#: ../source/core/replica-set-architectures.txt:129
msgid "Always ensure that the main facility is able to elect a primary."
msgstr ""

#: ../source/core/replica-set-architectures.txt:132
msgid "Add Capacity Ahead of Demand"
msgstr ""

#: ../source/core/replica-set-architectures.txt:134
msgid "The existing members of a replica set must have spare capacity to support adding a new member. Always add new members before the current demand saturates the capacity of the set."
msgstr ""

#: ../source/core/replica-set-architectures.txt:141
msgid "Distribute Members Geographically"
msgstr ""

#: ../source/core/replica-set-architectures.txt:143
msgid "To protect your data in case of a data center failure, keep at least one member in an alternate data center. If possible, use an odd number of data centers, and choose a distribution of members that maximizes the likelihood that even with a loss of a data center, the remaining replica set members can form a majority or at minimum, provide a copy of your data."
msgstr ""

#: ../source/core/replica-set-architectures.txt:153
msgid "To ensure that the members in your main data center be elected primary before the members in the alternate data center, set the :rsconf:`members[n].priority` of the members in the alternate data center to be lower than that of the members in the primary data center."
msgstr ""

#: ../source/core/replica-set-architectures.txt:158
msgid "For more information, see :doc:`/core/replica-set-architecture-geographically-distributed`"
msgstr ""

#: ../source/core/replica-set-architectures.txt:162
msgid "Target Operations with Tag Sets"
msgstr ""

#: ../source/core/replica-set-architectures.txt:164
msgid "Use :ref:`replica set tag sets <replica-set-configuration-tag-sets>` to target read operations to specific members or to customize write concern to request acknowledgement from specific members."
msgstr ""

#: ../source/core/replica-set-architectures.txt:168
msgid ":doc:`/data-center-awareness` and :doc:`/core/workload-isolation`."
msgstr ""

#: ../source/core/replica-set-architectures.txt:172
msgid "Use Journaling to Protect Against Power Failures"
msgstr ""

#: ../source/core/replica-set-architectures.txt:174
msgid "MongoDB enables :doc:`journaling </core/journaling>` by default. Journaling protects against data loss in the event of service interruptions, such as power failures and unexpected reboots."
msgstr ""

#: ../source/core/replica-set-architectures.txt:179
msgid "Hostnames"
msgstr ""

#: ../source/includes/tip-hostnames.rst:3
msgid "When possible, use a logical DNS hostname instead of an ip address, particularly when configuring replica set members or sharded cluster members. The use of logical DNS hostnames avoids configuration changes due to ip address changes."
msgstr ""

#: ../source/core/replica-set-architectures.txt:184
msgid "Replica Set Naming"
msgstr ""

#: ../source/includes/fact-unique-replica-set-names.rst:1
msgid "If your application connects to more than one replica set, each set should have a distinct name. Some drivers group replica set connections by replica set name."
msgstr ""

#: ../source/core/replica-set-architectures.txt:189
msgid "Deployment Patterns"
msgstr ""

#: ../source/core/replica-set-architectures.txt:191
msgid "The following documents describe common replica set deployment patterns. Other patterns are possible and effective depending on the application's requirements. If needed, combine features of each architecture in your own deployment:"
msgstr ""

#: ../source/includes/toc/dfn-list-replica-set-architectures.rst:5
msgid ":doc:`/core/replica-set-architecture-three-members`"
msgstr ""

#: ../source/includes/toc/dfn-list-replica-set-architectures.rst:4
msgid "Three-member replica sets provide the minimum recommended architecture for a replica set."
msgstr ""

#: ../source/includes/toc/dfn-list-replica-set-architectures.rst:9
msgid ":doc:`/core/replica-set-architecture-geographically-distributed`"
msgstr ""

#: ../source/includes/toc/dfn-list-replica-set-architectures.rst:8
msgid "Geographically distributed sets include members in multiple locations to protect against facility-specific failures, such as power outages."
msgstr ""

