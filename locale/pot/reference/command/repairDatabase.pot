# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:02-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/command/repairDatabase.txt:3
msgid "repairDatabase"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:14
msgid "Definition"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:18
msgid "Rebuilds the database and indexes by discarding invalid or corrupt data that may be present due to an unexpected system restart or shutdown. :dbcommand:`repairDatabase` is analogous to a ``fsck`` command for file systems."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:25
msgid "Before using :dbcommand:`repairDatabase`, make a backup copy of the files in the dbpath directory."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:28
msgid "If you are running with :term:`journaling <journal>` enabled, there is almost never any need to run :dbcommand:`repairDatabase` after an unclean shutdown since the server can use the journal files to restore the data files to a clean state automatically. However, you may need to run :dbcommand:`repairDatabase` in cases where you need to recover from a disk-level data corruption."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:36
msgid "Avoid running :dbcommand:`repairDatabase` against a replica set. If you are trying to repair a :term:`replica set` member, and you have access to an intact copy of your data (e.g. a recent backup or an intact member of the :term:`replica set`), you should restore from that intact copy (see :doc:`/tutorial/resync-replica-set-member`), and **not** use :dbcommand:`repairDatabase`."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:44
msgid "You should only use the :dbcommand:`repairDatabase` command (and related :method:`db.repairDatabase()` method and the :option:`--repair <mongod --repair>` command-line option) if you have no other options. These operations remove and do not save any corrupt data during the repair process."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:50
msgid ":dbcommand:`repairDatabase` takes the following form:"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:56
msgid ":dbcommand:`repairDatabase` has the following fields:"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:7
msgid "Field"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:9
msgid "Type"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:11
msgid "Description"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:13
msgid "``preserveClonedFilesOnFailure``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:15
#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:31
msgid "boolean"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:17
#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:50
msgid "When ``true``, ``repairDatabase`` will not delete temporary files in the backup directory on error, and all new files are created with the \"backup\" instead of \"_tmp\" directory prefix. By default ``repairDatabase`` does not delete temporary files, and uses the \"_tmp\" naming prefix for new files."
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:23
#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:56
msgid "``preserveClonedFilesOnFailure`` is only available with the ``mmapv1`` storage engine."
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:29
msgid "``backupOriginalFiles``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:33
#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:64
msgid "When ``true``, ``repairDatabase`` moves old database files to the backup directory instead of deleting them before moving new files into place. New files are created with the \"backup\" instead of \"_tmp\" directory prefix. By default, ``repairDatabase`` leaves temporary files unchanged, and uses the \"_tmp\" naming prefix for new files."
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:39
#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:70
msgid "``backupOriginalFiles`` is only available with the ``mmapv1`` storage engine."
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:0
msgid "field boolean preserveClonedFilesOnFailure"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:0
msgid "field boolean backupOriginalFiles"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:60
msgid "You can explicitly set the MMAPv1 options as follows:"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:71
msgid "``repairDatabase`` Operations"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:73
msgid "In addition to the :dbcommand:`repairDatabase` command, the :binary:`~bin.mongo` shell provides :method:`db.repairDatabase()` as a wrapper around the :dbcommand:`repairDatabase` command. For more information on the method, see :method:`db.repairDatabase()`."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:78
msgid "MongoDB also provides the option to run :option:`mongod --repair` directly from the command line to repair all databases for the :binary:`~bin.mongod`. Starting in MongoDB 4.0.3, :option:`mongod --repair` performs a more extensive repair operation than the :dbcommand:`repairDatabase` command. For more information on running :option:`mongod --repair`, see :option:`--repair <mongod --repair>`."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:86
msgid "Behavior"
msgstr ""

#: ../source/includes/warning-blocking-global.rst:3
msgid "This command obtains a global write lock and will block other operations until it has completed."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:90
msgid "The time requirement for :dbcommand:`repairDatabase` depends on the size of the data set."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:93
msgid ":dbcommand:`repairDatabase` recreates all indexes in the database."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:96
msgid "MMAPv1"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:98
msgid ":dbcommand:`repairDatabase` requires free disk space equal to the size of your current data set plus 2 gigabytes. If the volume that holds dbpath lacks sufficient space, you can mount a separate volume and use that for the repair. When mounting a separate volume for :dbcommand:`repairDatabase` you must run :dbcommand:`repairDatabase` from the command line and use the :option:`--repairpath <mongod --repairpath>` switch to specify the folder in which to store temporary repair files. For example:"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:112
msgid "See :option:`--repairpath <mongod --repairpath>` for more information."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:115
msgid "WiredTiger"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:117
msgid ":dbcommand:`repairDatabase` performs the operation in-place and does not require additional disk space."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:122
msgid "``repairDatabase`` and ``compact``"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:124
msgid "The :dbcommand:`repairDatabase` command rebuilds the database, which for MMAPv1, has a secondary effect of compacting all the collections."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:127
msgid "For WiredTiger, the operation rebuilds the database but does **not** result in the compaction of the collections in the database."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:131
msgid ":dbcommand:`compact`"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:134
msgid "Example"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:138
msgid "If you are trying to repair a :term:`replica set` member, and you have access to an intact copy of your data (e.g. a recent backup or an intact member of the :term:`replica set`), see :doc:`/tutorial/resync-replica-set-member` instead."
msgstr ""

#: ../source/includes/note-repair.rst:1
msgid "If you are running with :term:`journaling <journal>` enabled, there is almost never any need to run repair since the server can use the journal files to restore the data files to a clean state automatically. However, you may need to run repair in cases where you need to recover from a disk-level data corruption."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:145
msgid "Use :dbcommand:`repairDatabase` if you have no other option."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:147
msgid "Before using :dbcommand:`repairDatabase`, make a backup copy of the data files in the dbpath."
msgstr ""

