# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 23:38-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/sharding-high-availability-writes.txt:3
msgid "Distributed Local Writes for Insert Only Workloads"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:13
msgid "MongoDB Tag Aware Sharding allows administrators to control data distribution in a sharded cluster by defining ranges of the :term:`shard key` and tagging them to one or more shards."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:17
msgid "This tutorial uses :ref:`zone-sharding` along with a multi-datacenter sharded cluster deployment and application-side logic to support distributed local writes, as well as high write availability in the event of a replica set election or datacenter failure."
msgstr ""

#: ../source/includes/extracts/zoned-sharding-pre-define-zone.rst:2
msgid "By defining the zones and the zone ranges *before* sharding an empty or a non-existing collection, the shard collection operation creates chunks for the defined zone ranges as well as any additional chunks to cover the entire range of the shard key values and performs an initial chunk distribution based on the zone ranges. This initial creation and distribution of chunks allows for faster setup of zoned sharding. After the initial distribution, the balancer manages the chunk distribution going forward."
msgstr ""

#: ../source/includes/extracts/zoned-sharding-pre-define-zone.rst:11
msgid "See :ref:`pre-define-zone-range-example` for an example."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:30
msgid "The concepts discussed in this tutorial require a specific deployment architecture, as well as application-level logic."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:33
msgid "These concepts require familiarity with MongoDB :term:`sharded clusters <sharded cluster>`, :term:`replica sets <replica set>`, and the general behavior of :ref:`zones <zone-sharding>`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:37
msgid "This tutorial assumes an insert-only or insert-intensive workload. The concepts and strategies discussed in this tutorial are not well suited for use cases that require fast reads or updates."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:42
msgid "Scenario"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:44
msgid "Consider an insert-intensive application, where reads are infrequent and low priority compared to writes. The application writes documents to a sharded collection, and requires near-constant uptime from the database to support its SLAs or SLOs."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:49
msgid "The following represents a partial view of the format of documents the application writes to the database:"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:77
msgid "Shard Key"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:79
msgid "The collection uses the ``{ datacenter : 1, userid : 1 }`` compound index as the :term:`shard key`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:84
msgid "The ``datacenter`` field in each document allows for creating a tag range on each distinct datacenter value. Without the ``datacenter`` field, it would not be possible to associate a document with a specific datacenter."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:88
msgid "The ``userid`` field provides a high :ref:`cardinality <shard-key-cardinality>` and low :ref:`frequency <shard-key-frequency>` component to the shard key relative to ``datacenter``."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:92
msgid "See :ref:`Choosing a Shard Key <sharding-shard-key-requirements>` for more general instructions on selecting a shard key."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:96
msgid "Architecture"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:98
msgid "The deployment consists of two datacenters, ``alfa`` and ``bravo``. There are two shards, ``shard0000`` and ``shard0001``. Each shard is a :term:`replica set` with three members. ``shard0000`` has two members on ``alfa`` and one :ref:`priority 0 member <replica-set-secondary-only-members>` on ``bravo``. ``shard0001`` has two members on ``bravo`` and one :ref:`priority 0 member <replica-set-secondary-only-members>` on ``alfa``."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:110
msgid "Tags"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:112
msgid "This application requires one tag per datacenter. Each shard has one tag assigned to it based on the datacenter containing the majority of its replica set members. There are two tag ranges, one for each datacenter."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:123
msgid "``alfa`` Datacenter"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:117
msgid "Tag shards with a majority of members on this datacenter as ``alfa``."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:119
#: ../source/tutorial/sharding-high-availability-writes.txt:128
msgid "Create a tag range with:"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:121
msgid "a lower bound of ``{ \"datacenter\" : \"alfa\", \"userid\" : MinKey }``,"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:122
msgid "an upper bound of ``{ \"datacenter\" : \"alfa\", \"userid\" : MaxKey }``, and"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:123
msgid "the tag ``alfa``"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:132
msgid "``bravo`` Datacenter"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:126
msgid "Tag shards with a majority of members on this datacenter as ``bravo``."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:130
msgid "a lower bound of ``{ \"datacenter\" : \"bravo\", \"userid\" : MinKey }``,"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:131
msgid "an upper bound of ``{ \"datacenter\" : \"bravo\", \"userid\" : MaxKey }``, and"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:132
msgid "the tag ``bravo``"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:136
msgid "The :bsontype:`MinKey` and :bsontype:`MaxKey` values are reserved special values for comparisons"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:139
msgid "Based on the configured tags and tag ranges, :binary:`~bin.mongos` routes documents with ``datacenter : alfa`` to the ``alfa`` datacenter, and documents with ``datacenter : bravo`` to the ``bravo`` datacenter."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:145
msgid "Write Operations"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:147
msgid "If an inserted or updated document matches a configured tag range, it can only be written to a shard with the related tag."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:150
msgid "MongoDB can write documents that do not match a configured tag range to any shard in the cluster."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:155
msgid "The behavior described above requires the cluster to be in a steady state with no chunks violating a configured tag range. See the following section on the :ref:`balancer <sharding-high-availability-writes-balancing>` for more information."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:163
msgid "Balancer"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:165
msgid "The :ref:`balancer <sharding-balancing>` :ref:`migrates <sharding-chunk-migration>` the tagged chunks to the appropriate shard. Until the migration, shards may contain chunks that violate configured tag ranges and tags. Once balancing completes, shards should only contain chunks whose ranges do not violate its assigned tags and tag ranges."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:171
msgid "Adding or removing tags or tag ranges can result in chunk migrations. Depending on the size of your data set and the number of chunks a tag range affects, these migrations may impact cluster performance. Consider running your :ref:`balancer <sharding-balancing>` during specific scheduled windows. See :ref:`sharding-schedule-balancing-window` for a tutorial on how to set a scheduling window."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:182
msgid "Application Behavior"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:184
msgid "By default, the application writes to the nearest datacenter. If the local datacenter is down, or if writes to that datacenter are not acknowledged within a set time period, the application switches to the other available datacenter by changing the value of the ``datacenter`` field before attempting to write the document to the database."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:190
msgid "The application supports write timeouts. The application uses :ref:`write-concern` to set a :ref:`timeout <wc-wtimeout>` for each write operation."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:194
msgid "If the application encounters a write or timeout error, it modifies the ``datacenter`` field in each document and performs the write. This routes the document to the other datacenter. If both datacenters are down, then writes cannot succeed. See :ref:`sharding-high-availability-write-failure`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:199
msgid "The application periodically checks connectivity to any data centers marked as \"down\". If connectivity is restored, the application can continue performing normal write operations."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:203
msgid "Given the switching logic, as well as any load balancers or similar mechanisms in place to handle client traffic between datacenters, the application cannot predict which of the two datacenters a given document was written to. To ensure that no documents are missed as a part of read operations, the application *must* perform :ref:`broadcast queries <sharding-mongos-broadcast>` by *not* including the ``datacenter`` field as a part of any query."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:211
msgid "The application performs reads using a :ref:`read preference <read-preference>` of :readmode:`nearest` to reduce latency."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:214
msgid "It is possible for a write operation to succeed despite a reported timeout error. The application responds to the error by attempting to re-write the document to the other datacenter - this can result in a document being duplicated across both datacenters. The application resolves duplicates as a part of the :ref:`read <sharding-high-availability-writes-read-resolution>` logic."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:222
msgid "Switching Logic"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:224
msgid "The application has logic to switch datacenters if one or more writes fail, or if writes are not :ref:`acknowledged <write-concern>` within a set time period. The application modifies the ``datacenter`` field based on the target datacenter's :ref:`tag <sharding-high-availability-tags>` to direct the document towards that datacenter."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:230
msgid "For example, an application attempting to write to the ``alfa`` datacenter might follow this general procedure:"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:233
msgid "Attempt to write document, specifying ``datacenter : alfa``."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:234
msgid "On write timeout or error, log ``alfa`` as momentarily down."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:235
msgid "Attempt to write same document, modifying ``datacenter : bravo``."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:236
msgid "On write timeout or error, log ``bravo`` as momentarily down."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:237
msgid "If both ``alfa`` and ``bravo`` are down, log and report errors."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:239
msgid "See :ref:`sharding-high-availability-write-failure`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:242
msgid "Procedure"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:247
msgid "Configure Shard Tags"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:249
msgid "You must be connected to a :binary:`~bin.mongos` associated with the target :term:`sharded cluster` in order to proceed. You cannot create tags by connecting directly to a :term:`shard` replica set member."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:8
msgid "Tag each shard."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:10
#: ../source/includes/steps/sharding-high-availability.rst:39
msgid "Tag each shard in the ``alfa`` data center with the ``alfa`` tag."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:18
#: ../source/includes/steps/sharding-high-availability.rst:47
msgid "Tag each shard in the ``bravo`` data center with the ``bravo`` tag."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:26
#: ../source/includes/steps/sharding-high-availability.rst:55
msgid "You can review the tags assigned to any given shard by running :method:`sh.status()`."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:37
msgid "Step 1: Tag each shard."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:66
msgid "Define ranges for each tag."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:68
#: ../source/includes/steps/sharding-high-availability.rst:129
msgid "Define the range for the ``alfa`` database and associate it to the ``alfa`` tag using the :method:`sh.addTagRange()` method. This method requires:"
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:71
#: ../source/includes/steps/sharding-high-availability.rst:94
#: ../source/includes/steps/sharding-high-availability.rst:132
#: ../source/includes/steps/sharding-high-availability.rst:155
msgid "The full namespace of the target collection."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:73
#: ../source/includes/steps/sharding-high-availability.rst:96
#: ../source/includes/steps/sharding-high-availability.rst:134
#: ../source/includes/steps/sharding-high-availability.rst:157
msgid "The inclusive lower bound of the range."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:75
#: ../source/includes/steps/sharding-high-availability.rst:98
#: ../source/includes/steps/sharding-high-availability.rst:136
#: ../source/includes/steps/sharding-high-availability.rst:159
msgid "The exclusive upper bound of the range."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:77
#: ../source/includes/steps/sharding-high-availability.rst:100
#: ../source/includes/steps/sharding-high-availability.rst:138
#: ../source/includes/steps/sharding-high-availability.rst:161
msgid "The name of the tag."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:90
#: ../source/includes/steps/sharding-high-availability.rst:151
msgid "Define the range for the ``bravo`` database and associate it to the ``bravo`` tag using the :method:`sh.addTagRange()` method. This method requires:"
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:113
#: ../source/includes/steps/sharding-high-availability.rst:174
msgid "The :bsontype:`MinKey` and :bsontype:`MaxKey` values are reserved special values for comparisons. :bsontype:`MinKey` always compares as less than every other possible value, while :bsontype:`MaxKey` always compares as greater than every other possible value. The configured ranges capture every user for each ``datacenter``."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:127
msgid "Step 2: Define ranges for each tag."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:188
msgid "Review the changes."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:190
#: ../source/includes/steps/sharding-high-availability.rst:211
msgid "The next time the :ref:`balancer <sharding-balancing>` runs, it :ref:`splits <sharding-chunk-split>` and :ref:`migrates <sharding-chunk-migration>` chunks across the shards respecting the tag ranges and tags."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:195
#: ../source/includes/steps/sharding-high-availability.rst:216
msgid "Once balancing finishes, the shards tagged as ``alfa`` should only contain documents with ``datacenter : alfa``, while shards tagged as ``bravo`` should only contain documents with ``datacenter : bravo``."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:199
#: ../source/includes/steps/sharding-high-availability.rst:220
msgid "You can review the chunk distribution by running :method:`sh.status()`."
msgstr ""

#: ../source/includes/steps/sharding-high-availability.rst:209
msgid "Step 3: Review the changes."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:258
msgid "Resolve Write Failure"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:260
msgid "When the application's default datacenter is down or inaccessible, the application changes the ``datacenter`` field to the other datacenter."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:264
msgid "For example, the application attempts to write the following document to the ``alfa`` datacenter by default:"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:277
msgid "If the application receives an error on attempted write, or if the write acknowledgement takes too long, the application logs the datacenter as unavailable and alters the ``datacenter`` field to point to the ``bravo`` datacenter."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:292
msgid "The application periodically checks the ``alfa`` datacenter for connectivity. If the datacenter is reachable again, the application can resume normal writes."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:298
msgid "It is possible that the original write to ``datacenter : alfa`` succeeded, especially if the error was related to a :ref:`timeout <wc-wtimeout>`. If so, the document with ``message_id : 329620`` may now be duplicated across both datacenters. Applications must resolve duplicates as a part of :ref:`read operations <sharding-high-availability-writes-read-resolution>`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:308
msgid "Resolve Duplicate Documents on Reads"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:310
msgid "The application's switching logic allows for potential document duplication. When performing reads, the application resolves any duplicate documents on the application layer."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:314
msgid "The following query searches for documents where the ``userid`` is ``123``. Note that while ``userid`` is part of the shard key, the query does not include the ``datacenter`` field, and therefore does not perform a :ref:`targeted read operation <sharding-mongos-targeted>`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:323
msgid "The results show that the document with ``message_id`` of ``329620`` has been inserted into MongoDB twice, probably as a result of a delayed write acknowledgement."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:344
msgid "The application can either ignore the duplicates, taking one of the two documents, or it can attempt to trim the duplicates until only a single document remains."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:348
msgid "One method for trimming duplicates is to use the :method:`ObjectId.getTimestamp()` method to extract the timestamp from the ``_id`` field. The application can then keep either the first document inserted, or the last document inserted. This assumes the ``_id`` field uses the MongoDB :method:`ObjectId`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:354
msgid "For example, using :method:`~ObjectId.getTimestamp()` on the document with ``ObjectId(\"56f08c447fe58b2e96f595fa\")`` returns:"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:361
msgid "Using :method:`~ObjectId.getTimestamp()` on the document with ``ObjectId(\"56f08c457fe58b2e96f595fb\")`` returns:"
msgstr ""

