# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:02-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/model-data-for-atomic-operations.txt:5
msgid "Model Data for Atomic Operations"
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:15
msgid "Although MongoDB supports :doc:`multi-document transactions </core/transactions>` starting in version 4.0, for many scenarios, the denormalized data model, as discussed on this page, will continue to be optimal for your data and use cases."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:21
msgid "Pattern"
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:23
msgid "In MongoDB, a write operation on a single document is atomic. For fields that must be updated together, embedding the fields within the same document ensures that the fields can be updated atomically."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:27
msgid "For example, consider a situation where you need to maintain information on books, including the number of copies available for checkout as well as the current checkout information."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:31
msgid "The available copies of the book and the checkout information should be in sync. As such, embedding the ``available`` field and the ``checkout`` field within the same document ensures that you can update the two fields atomically."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:51
msgid "Then to update with new checkout information, you can use the :method:`db.collection.updateOne()` method to atomically update both the ``available`` field and the ``checkout`` field:"
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:65
msgid "The operation returns a document that contains information on the status of the operation:"
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:72
msgid "The ``matchedCount`` field shows that ``1`` document matched the update condition, and ``modifiedCount`` shows that the operation updated ``1`` document."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:76
msgid "If no document matched the update condition, then ``matchedCount`` and ``modifiedCount`` would be ``0`` and would indicate that you could not check out the book."
msgstr ""

