# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/storage.txt:3
msgid "FAQ: MongoDB Storage"
msgstr ""

#: ../source/faq/storage.txt:7
msgid ""
"This document addresses common questions regarding MongoDB's storage system."
msgstr ""

#: ../source/faq/storage.txt:10
msgid ""
"If you don't find the answer you're looking for, check the :doc:`complete "
"list of FAQs </faq>` or post your question to the `MongoDB User Mailing List"
" <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/storage.txt:15
msgid "Storage Engine Fundamentals"
msgstr ""

#: ../source/faq/storage.txt:18
msgid "What is a storage engine?"
msgstr ""

#: ../source/faq/storage.txt:20
msgid ""
"A storage engine is the part of a database that is responsible for managing "
"how data is stored on disk. Many databases support multiple storage engines,"
" where different engines perform better for specific workloads. For example,"
" one storage engine might offer better performance for read-heavy workloads,"
" and another might support a higher-throughput for write operations."
msgstr ""

#: ../source/faq/storage.txt:28
msgid "What will be the default storage engine going forward?"
msgstr ""

#: ../source/faq/storage.txt:30
msgid ""
"MMAPv1 is the default storage engine in 3.0. With multiple storage engines, "
"you can decide which storage engine is best for your application."
msgstr ""

#: ../source/faq/storage.txt:35
msgid "Can you mix storage engines in a replica set?"
msgstr ""

#: ../source/faq/storage.txt:37
msgid ""
"Yes. You can have a replica set members that use different storage engines."
msgstr ""

#: ../source/faq/storage.txt:40
msgid ""
"When designing these multi-storage engine deployments consider the "
"following:"
msgstr ""

#: ../source/faq/storage.txt:43
msgid ""
"the oplog on each member may need to be sized differently to account for "
"differences in throughput between different storage engines."
msgstr ""

#: ../source/faq/storage.txt:46
msgid ""
"recovery from backups may become more complex if your backup captures data "
"files from MongoDB: you may need to maintain backups for each storage "
"engine."
msgstr ""

#: ../source/faq/storage.txt:51
msgid "WiredTiger Storage Engine"
msgstr ""

#: ../source/faq/storage.txt:54
msgid "Can I upgrade an existing deployment to a WiredTiger?"
msgstr ""

#: ../source/faq/storage.txt:56
msgid ""
"Yes. You can upgrade an existing deployment to WiredTiger while the "
"deployment remains available by adding replica set members with the new "
"storage engine and then removing members with the legacy storage engine. See"
" the following sections of the :doc:`/release-notes/3.0-upgrade` for the "
"complete procedure that you can use to upgrade an existing deployment:"
msgstr ""

#: ../source/faq/storage.txt:63
msgid ":ref:`3.0-upgrade-repl-set-wiredtiger`"
msgstr ""

#: ../source/faq/storage.txt:65
msgid ":ref:`3.0-upgrade-cluster-wiredtiger`"
msgstr ""

#: ../source/faq/storage.txt:68
msgid "How much compression does WiredTiger provide?"
msgstr ""

#: ../source/faq/storage.txt:70
msgid ""
"The ratio of compressed data to uncompressed data depends on your data and "
"the compression library used. By default, collection data in WiredTiger use "
":term:`Snappy block compression <snappy>`; :term:`zlib` compression is also "
"available. Index data use :term:`prefix compression` by default."
msgstr ""

#: ../source/faq/storage.txt:79
msgid "To what size should I set the WiredTiger cache?"
msgstr ""

#: ../source/faq/storage.txt:81
msgid ""
"The size of the cache should be sufficient to hold the entire working set "
"for the :program:`mongod`. If the cache does not have enough space to load "
"additional data, WiredTiger evicts pages from the cache to free up space."
msgstr ""

#: ../source/faq/storage.txt:86
msgid ""
"To see statistics on the cache and eviction, use the "
":dbcommand:`serverStatus` command. The "
":data:`~serverStatus.wiredTiger.cache` field holds the information on the "
"cache and eviction:"
msgstr ""

#: ../source/faq/storage.txt:131
msgid ""
"To adjust the size of the WiredTiger cache, see "
":setting:`storage.wiredTiger.engineConfig.cacheSizeGB` and "
":option:`--wiredTigerCacheSizeGB`."
msgstr ""

#: ../source/faq/storage.txt:136
msgid "MMAPv1 Storage Engine"
msgstr ""

#: ../source/faq/storage.txt:141
msgid "What are memory mapped files?"
msgstr ""

#: ../source/faq/storage.txt:143
msgid ""
"A memory-mapped file is a file with data that the operating system places in"
" memory by way of the ``mmap()`` system call. ``mmap()`` thus *maps* the "
"file to a region of virtual memory. Memory-mapped files are the critical "
"piece of the MMAPv1 storage engine in MongoDB. By using memory mapped files,"
" MongoDB can treat the contents of its data files as if they were in memory."
" This provides MongoDB with an extremely fast and simple method for "
"accessing and manipulating data."
msgstr ""

#: ../source/faq/storage.txt:152
msgid "How do memory mapped files work?"
msgstr ""

#: ../source/faq/storage.txt:154
msgid ""
"MongoDB uses memory mapped files for managing and interacting with all data."
msgstr ""

#: ../source/faq/storage.txt:157
msgid ""
"Memory mapping assigns files to a block of virtual memory with a direct "
"byte-for-byte correlation. MongoDB memory maps data files to memory as it "
"accesses documents. Unaccessed data is *not* mapped to memory."
msgstr ""

#: ../source/faq/storage.txt:161
msgid ""
"Once mapped, the relationship between file and memory allows MongoDB to "
"interact with the data in the file as if it were memory."
msgstr ""

#: ../source/faq/storage.txt:167
msgid ""
"Why are the files in my data directory larger than the data in my database?"
msgstr ""

#: ../source/faq/storage.txt:169
msgid ""
"The data files in your data directory, which is the :file:`/data/db` "
"directory in default configurations, might be larger than the data set "
"inserted into the database. Consider the following possible causes:"
msgstr ""

#: ../source/faq/storage.txt:174
msgid "Preallocated data files"
msgstr ""

#: ../source/faq/storage.txt:176
msgid ""
"MongoDB preallocates its data files to avoid filesystem fragmentation, and "
"because of this, the size of these files do not necessarily reflect the size"
" of your data."
msgstr ""

#: ../source/faq/storage.txt:180
msgid ""
"The :setting:`storage.mmapv1.smallFiles` option will reduce the size of "
"these files, which may be useful if you have many small databases on disk."
msgstr ""

#: ../source/faq/storage.txt:185
msgid "The ``oplog``"
msgstr ""

#: ../source/faq/storage.txt:187
msgid ""
"If this :program:`mongod` is a member of a replica set, the data directory "
"includes the :term:`oplog.rs <oplog>` file, which is a preallocated "
":term:`capped collection` in the ``local`` database."
msgstr ""

#: ../source/faq/storage.txt:192
msgid ""
"The default allocation is approximately 5% of disk space on 64-bit "
"installations. In most cases, you should not need to resize the oplog. See "
":ref:`Oplog Sizing <replica-set-oplog-sizing>` for more information."
msgstr ""

#: ../source/faq/storage.txt:197
msgid "The ``journal``"
msgstr ""

#: ../source/faq/storage.txt:199
msgid ""
"The data directory contains the journal files, which store write operations "
"on disk before MongoDB applies them to databases. See "
":doc:`/core/journaling`."
msgstr ""

#: ../source/faq/storage.txt:206
msgid "Empty records"
msgstr ""

#: ../source/faq/storage.txt:208
msgid ""
"MongoDB maintains lists of empty records in data files as it deletes "
"documents and collections. MongoDB can reuse this space, but will not, by "
"default, return this space to the operating system."
msgstr ""

#: ../source/faq/storage.txt:212
msgid ""
"To allow MongoDB to more effectively reuse the space, you can de-fragment "
"your data. To de-fragment, use the :dbcommand:`compact` command. The "
":dbcommand:`compact` requires up to 2 gigabytes of extra disk space to run. "
"Do not use :dbcommand:`compact` if you are critically low on disk space. For"
" more information on its behavior and other considerations, see "
":dbcommand:`compact`."
msgstr ""

#: ../source/faq/storage.txt:219
msgid ""
":dbcommand:`compact` only removes fragmentation from MongoDB data files "
"within a collection and does not return any disk space to the operating "
"system. To return disk space to the operating system, see :ref:`faq-reclaim-"
"disk-space`."
msgstr ""

#: ../source/faq/storage.txt:227
msgid "How do I reclaim disk space?"
msgstr ""

#: ../source/faq/storage.txt:229
msgid ""
"The following provides some options to consider when reclaiming disk space."
msgstr ""

#: ../source/faq/storage.txt:234
msgid ""
"You do not need to reclaim disk space for MongoDB to reuse freed space. See "
":ref:`faq-empty-records` for information on reuse of freed space."
msgstr ""

#: ../source/faq/storage.txt:239
msgid "``repairDatabase``"
msgstr ""

#: ../source/faq/storage.txt:241
msgid ""
"You can use :dbcommand:`repairDatabase` on a database to rebuilds the "
"database, de-fragmenting the associated storage in the process."
msgstr ""

#: ../source/faq/storage.txt:244
msgid ""
":dbcommand:`repairDatabase` requires free disk space equal to the size of "
"your current data set plus 2 gigabytes. If the volume that holds dbpath "
"lacks sufficient space, you can mount a separate volume and use that for the"
" repair. For additional information and considerations, see "
":dbcommand:`repairDatabase`."
msgstr ""

#: ../source/faq/storage.txt:252
msgid ""
"Do not use :dbcommand:`repairDatabase` if you are critically low on disk "
"space."
msgstr ""

#: ../source/faq/storage.txt:255
msgid ""
":dbcommand:`repairDatabase` will block all other operations and may take a "
"long time to complete."
msgstr ""

#: ../source/faq/storage.txt:258
msgid ""
"You can only run :dbcommand:`repairDatabase` on a standalone "
":program:`mongod` instance. If the :program:`mongod` instance is a member of"
" a replica set, you will need to take the node out of a replica set and "
"restart it as a standalone in order to run :dbcommand:`repairDatabase`."
msgstr ""

#: ../source/faq/storage.txt:264
msgid ""
"You can also run the :dbcommand:`repairDatabase` operation for all databases"
" on the server by restarting your :program:`mongod` standalone instance with"
" the :option:`--repair` and :option:`--repairpath` options. All databases "
"will on the server will be unavailable during this operation."
msgstr ""

#: ../source/faq/storage.txt:270
msgid "Resync the Member of the Replica Set"
msgstr ""

#: ../source/faq/storage.txt:272
msgid ""
"For a secondary member of a replica set, you can perform a :doc:`resync of "
"the member </tutorial/resync-replica-set-member>` by: stopping the secondary"
" member to resync, deleting all data and subdirectories from the member's "
"data directory, and restarting."
msgstr ""

#: ../source/faq/storage.txt:277
msgid "For details, see :doc:`/tutorial/resync-replica-set-member`."
msgstr ""

#: ../source/faq/storage.txt:282
msgid "What is the working set?"
msgstr ""

#: ../source/faq/storage.txt:284
msgid ""
"Working set represents the total body of data that the application uses in "
"the course of normal operation. Often this is a subset of the total data "
"size, but the specific size of the working set depends on actual moment-to-"
"moment use of the database."
msgstr ""

#: ../source/faq/storage.txt:289
msgid ""
"If you run a query that requires MongoDB to scan every document in a "
"collection, the working set will expand to include every document. Depending"
" on physical memory size, this may cause documents in the working set to "
"\"page out,\" or to be removed from physical memory by the operating system."
" The next time MongoDB needs to access these documents, MongoDB may incur a "
"hard page fault."
msgstr ""

#: ../source/faq/storage.txt:296
msgid ""
"For best performance, the majority of your *active* set should fit in RAM."
msgstr ""

#: ../source/faq/storage.txt:302
msgid "What are page faults?"
msgstr ""

#: ../source/includes/fact-page-fault.rst:1
msgid ""
"With the MMAPv1 storage engine, page faults can occur as MongoDB reads from "
"or writes data to parts of its data files that are not currently located in "
"physical memory. In contrast, operating system page faults happen when "
"physical memory is exhausted and pages of physical memory are swapped to "
"disk."
msgstr ""

#: ../source/faq/storage.txt:306
msgid ""
"If there is free memory, then the operating system can find the page on disk"
" and load it to memory directly. However, if there is no free memory, the "
"operating system must:"
msgstr ""

#: ../source/faq/storage.txt:310
msgid ""
"find a page in memory that is stale or no longer needed, and write the page "
"to disk."
msgstr ""

#: ../source/faq/storage.txt:313
msgid "read the requested page from disk and load it into memory."
msgstr ""

#: ../source/faq/storage.txt:315
msgid ""
"This process, on an active system, can take a long time, particularly in "
"comparison to reading a page that is already in memory."
msgstr ""

#: ../source/faq/storage.txt:319 ../source/faq/storage.txt:331
msgid "See :ref:`administration-monitoring-page-faults` for more information."
msgstr ""

#: ../source/faq/storage.txt:322
msgid "What is the difference between soft and hard page faults?"
msgstr ""

#: ../source/faq/storage.txt:324
msgid ""
":term:`Page faults <page fault>` occur when MongoDB, with the MMAP storage "
"engine, needs access to data that isn't currently in active memory. A "
"\"hard\" page fault refers to situations when MongoDB must access a disk to "
"access the data. A \"soft\" page fault, by contrast, merely moves memory "
"pages from one list to another, such as from an operating system file cache."
msgstr ""

#: ../source/faq/storage.txt:334
msgid "Data Storage Diagnostics"
msgstr ""

#: ../source/faq/storage.txt:337
msgid "How can I check the size of a collection?"
msgstr ""

#: ../source/faq/storage.txt:339
msgid ""
"To view the statistics for a collection, including the data size, use the "
":method:`db.collection.stats()` method from the :program:`mongo` shell. The "
"following example issues :method:`db.collection.stats()` for the ``orders`` "
"collection:"
msgstr ""

#: ../source/faq/storage.txt:348
msgid ""
"MongoDB also provides the following methods to return specific sizes for the"
" collection:"
msgstr ""

#: ../source/faq/storage.txt:351
msgid ""
":method:`db.collection.dataSize()` to return data size in bytes for the "
"collection."
msgstr ""

#: ../source/faq/storage.txt:354
msgid ""
":method:`db.collection.storageSize()` to return allocation size in bytes, "
"including unused space."
msgstr ""

#: ../source/faq/storage.txt:357
msgid ""
":method:`db.collection.totalSize()` to return the data size plus the index "
"size in bytes."
msgstr ""

#: ../source/faq/storage.txt:360
msgid ""
":method:`db.collection.totalIndexSize()` to return the index size in bytes."
msgstr ""

#: ../source/faq/storage.txt:363
msgid "The following script prints the statistics for each database:"
msgstr ""

#: ../source/faq/storage.txt:372
msgid ""
"The following script prints the statistics for each collection in each "
"database:"
msgstr ""

#: ../source/faq/storage.txt:386
msgid "How can I check the size of indexes for a collection?"
msgstr ""

#: ../source/faq/storage.txt:388
msgid ""
"To view the size of the data allocated for an index, use the "
":method:`db.collection.stats()` method and check the "
":data:`~collStats.indexSizes` field in the returned document."
msgstr ""

#: ../source/faq/storage.txt:395
msgid "How can I get information on the storage use of a database?"
msgstr ""

#: ../source/faq/storage.txt:397
msgid ""
"The :method:`db.stats()` method in the :program:`mongo` shell returns the "
"current state of the \"active\" database. For the description of the "
"returned fields, see :ref:`dbStats Output <dbstats-output>`."
msgstr ""
