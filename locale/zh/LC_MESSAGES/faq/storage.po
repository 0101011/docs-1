#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/storage.txt:3
msgid "FAQ: MongoDB Storage"
msgstr ""

#: ../source/faq/storage.txt:13
msgid ""
"This document addresses common questions regarding MongoDB's storage system."
msgstr ""

#: ../source/faq/storage.txt:17
msgid "Storage Engine Fundamentals"
msgstr ""

#: ../source/faq/storage.txt:20
msgid "What is a storage engine?"
msgstr ""

#: ../source/faq/storage.txt:32
msgid "Can you mix storage engines in a replica set?"
msgstr ""

#: ../source/faq/storage.txt:34
msgid ""
"Yes. You can have a replica set members that use different storage engines."
msgstr ""

#: ../source/faq/storage.txt:37
msgid ""
"When designing these multi-storage engine deployments consider the "
"following:"
msgstr ""

#: ../source/faq/storage.txt:40
msgid ""
"the oplog on each member may need to be sized differently to account for "
"differences in throughput between different storage engines."
msgstr ""

#: ../source/faq/storage.txt:43
msgid ""
"recovery from backups may become more complex if your backup captures data "
"files from MongoDB: you may need to maintain backups for each storage "
"engine."
msgstr ""

#: ../source/faq/storage.txt:48
msgid "WiredTiger Storage Engine"
msgstr ""

#: ../source/faq/storage.txt:51
msgid "Can I upgrade an existing deployment to a WiredTiger?"
msgstr ""

#: ../source/faq/storage.txt:62
msgid "How much compression does WiredTiger provide?"
msgstr ""

#: ../source/faq/storage.txt:64
msgid ""
"The ratio of compressed data to uncompressed data depends on your data and "
"the compression library used. By default, collection data in WiredTiger use "
":term:`Snappy block compression <snappy>`; :term:`zlib` compression is also "
"available. Index data use :term:`prefix compression` by default."
msgstr ""

#: ../source/faq/storage.txt:73
msgid "To what size should I set the WiredTiger cache?"
msgstr ""

#: ../source/faq/storage.txt:88
msgid "MMAPv1 Storage Engine"
msgstr ""

#: ../source/faq/storage.txt:93
msgid "What are memory mapped files?"
msgstr ""

#: ../source/faq/storage.txt:95
msgid ""
"A memory-mapped file is a file with data that the operating system places in"
" memory by way of the ``mmap()`` system call. ``mmap()`` thus *maps* the "
"file to a region of virtual memory. Memory-mapped files are the critical "
"piece of the MMAPv1 storage engine in MongoDB. By using memory mapped files,"
" MongoDB can treat the contents of its data files as if they were in memory."
" This provides MongoDB with an extremely fast and simple method for "
"accessing and manipulating data."
msgstr ""

#: ../source/faq/storage.txt:104
msgid "How do memory mapped files work?"
msgstr ""

#: ../source/faq/storage.txt:106
msgid ""
"MongoDB uses memory mapped files for managing and interacting with all data."
msgstr ""

#: ../source/faq/storage.txt:109
msgid ""
"Memory mapping assigns files to a block of virtual memory with a direct "
"byte-for-byte correlation. MongoDB memory maps data files to memory as it "
"accesses documents. Unaccessed data is *not* mapped to memory."
msgstr ""

#: ../source/faq/storage.txt:113
msgid ""
"Once mapped, the relationship between file and memory allows MongoDB to "
"interact with the data in the file as if it were memory."
msgstr ""

#: ../source/faq/storage.txt:124
msgid ""
"Why are the files in my data directory larger than the data in my database?"
msgstr ""

#: ../source/faq/storage.txt:126
msgid ""
"The data files in your data directory, which is the :file:`/data/db` "
"directory in default configurations, might be larger than the data set "
"inserted into the database. Consider the following possible causes:"
msgstr ""

#: ../source/faq/storage.txt:131
msgid "Preallocated data files"
msgstr ""

#: ../source/faq/storage.txt:133
msgid ""
"MongoDB preallocates its data files to avoid filesystem fragmentation, and "
"because of this, the size of these files do not necessarily reflect the size"
" of your data."
msgstr ""

#: ../source/faq/storage.txt:137
msgid ""
"The :setting:`storage.mmapv1.smallFiles` option will reduce the size of "
"these files, which may be useful if you have many small databases on disk."
msgstr ""

#: ../source/faq/storage.txt:142
msgid "The ``oplog``"
msgstr ""

#: ../source/faq/storage.txt:144
msgid ""
"If this :program:`mongod` is a member of a replica set, the data directory "
"includes the :term:`oplog.rs <oplog>` file, which is a preallocated "
":term:`capped collection` in the ``local`` database."
msgstr ""

#: ../source/faq/storage.txt:149
msgid ""
"The default allocation is approximately 5% of disk space on 64-bit "
"installations. In most cases, you should not need to resize the oplog. See "
":ref:`Oplog Sizing <replica-set-oplog-sizing>` for more information."
msgstr ""

#: ../source/faq/storage.txt:154
msgid "The ``journal``"
msgstr ""

#: ../source/faq/storage.txt:156
msgid ""
"The data directory contains the journal files, which store write operations "
"on disk before MongoDB applies them to databases. See "
":doc:`/core/journaling`."
msgstr ""

#: ../source/faq/storage.txt:163
msgid "Empty records"
msgstr ""

#: ../source/faq/storage.txt:165
msgid ""
"MongoDB maintains lists of empty records in data files as it deletes "
"documents and collections. MongoDB can reuse this space, but will not, by "
"default, return this space to the operating system."
msgstr ""

#: ../source/faq/storage.txt:169
msgid ""
"To allow MongoDB to more effectively reuse the space, you can de-fragment "
"your data. To de-fragment, use the :dbcommand:`compact` command. The "
":dbcommand:`compact` requires up to 2 gigabytes of extra disk space to run. "
"Do not use :dbcommand:`compact` if you are critically low on disk space. For"
" more information on its behavior and other considerations, see "
":dbcommand:`compact`."
msgstr ""

#: ../source/faq/storage.txt:176
msgid ""
":dbcommand:`compact` only removes fragmentation from MongoDB data files "
"within a collection and does not return any disk space to the operating "
"system. To return disk space to the operating system, see :ref:`faq-reclaim-"
"disk-space`."
msgstr ""

#: ../source/faq/storage.txt:184
msgid "How do I reclaim disk space?"
msgstr ""

#: ../source/faq/storage.txt:186
msgid ""
"The following provides some options to consider when reclaiming disk space."
msgstr ""

#: ../source/faq/storage.txt:191
msgid ""
"You do not need to reclaim disk space for MongoDB to reuse freed space. See "
":ref:`faq-empty-records` for information on reuse of freed space."
msgstr ""

#: ../source/faq/storage.txt:196
msgid "``repairDatabase``"
msgstr ""

#: ../source/faq/storage.txt:198
msgid ""
"You can use :dbcommand:`repairDatabase` on a database to rebuilds the "
"database, de-fragmenting the associated storage in the process."
msgstr ""

#: ../source/faq/storage.txt:201
msgid ""
":dbcommand:`repairDatabase` requires free disk space equal to the size of "
"your current data set plus 2 gigabytes. If the volume that holds dbpath "
"lacks sufficient space, you can mount a separate volume and use that for the"
" repair. For additional information and considerations, see "
":dbcommand:`repairDatabase`."
msgstr ""

#: ../source/faq/storage.txt:209
msgid ""
"Do not use :dbcommand:`repairDatabase` if you are critically low on disk "
"space."
msgstr ""

#: ../source/faq/storage.txt:212
msgid ""
":dbcommand:`repairDatabase` will block all other operations and may take a "
"long time to complete."
msgstr ""

#: ../source/faq/storage.txt:224
msgid "Resync the Member of the Replica Set"
msgstr ""

#: ../source/faq/storage.txt:226
msgid ""
"For a secondary member of a replica set, you can perform a :doc:`resync of "
"the member </tutorial/resync-replica-set-member>` by: stopping the secondary"
" member to resync, deleting all data and subdirectories from the member's "
"data directory, and restarting."
msgstr ""

#: ../source/faq/storage.txt:231
msgid "For details, see :doc:`/tutorial/resync-replica-set-member`."
msgstr ""

#: ../source/faq/storage.txt:236
msgid "What is the working set?"
msgstr ""

#: ../source/faq/storage.txt:238
msgid ""
"Working set represents the total body of data that the application uses in "
"the course of normal operation. Often this is a subset of the total data "
"size, but the specific size of the working set depends on actual moment-to-"
"moment use of the database."
msgstr ""

#: ../source/faq/storage.txt:243
msgid ""
"If you run a query that requires MongoDB to scan every document in a "
"collection, the working set will expand to include every document. Depending"
" on physical memory size, this may cause documents in the working set to "
"\"page out,\" or to be removed from physical memory by the operating system."
" The next time MongoDB needs to access these documents, MongoDB may incur a "
"hard page fault."
msgstr ""

#: ../source/faq/storage.txt:250
msgid ""
"For best performance, the majority of your *active* set should fit in RAM."
msgstr ""

#: ../source/faq/storage.txt:256
msgid "What are page faults?"
msgstr ""

#: ../source/includes/fact-page-fault.rst:1
msgid ""
"With the MMAPv1 storage engine, page faults can occur as MongoDB reads from "
"or writes data to parts of its data files that are not currently located in "
"physical memory. In contrast, operating system page faults happen when "
"physical memory is exhausted and pages of physical memory are swapped to "
"disk."
msgstr ""

#: ../source/faq/storage.txt:260
msgid ""
"If there is free memory, then the operating system can find the page on disk"
" and load it to memory directly. However, if there is no free memory, the "
"operating system must:"
msgstr ""

#: ../source/faq/storage.txt:264
msgid ""
"find a page in memory that is stale or no longer needed, and write the page "
"to disk."
msgstr ""

#: ../source/faq/storage.txt:267
msgid "read the requested page from disk and load it into memory."
msgstr ""

#: ../source/faq/storage.txt:269
msgid ""
"This process, on an active system, can take a long time, particularly in "
"comparison to reading a page that is already in memory."
msgstr ""

#: ../source/faq/storage.txt:273 ../source/faq/storage.txt:285
msgid "See :ref:`administration-monitoring-page-faults` for more information."
msgstr ""

#: ../source/faq/storage.txt:276
msgid "What is the difference between soft and hard page faults?"
msgstr ""

#: ../source/faq/storage.txt:278
msgid ""
":term:`Page faults <page fault>` occur when MongoDB, with the MMAP storage "
"engine, needs access to data that isn't currently in active memory. A "
"\"hard\" page fault refers to situations when MongoDB must access a disk to "
"access the data. A \"soft\" page fault, by contrast, merely moves memory "
"pages from one list to another, such as from an operating system file cache."
msgstr ""

#: ../source/faq/storage.txt:339
msgid "Data Storage Diagnostics"
msgstr ""

#: ../source/faq/storage.txt:342
msgid "How can I check the size of a collection?"
msgstr ""

#: ../source/faq/storage.txt:344
msgid ""
"To view the statistics for a collection, including the data size, use the "
":method:`db.collection.stats()` method from the :program:`mongo` shell. The "
"following example issues :method:`db.collection.stats()` for the ``orders`` "
"collection:"
msgstr ""

#: ../source/faq/storage.txt:353
msgid ""
"MongoDB also provides the following methods to return specific sizes for the"
" collection:"
msgstr ""

#: ../source/faq/storage.txt:356
msgid ""
":method:`db.collection.dataSize()` to return data size in bytes for the "
"collection."
msgstr ""

#: ../source/faq/storage.txt:359
msgid ""
":method:`db.collection.storageSize()` to return allocation size in bytes, "
"including unused space."
msgstr ""

#: ../source/faq/storage.txt:362
msgid ""
":method:`db.collection.totalSize()` to return the data size plus the index "
"size in bytes."
msgstr ""

#: ../source/faq/storage.txt:365
msgid ""
":method:`db.collection.totalIndexSize()` to return the index size in bytes."
msgstr ""

#: ../source/faq/storage.txt:368
msgid "The following script prints the statistics for each database:"
msgstr ""

#: ../source/faq/storage.txt:377
msgid ""
"The following script prints the statistics for each collection in each "
"database:"
msgstr ""

#: ../source/faq/storage.txt:391
msgid "How can I check the size of indexes for a collection?"
msgstr ""

#: ../source/faq/storage.txt:393
msgid ""
"To view the size of the data allocated for an index, use the "
":method:`db.collection.stats()` method and check the "
":data:`~collStats.indexSizes` field in the returned document."
msgstr ""

#: ../source/faq/storage.txt:400
msgid "How can I get information on the storage use of a database?"
msgstr ""

#: ../source/faq/storage.txt:402
msgid ""
"The :method:`db.stats()` method in the :program:`mongo` shell returns the "
"current state of the \"active\" database. For the description of the "
"returned fields, see :ref:`dbStats Output <dbstats-output>`."
msgstr ""

#: ../source/faq/storage.txt:0
msgid "On this page"
msgstr ""

#: ../source/faq/storage.txt:22
msgid ""
"A storage engine is the part of a database that is responsible for managing "
"how data is stored, both in memory and on disk. Many databases support "
"multiple storage engines, where different engines perform better for "
"specific workloads. For example, one storage engine might offer better "
"performance for read-heavy workloads, and another might support a higher-"
"throughput for write operations."
msgstr ""

#: ../source/faq/storage.txt:29
msgid ":doc:`/core/storage-engines`"
msgstr ""

#: ../source/faq/storage.txt:53
msgid "Yes. See:"
msgstr ""

#: ../source/faq/storage.txt:55
msgid ":doc:`/tutorial/change-standalone-wiredtiger`"
msgstr ""

#: ../source/faq/storage.txt:57
msgid ":doc:`/tutorial/change-replica-set-wiredtiger`"
msgstr ""

#: ../source/faq/storage.txt:59
msgid ":doc:`/tutorial/change-sharded-cluster-wiredtiger`"
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:1
msgid ""
"With WiredTiger, MongoDB utilizes both the WiredTiger cache and the "
"filesystem cache."
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:6
msgid ""
"Starting in MongoDB 3.2, the WiredTiger cache, by default, will use the "
"larger of either:"
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:9
msgid "60% of RAM minus 1 GB, or"
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:11
msgid "1 GB."
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:13
msgid ""
"For systems with up to 10 GB of RAM, the new default setting is less than or"
" equal to the 3.0 default setting (For MongoDB 3.0, the WiredTiger cache "
"uses either 1 GB or half of the installed physical RAM, whichever is "
"larger)."
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:18
msgid ""
"For systems with more than 10 GB of RAM, the new default setting is greater "
"than the 3.0 setting."
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:21
msgid ""
"Via the filesystem cache, MongoDB automatically uses all free memory that is"
" not used by the WiredTiger cache or by other processes. Data in the "
"filesystem cache is compressed."
msgstr ""

#: ../source/includes/extracts/wt-cache-setting.rst:1
msgid ""
"To adjust the size of the WiredTiger cache, see "
":setting:`storage.wiredTiger.engineConfig.cacheSizeGB` and "
":option:`--wiredTigerCacheSizeGB`. Avoid increasing the WiredTiger cache "
"size above its default value."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:3
msgid ""
"The :setting:`storage.wiredTiger.engineConfig.cacheSizeGB` only limits the "
"size of the WiredTiger cache, not the total amount of memory used by "
":program:`mongod`. The WiredTiger cache is only one component of the RAM "
"used by MongoDB. MongoDB also automatically uses all free memory on the "
"machine via the filesystem cache (data in the filesystem cache is "
"compressed)."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:10
msgid ""
"In addition, the operating system will use any free RAM to buffer filesystem"
" blocks."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:13
msgid ""
"To accommodate the additional consumers of RAM, you may have to decrease "
"WiredTiger cache size."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:16
msgid ""
"The default WiredTiger cache size value assumes that there is a single "
":program:`mongod` instance per machine. If a single machine contains "
"multiple MongoDB instances, then you should decrease the setting to "
"accommodate the other :program:`mongod` instances."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:22
msgid ""
"If you run :program:`mongod` in a container (e.g. ``lxc``, ``cgroups``, "
"Docker, etc.) that does *not* have access to all of the RAM available in a "
"system, you must set :setting:`storage.wiredTiger.engineConfig.cacheSizeGB` "
"to a value less than the amount of RAM available in the container. The exact"
" amount depends on the other processes running in the container."
msgstr ""

#: ../source/includes/extracts/wt-configure-cache.rst:7
msgid ""
"To view statistics on the cache and eviction rate, see the "
":serverstatus:`wiredTiger.cache` field returned from the "
":dbcommand:`serverStatus` command."
msgstr ""

#: ../source/faq/storage.txt:78
msgid "How frequently does WiredTiger write to disk?"
msgstr ""

#: ../source/includes/extracts/wt-snapshot-frequency.rst:1
msgid ""
"MongoDB configures WiredTiger to create checkpoints (i.e. write the snapshot"
" data to disk) at intervals of 60 seconds or 2 gigabytes of journal data."
msgstr ""

#: ../source/faq/storage.txt:82
msgid ""
"For journal data, MongoDB writes to disk according to the following "
"intervals or condition:"
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:1
msgid "Every 50 milliseconds."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:4
msgid ""
"MongoDB sets checkpoints to occur in WiredTiger on user data at an interval "
"of 60 seconds or when 2 GB of journal data has been written, whichever "
"occurs first."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:8
msgid ""
"If the write operation includes a write concern of :writeconcern:`j: true "
"<j>`, WiredTiger forces a sync of the WiredTiger journal files."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:11
msgid ""
"Because MongoDB uses a journal file size limit of 100 MB, WiredTiger creates"
" a new journal file approximately every 100 MB of data. When WiredTiger "
"creates a new journal file, WiredTiger syncs the previous journal file."
msgstr ""

#: ../source/faq/storage.txt:117
msgid "How frequently does MMAPv1 write to disk?"
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:1
msgid ""
"In the default configuration for the :doc:`MMAPv1 storage engine "
"</core/mmapv1>`, MongoDB writes to the data files on disk every 60 seconds "
"and writes to the :term:`journal` files roughly every 100 milliseconds."
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:6
msgid ""
"To change the interval for writing to the data files, use the "
":setting:`storage.syncPeriodSecs` setting. For the journal files, see "
":setting:`storage.journal.commitIntervalMs` setting."
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:10
msgid ""
"These values represent the *maximum* amount of time between the completion "
"of a write operation and when MongoDB writes to the data files or to the "
"journal files. In many cases MongoDB and the operating system flush data to "
"disk more frequently, so that the above values represents a theoretical "
"maximum."
msgstr ""

#: ../source/faq/storage.txt:215
msgid ""
"You can only run :dbcommand:`repairDatabase` on a standalone "
":program:`mongod` instance."
msgstr ""

#: ../source/faq/storage.txt:218
msgid ""
"You can also run the :dbcommand:`repairDatabase` operation for all databases"
" on the server by restarting your :program:`mongod` standalone instance with"
" the :option:`--repair` and :option:`--repairpath` options. All databases on"
" the server will be unavailable during this operation."
msgstr ""

#: ../source/faq/storage.txt:292
msgid "Can I manually pad documents to prevent moves during updates?"
msgstr ""

#: ../source/faq/storage.txt:296
msgid ""
"With the :doc:`MMAPv1 storage engine </core/mmapv1>`, an update can cause a "
"document to move on disk if the document grows in size. To *minimize* "
"document movements, MongoDB uses :term:`padding`."
msgstr ""

#: ../source/faq/storage.txt:300
msgid ""
"You should not have to pad manually because by default, MongoDB uses :ref"
":`power-of-2-allocation` to add :ref:`padding automatically <record-"
"allocation-strategies>`. The :ref:`power-of-2-allocation` ensures that "
"MongoDB allocates document space in sizes that are powers of 2, which helps "
"ensure that MongoDB can efficiently reuse free space created by document "
"deletion or relocation as well as reduce the occurrences of reallocations in"
" many cases."
msgstr ""

#: ../source/faq/storage.txt:308
msgid ""
"However, *if you must* pad a document manually, you can add a temporary "
"field to the document and then :update:`$unset` the field, as in the "
"following example."
msgstr ""

#: ../source/faq/storage.txt:312
msgid ""
"Do not manually pad documents in a capped collection. Applying manual "
"padding to a document in a capped collection can break replication. Also, "
"the padding is not preserved if you re-sync the MongoDB instance."
msgstr ""

#: ../source/faq/storage.txt:336
msgid ":ref:`record-allocation-strategies`"
msgstr ""

#~ msgid ""
#~ "If you don't find the answer you're looking for, check the :doc:`complete "
#~ "list of FAQs </faq>` or post your question to the `MongoDB User Mailing List"
#~ " <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
#~ msgstr ""

#~ msgid ""
#~ "A storage engine is the part of a database that is responsible for managing "
#~ "how data is stored on disk. Many databases support multiple storage engines,"
#~ " where different engines perform better for specific workloads. For example,"
#~ " one storage engine might offer better performance for read-heavy workloads,"
#~ " and another might support a higher-throughput for write operations."
#~ msgstr ""

#~ msgid "What will be the default storage engine going forward?"
#~ msgstr ""

#~ msgid ""
#~ "MMAPv1 is the default storage engine in 3.0. With multiple storage engines, "
#~ "you can decide which storage engine is best for your application."
#~ msgstr ""

#~ msgid ""
#~ "Yes. You can upgrade an existing deployment to WiredTiger while the "
#~ "deployment remains available by adding replica set members with the new "
#~ "storage engine and then removing members with the legacy storage engine. See"
#~ " the following sections of the :doc:`/release-notes/3.0-upgrade` for the "
#~ "complete procedure that you can use to upgrade an existing deployment:"
#~ msgstr ""

#~ msgid ":ref:`3.0-upgrade-repl-set-wiredtiger`"
#~ msgstr ""

#~ msgid ":ref:`3.0-upgrade-cluster-wiredtiger`"
#~ msgstr ""

#~ msgid ""
#~ "The size of the cache should be sufficient to hold the entire working set "
#~ "for the :program:`mongod`. If the cache does not have enough space to load "
#~ "additional data, WiredTiger evicts pages from the cache to free up space."
#~ msgstr ""

#~ msgid ""
#~ "To see statistics on the cache and eviction, use the "
#~ ":dbcommand:`serverStatus` command. The "
#~ ":data:`~serverStatus.wiredTiger.cache` field holds the information on the "
#~ "cache and eviction:"
#~ msgstr ""

#~ msgid ""
#~ "To adjust the size of the WiredTiger cache, see "
#~ ":setting:`storage.wiredTiger.engineConfig.cacheSizeGB` and "
#~ ":option:`--wiredTigerCacheSizeGB`."
#~ msgstr ""

#~ msgid ""
#~ "You can only run :dbcommand:`repairDatabase` on a standalone "
#~ ":program:`mongod` instance. If the :program:`mongod` instance is a member of"
#~ " a replica set, you will need to take the node out of a replica set and "
#~ "restart it as a standalone in order to run :dbcommand:`repairDatabase`."
#~ msgstr ""

#~ msgid ""
#~ "You can also run the :dbcommand:`repairDatabase` operation for all databases"
#~ " on the server by restarting your :program:`mongod` standalone instance with"
#~ " the :option:`--repair` and :option:`--repairpath` options. All databases "
#~ "will on the server will be unavailable during this operation."
#~ msgstr ""
