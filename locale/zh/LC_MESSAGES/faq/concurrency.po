# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/concurrency.txt:3
msgid "FAQ: Concurrency"
msgstr ""

#: ../source/faq/concurrency.txt:9
msgid ""
"MongoDB allows multiple clients to read and write the same data. In order to"
" ensure consistency, it uses locking and other :term:`concurrency control` "
"measures to prevent multiple clients from modifying the same piece of data "
"simultaneously. Together, these mechanisms guarantee that all writes to a "
"single document occur either in full or not at all and that clients never "
"see an inconsistent view of the data."
msgstr ""

#: ../source/faq/concurrency.txt:20
msgid "What type of locking does MongoDB use?"
msgstr ""

#: ../source/faq/concurrency.txt:22
msgid ""
"MongoDB uses reader-writer locks that allow concurrent readers shared access"
" to a resource, such as a database or collection, but give exclusive access "
"to a single write operation."
msgstr ""

#: ../source/faq/concurrency.txt:26
msgid ""
"MongoDB uses multi-granularity locking [#mgl-ref]_ that allows operations to"
" lock at the global, database or collection level, and allows for individual"
" storage engines to implement their own concurrency control below the "
"collection (i.e., at the document-level in WiredTiger)."
msgstr ""

#: ../source/faq/concurrency.txt:32
msgid ""
"In addition to a shared (S) locking mode for reads and an exclusive (X) "
"locking mode for write operations, intent shared (IS) and intent exclusive "
"(IX) modes indicate an intent to read or write a resource using a finer "
"granularity lock.  When locking at a certain granularity all higher levels "
"are locked using an :term:`intent lock`."
msgstr ""

#: ../source/faq/concurrency.txt:38
msgid ""
"For example, when locking a collection for writing (using mode X), both the "
"corresponding database lock and the global lock must be locked in intent "
"exclusive (IX) mode. A single database can simultaneously be locked in IS "
"and IX mode, but an exclusive (X) lock cannot coexist with any other modes, "
"and a shared (S) lock can only coexists with intent shared (IS) locks."
msgstr ""

#: ../source/faq/concurrency.txt:47
msgid ""
"Locks are fair, with reads and writes being queued in order. However, to "
"optimize throughput, when one request is granted, all other compatible "
"requests will be granted at the same time, potentially releasing them before"
" a conflicting request.  For example, consider a case in which an X lock was"
" just released, and in which the conflict queue contains the following "
"items:"
msgstr ""

#: ../source/faq/concurrency.txt:54
msgid "IS |rarr| IS |rarr| X |rarr| X |rarr| S |rarr| IS"
msgstr ""

#: ../source/faq/concurrency.txt:56
msgid ""
"In strict first-in, first-out (FIFO) ordering, only the first two IS modes "
"would be granted. Instead MongoDB will actually grant all IS and S modes, "
"and once they all drain, it will grant X, even if new IS or S requests have "
"been queued in the meantime. As a grant will always move all other requests "
"ahead in the queue, no starvation of any request is possible."
msgstr ""

#: ../source/faq/concurrency.txt:63
msgid ""
"See the Wikipedia page on `Multiple granularity locking "
"<http://en.wikipedia.org/wiki/Multiple_granularity_locking>`_ for more "
"information."
msgstr ""

#: ../source/faq/concurrency.txt:69
msgid "How granular are locks in MongoDB?"
msgstr ""

#: ../source/faq/concurrency.txt:73
msgid ""
"Beginning with version 3.0, MongoDB ships with the :ref:`WiredTiger "
"<storage-wiredtiger>` storage engine, which uses optimistic concurrency "
"control for most read and write operations. WiredTiger uses only intent "
"locks at the global, database and collection levels. When the storage engine"
" detects conflicts between two operations, one will incur a write conflict "
"causing MongoDB to transparently retry that operation."
msgstr ""

#: ../source/faq/concurrency.txt:81
msgid ""
"Some global operations, typically short lived operations involving multiple "
"databases, still require a global \"instance-wide\" lock. Some other "
"operations, such as dropping a collection, still require an exclusive "
"database lock."
msgstr ""

#: ../source/faq/concurrency.txt:86
msgid ""
"The MMAPv1 storage engine uses collection-level locking as of the 3.0 "
"release series, an improvement on earlier versions in which the database "
"lock was the finest-grain lock. Third-party storage engines may either use "
"collection-level locking or implement their own finer-grained concurrency "
"control."
msgstr ""

#: ../source/faq/concurrency.txt:92
msgid ""
"For example, if you have six collections in a database using the MMAPv1 "
"storage engine and an operation takes a collection-level write lock, the "
"other five collections are still available for read and write operations. An"
" exclusive database lock makes all six collections unavailable for the "
"duration of the operation holding the lock."
msgstr ""

#: ../source/faq/concurrency.txt:99
msgid "How do I see the status of locks on my :program:`mongod` instances?"
msgstr ""

#: ../source/faq/concurrency.txt:101
msgid ""
"For reporting on lock utilization information on locks, use any of the "
"following methods:"
msgstr ""

#: ../source/faq/concurrency.txt:104 ../source/faq/concurrency.txt:199
msgid ":method:`db.serverStatus()`,"
msgstr ""

#: ../source/faq/concurrency.txt:105
msgid ":method:`db.currentOp()`,"
msgstr ""

#: ../source/faq/concurrency.txt:106
msgid ":doc:`mongotop </reference/program/mongotop>`,"
msgstr ""

#: ../source/faq/concurrency.txt:107
msgid ":doc:`mongostat </reference/program/mongostat>`, and/or"
msgstr ""

#: ../source/faq/concurrency.txt:108
msgid ""
"the |mms-home| or :products:`Ops Manager, an on-premise solution available "
"in MongoDB Enterprise Advanced </mongodb-enterprise-advanced?jmp=docs>`"
msgstr ""

#: ../source/faq/concurrency.txt:113
msgid ""
"Specifically, the :data:`~serverStatus.locks` document in the :doc:`output "
"of serverStatus </reference/command/serverStatus>`, or the "
":data:`~currentOp.locks` field in the :doc:`current operation reporting "
"</reference/method/db.currentOp>` provides insight into the type of locks "
"and amount of lock contention in your :program:`mongod` instance."
msgstr ""

#: ../source/faq/concurrency.txt:119
msgid "To terminate an operation, use :method:`db.killOp()`."
msgstr ""

#: ../source/faq/concurrency.txt:126
msgid "Does a read or write operation ever yield the lock?"
msgstr ""

#: ../source/faq/concurrency.txt:128
msgid "In some situations, read and write operations can yield their locks."
msgstr ""

#: ../source/faq/concurrency.txt:130
msgid ""
"Long running read and write operations, such as queries, updates, and "
"deletes, yield under many conditions.  MongoDB operations can also yield "
"locks between individual document modifications in write operations that "
"affect multiple documents like :method:`~db.collection.update()` with the "
"``multi`` parameter."
msgstr ""

#: ../source/faq/concurrency.txt:136
msgid ""
"MongoDB's :ref:`mmapv1 <storage-mmapv1>` storage engine uses heuristics "
"based on its access pattern to predict whether data is likely in physical "
"memory before performing a read. If MongoDB *predicts* that the data is not "
"in physical memory, an operation will yield its lock while MongoDB loads the"
" data into memory. Once data is available in memory, the operation will "
"reacquire the lock to complete the operation."
msgstr ""

#: ../source/faq/concurrency.txt:144
msgid ""
"For storage engines supporting document level :term:`concurrency control`, "
"yielding is not necessary when accessing storage, as the :term:`intent locks"
" <intent lock>` held at the global, database and collection level do not "
"block other readers and writers."
msgstr ""

#: ../source/faq/concurrency.txt:149
msgid ""
"MongoDB does not yield locks when scanning an index even if it predicts that"
" the index is not in memory."
msgstr ""

#: ../source/faq/concurrency.txt:156
msgid "Which operations lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:160
msgid ""
"The following table lists common database operations and the types of locks "
"they use."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:4
msgid "Operation"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:6
msgid "Lock Type"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:8
msgid "Issue a query"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:10
#: ../source/includes/table/lock-behavior-per-operation.rst:14
#: ../source/includes/table/lock-behavior-per-operation.rst:66
msgid "Read lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:12
msgid "Get more data from a :term:`cursor`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:16
msgid "Insert data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:18
#: ../source/includes/table/lock-behavior-per-operation.rst:22
#: ../source/includes/table/lock-behavior-per-operation.rst:26
msgid "Write lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:20
msgid "Remove data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:24
msgid "Update data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:28
msgid ":term:`Map-reduce <map-reduce>`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:30
msgid ""
"Read lock and write lock, unless operations are specified as non-atomic. "
"Portions of map-reduce jobs can run concurrently."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:34
msgid "Create an index"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:36
msgid ""
"Building an index in the foreground, which is the default, locks the "
"database for extended periods of time."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:40
msgid ":method:`db.eval()`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:45
msgid ""
"Write lock. The :method:`db.eval()` method takes a global write lock while "
"evaluating the JavaScript function. To avoid taking this global write lock, "
"you can use the :dbcommand:`eval` command with ``nolock: true``."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:51
msgid ":dbcommand:`eval`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:56
msgid ""
"Write lock. By default, :dbcommand:`eval` command takes a global write lock "
"while evaluating the JavaScript function. If used with ``nolock: true``, the"
" :dbcommand:`eval` command does *not* take a global write lock while "
"evaluating the JavaScript function. However, the logic within the JavaScript"
" function may take write locks for write operations."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:64
msgid ":method:`~db.collection.aggregate()`"
msgstr ""

#: ../source/faq/concurrency.txt:169
msgid "Which administrative commands lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:171
msgid ""
"Certain administrative commands can exclusively lock the database for "
"extended periods of time. In some deployments, for large databases, you may "
"consider taking the :program:`mongod` instance offline so that clients are "
"not affected. For example, if a :program:`mongod` is part of a "
":term:`replica set`, take the :program:`mongod` offline and let other "
"members of the set service load while maintenance is in progress."
msgstr ""

#: ../source/faq/concurrency.txt:178
msgid ""
"The following administrative operations require an exclusive (i.e. write) "
"lock on the database for extended periods:"
msgstr ""

#: ../source/faq/concurrency.txt:181
msgid ""
":method:`db.collection.createIndex()`, when issued *without* setting "
"``background`` to ``true``,"
msgstr ""

#: ../source/faq/concurrency.txt:183
msgid ":dbcommand:`reIndex`,"
msgstr ""

#: ../source/faq/concurrency.txt:184
msgid ":dbcommand:`compact`,"
msgstr ""

#: ../source/faq/concurrency.txt:185
msgid ":method:`db.repairDatabase()`,"
msgstr ""

#: ../source/faq/concurrency.txt:186
msgid ""
":method:`db.createCollection()`, when creating a very large (i.e. many "
"gigabytes) capped collection,"
msgstr ""

#: ../source/faq/concurrency.txt:188
msgid ":method:`db.collection.validate()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:189
msgid ""
":method:`db.copyDatabase()`. This operation may lock all databases. See :ref"
":`faq-concurrency-lock-multiple-dbs`."
msgstr ""

#: ../source/faq/concurrency.txt:192
msgid ""
"The following administrative commands lock the database but only hold the "
"lock for a very short time:"
msgstr ""

#: ../source/faq/concurrency.txt:195
msgid ":method:`db.collection.dropIndex()`,"
msgstr ""

#: ../source/faq/concurrency.txt:196
msgid ":method:`db.getLastError()`,"
msgstr ""

#: ../source/faq/concurrency.txt:197
msgid ":method:`db.isMaster()`,"
msgstr ""

#: ../source/faq/concurrency.txt:198
msgid ":method:`rs.status()` (i.e. :dbcommand:`replSetGetStatus`),"
msgstr ""

#: ../source/faq/concurrency.txt:200
msgid ":method:`db.auth()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:201
msgid ":method:`db.addUser()`."
msgstr ""

#: ../source/faq/concurrency.txt:206
msgid "Does a MongoDB operation ever lock more than one database?"
msgstr ""

#: ../source/faq/concurrency.txt:208
msgid "The following MongoDB operations lock multiple databases:"
msgstr ""

#: ../source/faq/concurrency.txt:210
msgid ""
":method:`db.copyDatabase()` must lock the entire :program:`mongod` instance "
"at once."
msgstr ""

#: ../source/faq/concurrency.txt:213
msgid ""
":method:`db.repairDatabase()` obtains a global write lock and will block "
"other operations until it finishes."
msgstr ""

#: ../source/faq/concurrency.txt:216
msgid ""
":term:`Journaling <journal>`, which is an internal operation, locks all "
"databases for short intervals. All databases share a single journal."
msgstr ""

#: ../source/faq/concurrency.txt:220
msgid ""
":doc:`User authentication </core/authentication>` requires a read lock on "
"the ``admin`` database for deployments using :ref:`2.6 user credentials "
"<admin-system-users-collection>`. For deployments using the 2.4 schema for "
"user credentials, authentication locks the ``admin`` database as well as the"
" database the user is accessing."
msgstr ""

#: ../source/faq/concurrency.txt:226
msgid ""
"All writes to a replica set's :term:`primary` lock both the database "
"receiving the writes and then the ``local`` database for a short time. The "
"lock for the ``local`` database allows the :program:`mongod` to write to the"
" primary's :term:`oplog` and accounts for a small portion of the total time "
"of the operation."
msgstr ""

#: ../source/faq/concurrency.txt:233
msgid "How does sharding affect concurrency?"
msgstr ""

#: ../source/faq/concurrency.txt:235
msgid ""
":term:`Sharding <sharding>` improves concurrency by distributing collections"
" over multiple :program:`mongod` instances, allowing shard servers (i.e. "
":program:`mongos` processes) to perform any number of operations "
"concurrently to the various downstream :program:`mongod` instances."
msgstr ""

#: ../source/faq/concurrency.txt:241
msgid ""
"Each :program:`mongod` instance is independent of the others in the shard "
"cluster and uses its own :ref:`locks <faq-concurrency-locking>`. The "
"operations on one :program:`mongod` instance do not block the operations on "
"any others."
msgstr ""

#: ../source/faq/concurrency.txt:249
msgid "How does concurrency affect a replica set primary?"
msgstr ""

#: ../source/faq/concurrency.txt:251
msgid ""
"In :term:`replication`, when MongoDB writes to a collection on the "
":term:`primary`, MongoDB also writes to the primary's :term:`oplog`, which "
"is a special collection in the ``local`` database.  Therefore, MongoDB must "
"lock both the collection's database and the ``local`` database. The "
":program:`mongod` must lock both databases at the same time to keep the "
"database consistent and ensure that write operations, even with replication,"
" are \"all-or-nothing\" operations."
msgstr ""

#: ../source/faq/concurrency.txt:260
msgid "How does concurrency affect secondaries?"
msgstr ""

#: ../source/faq/concurrency.txt:262
msgid ""
"In :term:`replication`, MongoDB does not apply writes serially to "
":term:`secondaries <secondary>`. Secondaries collect oplog entries in "
"batches and then apply those batches in parallel. Secondaries do not allow "
"reads while applying the write operations, and apply write operations in the"
" order that they appear in the oplog."
msgstr ""

#: ../source/faq/concurrency.txt:268
msgid ""
"MongoDB can apply several writes in parallel on replica set secondaries, in "
"two phases:"
msgstr ""

#: ../source/faq/concurrency.txt:271
msgid ""
"During the first *prefer* phase, under a read lock, the :program:`mongod` "
"ensures that all documents affected by the operations are in memory. During "
"this phase, other clients may execute queries against this member."
msgstr ""

#: ../source/faq/concurrency.txt:276
msgid ""
"A thread pool using write locks applies all write operations in the batch as"
" part of a coordinated write phase."
msgstr ""

#: ../source/faq/concurrency.txt:280
msgid ""
"What kind of concurrency does MongoDB provide for JavaScript operations?"
msgstr ""

#: ../source/faq/concurrency.txt:282
msgid ""
"The V8 JavaScript engine added in 2.4 allows multiple JavaScript operations "
"to run at the same time. Prior to 2.4, a single :program:`mongod` could only"
" run a *single* JavaScript operation at once."
msgstr ""

#: ../source/faq/concurrency.txt:289
msgid "Does MongoDB support transactions?"
msgstr ""

#: ../source/faq/concurrency.txt:291
msgid "MongoDB does not support multi-document transactions."
msgstr ""

#: ../source/faq/concurrency.txt:293
msgid ""
"However, MongoDB does provide atomic operations on a single document. Often "
"these document-level atomic operations are sufficient to solve problems that"
" would require ACID transactions in a relational database."
msgstr ""

#: ../source/faq/concurrency.txt:298
msgid ""
"For example, in MongoDB, you can embed related data in nested arrays or "
"nested documents within a single document and update the entire document in "
"a single atomic operation. Relational databases might represent the same "
"kind of data with multiple tables and rows, which would require transaction "
"support to update the data atomically."
msgstr ""

#: ../source/faq/concurrency.txt:304 ../source/faq/concurrency.txt:356
msgid ":doc:`/core/write-operations-atomicity`"
msgstr ""

#: ../source/faq/concurrency.txt:307
msgid "What isolation guarantees does MongoDB provide?"
msgstr ""

#: ../source/faq/concurrency.txt:309
msgid ""
"MongoDB provides the following guarantees in the presence of concurrent read"
" and write operations. These guarantees hold on systems configured with "
"either the MMAPv1 or WiredTiger storage engines."
msgstr ""

#: ../source/faq/concurrency.txt:313
msgid ""
"Read and write operations are atomic with respect to a single document and "
"will always leave the document in a consistent state. This means that "
"readers will never see a partially updated document, and indices will always"
" be consistent with the contents of the collection. Furthermore, a set of "
"read and write operations to a single document are serializable."
msgstr ""

#: ../source/faq/concurrency.txt:319
msgid ""
"Correctness with respect to query predicates, e.g. "
":method:`db.collection.find()` will only return documents that match and "
":method:`db.collection.update()` will only write to matching documents."
msgstr ""

#: ../source/faq/concurrency.txt:323
msgid ""
"Correctness with respect to sort. For read operations that request a sort "
"order (e.g. :method:`db.collection.find()` or "
":method:`db.collection.aggregate()`), the sort order will not be violated "
"due to concurrent writes."
msgstr ""

#: ../source/faq/concurrency.txt:328
msgid ""
"Although MongoDB provides these strong guarantees for single-document "
"operations, read and write operations may access an arbitrary number of "
"documents during execution.  Multi-document operations do *not* occur "
"transactionally and are not isolated from concurrent writes. This means that"
" the following behaviors are expected under the normal operation of the "
"system, for both the MMAPv1 and WiredTiger storage engines:"
msgstr ""

#: ../source/faq/concurrency.txt:335
msgid ""
"Non-point-in-time read operations. Suppose a read operation begins at time "
"*t*\\ :sub:`1` and starts reading documents. A write operation then commits "
"an update to a document at some later time *t*\\ :sub:`2`. The reader may "
"see the updated version of the document, and therefore does not see a point-"
"in-time snapshot of the data."
msgstr ""

#: ../source/faq/concurrency.txt:341
msgid ""
"Non-serializable operations. Suppose a read operation reads a document *d*\\"
" :sub:`1` at time *t*\\ :sub:`1` and a write operation updates *d*\\ "
":sub:`1` at some later time *t*\\ :sub:`3`. This introduces a read-write "
"dependency such that, if the operations were to be serialized, the read "
"operation must precede the write operation. But also suppose that the write "
"operation updates document *d*\\ :sub:`2` at time *t*\\ :sub:`2` and the "
"read operation subsequently reads *d*\\ :sub:`2` at some later time *t*\\ "
":sub:`4`. This introduces a write-read dependency which would instead "
"require the read operation to come *after* the write operation in a "
"serializable schedule. There is a dependency cycle which makes "
"serializability impossible."
msgstr ""

#: ../source/faq/concurrency.txt:352
msgid ""
"Dropped results. Reads may miss matching documents that are updated or "
"deleted during the course of the read operation. However, data that has not "
"been modified during the operation will always be visible."
msgstr ""

#: ../source/faq/concurrency.txt:359
msgid "Can reads see changes that have not been committed to disk?"
msgstr ""

#: ../source/faq/concurrency.txt:361
msgid ""
"Yes, readers can see the results of writes before they are made durable, "
"regardless of write concern level or journaling configuration. As a result, "
"applications may observe the following behaviors:"
msgstr ""

#: ../source/faq/concurrency.txt:365
msgid ""
"MongoDB will allow a concurrent reader to see the result of the write "
"operation before the write is acknowledged to the client application. For "
"details on when writes are acknowledged for different write concern levels, "
"see :doc:`/core/write-concern`."
msgstr ""

#: ../source/faq/concurrency.txt:370
msgid ""
"Reads can see data which may subsequently be rolled back in rare cases such "
"as replica set failover or power loss. It does *not* mean that read "
"operations can see documents in a partially written or otherwise "
"inconsistent state."
msgstr ""

#: ../source/faq/concurrency.txt:374
msgid "Other systems refer to these semantics as *read uncommitted*."
msgstr ""
