#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/sharded-cluster-config-servers.txt:8
msgid "Config Servers"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:53
msgid ""
"Each sharded cluster must have its own config servers. Do not use the same "
"config servers for different sharded clusters."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:62
msgid "Read and Write Operations on Config Servers"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:64
msgid ""
"Config servers store the cluster's metadata in the :doc:`config database "
"</reference/config-database>`. The :program:`mongos` instances cache this "
"data and use it to route reads and writes to shards."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:71
msgid "after a :doc:`chunk migration </core/sharding-chunk-migration>`, or"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:73
msgid "after a :doc:`chunk split </core/sharding-chunk-splitting>`."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:78
msgid "MongoDB reads data from the config server in the following cases:"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:80
msgid ""
"A new :program:`mongos` starts for the first time, or an existing "
":program:`mongos` restarts."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:83
msgid "After change in the cluster metadata, such as after a chunk migration."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:90
msgid "Config Server Availability"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:111
msgid ""
"See :ref:`sharding-config-servers-and-availability` for more information."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:1
msgid "sharding"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:1
#: ../source/core/sharded-cluster-config-servers.txt:2
msgid "config servers"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:56
msgid "config databases"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:57
msgid "database"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:57
msgid "config"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:0
msgid "On this page"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:18
msgid ""
"Config servers store the :doc:`metadata </core/sharded-cluster-metadata>` "
"for a sharded cluster."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:23
msgid ""
"If the config servers become inaccessible, the cluster is not accessible. If"
" you cannot recover the data on a config server, the cluster will be "
"inoperable."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:27
msgid "MongoDB also uses the config servers to manage distributed locks."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:34
msgid "Replica Set Config Servers"
msgstr ""

#: ../source/includes/fact-csrs-versionchanged.rst:1
msgid ""
"Starting in MongoDB 3.2, config servers for sharded clusters can be deployed"
" as a :doc:`replica set </core/replication-introduction>`. Using a replica "
"set for the config servers improves consistency across the config servers, "
"since MongoDB can take advantage of the standard replica set read and write "
"protocols for the config data. In addition, using a replica set for config "
"servers allows a sharded cluster to have more than 3 config servers since a "
"replica set can have up to 50 members. To deploy config servers as a replica"
" set, the config servers must run the :doc:`WiredTiger storage engine "
"</core/wiredtiger>`."
msgstr ""

#: ../source/includes/fact-config-server-replica-set-restrictions.rst:1
msgid ""
"The following restrictions apply to a replica set configuration when used "
"for config servers:"
msgstr ""

#: ../source/includes/fact-config-server-replica-set-restrictions.rst:4
msgid "Must have zero :doc:`arbiters </core/replica-set-arbiter>`."
msgstr ""

#: ../source/includes/fact-config-server-replica-set-restrictions.rst:6
msgid ""
"Must have no :doc:`delayed members </core/replica-set-delayed-member>`."
msgstr ""

#: ../source/includes/fact-config-server-replica-set-restrictions.rst:9
msgid ""
"Must build indexes (i.e. no member should have "
":data:`~replSetGetConfig.members[n].buildIndexes` setting set to false)."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:42
msgid ""
"Earlier versions of MongoDB required *exactly three* mirrored "
":program:`mongod` instances to act as the config servers. If you are using "
"*mirrored* config servers, each server's system clock must be within 30 "
"seconds of each other server for the distributed lock manager to work "
"properly. With *mirrored* config servers, minimize clock skew by running the"
" network time protocol (NTP) ``ntpd`` on your servers. MongoDB 3.2 "
"deprecates the use of three mirrored :program:`mongod` instances for config "
"servers."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:50
msgid ""
"With replica set config servers, clock skew does not affect distributed lock"
" management."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:68
msgid ""
"MongoDB only writes data to the config servers when the metadata changes, "
"such as"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:75
msgid ""
"When writing to the replica set config servers, MongoDB uses a :ref:`write "
"concern <wc-w>` of ``\"majority\"``."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:86
msgid ""
"When reading from the replica set config servers, MongoDB uses a "
":doc:`/reference/read-concern` level of :readconcern:`\"majority\"`."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:92
msgid ""
"If the config server replica set loses its primary and cannot elect a "
"primary, the cluster's metadata becomes *read only*. You can still read and "
"write data from the shards, but no chunk migration or chunk splits will "
"occur until the replica set can elect a primary. If all config databases "
"become unavailable, the cluster can become inoperable."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:98
msgid ""
"The :program:`mongos` instances cache the metadata from the config servers. "
"As such, if all config server members become unavailable, you can still use "
"the cluster if you do not restart the :program:`mongos` instances until "
"after the config servers are accessible again. If you restart the "
":program:`mongos` instances before the config servers are available, the "
":program:`mongos` will be unable to route reads and writes."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:105
msgid ""
"Clusters become inoperable without the cluster metadata. To ensure that the "
"config servers remain available and intact, backups of config servers are "
"critical. The data on the config server is small compared to the data stored"
" in a cluster, and the config server has a relatively low activity load."
msgstr ""

#~ msgid ""
#~ "Config servers are special :program:`mongod` instances that store the "
#~ ":doc:`metadata </core/sharded-cluster-metadata>` for a sharded cluster."
#~ msgstr ""

#~ msgid ""
#~ "A production sharded cluster has *exactly three* config servers. All config "
#~ "servers must be available to deploy a sharded cluster or to make any changes"
#~ " to cluster metadata. Config servers *do not* run as replica sets."
#~ msgstr ""

#~ msgid ""
#~ "For testing purposes you may deploy a cluster with a single config server. "
#~ "But to ensure redundancy and safety in production, you should always use "
#~ "three."
#~ msgstr ""

#~ msgid ""
#~ "If your cluster has a single config server, then the config server is a "
#~ "single point of failure. If the config server is inaccessible, the cluster "
#~ "is not accessible. If you cannot recover the data on a config server, the "
#~ "cluster will be inoperable."
#~ msgstr ""

#~ msgid "**Always** use three config servers for production deployments."
#~ msgstr ""

#~ msgid "Tip"
#~ msgstr ""

#~ msgid ""
#~ "Use CNAMEs to identify your config servers to the cluster so that you can "
#~ "rename and renumber your config servers without downtime."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB only writes data to the config server when the metadata changes, "
#~ "such as"
#~ msgstr ""

#~ msgid ""
#~ "When writing to the three config servers, a coordinator dispatches the same "
#~ "write commands to the three config servers and collects the results. "
#~ "Differing results indicate an inconsistent writes to the config servers and "
#~ "may require manual intervention. Once the config servers become "
#~ "inconsistent, the balancer will not perform any chunk migration and "
#~ ":program:`mongos` will not perform auto-splits of chunks."
#~ msgstr ""

#~ msgid "MongoDB also uses the config server to manage distributed locks."
#~ msgstr ""

#~ msgid ""
#~ "If one or two config servers become unavailable, the cluster's metadata "
#~ "becomes *read only*. You can still read and write data from the shards, but "
#~ "no chunk migrations or splits will occur until all three servers are "
#~ "available."
#~ msgstr ""

#~ msgid ""
#~ "If all three config servers are unavailable, you can still use the cluster "
#~ "if you do not restart the :program:`mongos` instances until after the config"
#~ " servers are accessible again. If you restart the :program:`mongos` "
#~ "instances before the config servers are available, the :program:`mongos` "
#~ "will be unable to route reads and writes."
#~ msgstr ""

#~ msgid ""
#~ "Clusters become inoperable without the cluster metadata. To ensure that the "
#~ "config servers remain available and intact, backups of config servers are "
#~ "critical. The data on the config server is small compared to the data stored"
#~ " in a cluster, and the config server has a relatively low activity load. "
#~ "These properties facilitate finding a window to back up the config servers."
#~ msgstr ""

#~ msgid ""
#~ "If the name or address that a sharded cluster uses to connect to a config "
#~ "server changes, you must restart **every** :program:`mongod` and "
#~ ":program:`mongos` instance in the sharded cluster. Avoid downtime by using "
#~ "CNAMEs to identify config servers within the MongoDB deployment."
#~ msgstr ""
