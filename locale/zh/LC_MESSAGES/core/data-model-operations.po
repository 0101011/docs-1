# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/data-model-operations.txt:3
msgid "Operational Factors and Data Models"
msgstr ""

#: ../source/core/data-model-operations.txt:7
msgid ""
"Modeling application data for MongoDB depends on both the data itself, as "
"well as the characteristics of MongoDB itself. For example, different data "
"models may allow applications to use more efficient queries, increase the "
"throughput of insert and update operations, or distribute activity to a "
"sharded cluster more effectively."
msgstr ""

#: ../source/core/data-model-operations.txt:13
msgid ""
"These factors are *operational* or address requirements that arise outside "
"of the application but impact the performance of MongoDB based applications."
" When developing a data model, analyze all of your application's :doc:`read "
"operations </core/read-operations>` and :doc:`write operations </core/write-"
"operations>` in conjunction with the following considerations."
msgstr ""

#: ../source/core/data-model-operations.txt:23
msgid "Document Growth"
msgstr ""

#: ../source/core/data-model-operations.txt:27
msgid ""
"Some updates to documents can increase the size of documents. These updates "
"include pushing elements to an array (i.e. :update:`$push`) and adding new "
"fields to a document."
msgstr ""

#: ../source/core/data-model-operations.txt:31
msgid ""
"When using the MMAPv1 storage engine, document growth can be a consideration"
" for your data model. For MMAPv1, if the document size exceeds the allocated"
" space for that document, MongoDB will relocate the document on disk. With "
"MongoDB 3.0.0, however, the default use of the :ref:`power-of-2-allocation` "
"minimizes the occurrences of such re-allocations as well as allows for the "
"effective reuse of the freed record space."
msgstr ""

#: ../source/core/data-model-operations.txt:39
msgid ""
"When using MMAPv1, if your applications require updates that will frequently"
" cause document growth to exceeds the current power of 2 allocation, you may"
" want to refactor your data model to use references between data in distinct"
" documents rather than a denormalized data model."
msgstr ""

#: ../source/core/data-model-operations.txt:45
msgid ""
"You may also use a *pre-allocation* strategy to explicitly avoid document "
"growth. Refer to the :ecosystem:`Pre-Aggregated Reports Use Case </use-cases"
"/pre-aggregated-reports>` for an example of the *pre-allocation* approach to"
" handling document growth."
msgstr ""

#: ../source/core/data-model-operations.txt:50
msgid ""
"See :doc:`/core/storage` for more information on MongoDB's storage model and"
" record allocation strategies."
msgstr ""

#: ../source/core/data-model-operations.txt:57
msgid "Atomicity"
msgstr ""

#: ../source/core/data-model-operations.txt:59
msgid ""
"In MongoDB, operations are atomic at the :term:`document` level. No "
"**single** write operation can change more than one document. Operations "
"that modify more than a single document in a collection still operate on one"
" document at a time. [#record-atomicity]_ Ensure that your application "
"stores all fields with atomic dependency requirements in the same document. "
"If the application can tolerate non-atomic updates for two pieces of data, "
"you can store these data in separate documents."
msgstr ""

#: ../source/core/data-model-operations.txt:68
msgid ""
"A data model that embeds related data in a single document facilitates these"
" kinds of atomic operations. For data models that store references between "
"related pieces of data, the application must issue separate read and write "
"operations to retrieve and modify these related pieces of data."
msgstr ""

#: ../source/core/data-model-operations.txt:74
msgid ""
"See :ref:`data-modeling-atomic-operation` for an example data model that "
"provides atomic updates for a single document."
msgstr ""

#: ../source/core/data-model-operations.txt:77
msgid ""
"Document-level atomic operations include all operations within a single "
"MongoDB document record: operations that affect multiple embedded documents "
"within that single record are still atomic."
msgstr ""

#: ../source/core/data-model-operations.txt:83
msgid "Sharding"
msgstr ""

#: ../source/core/data-model-operations.txt:85
msgid ""
"MongoDB uses :term:`sharding` to provide horizontal scaling. These clusters "
"support deployments with large data sets and high-throughput operations. "
"Sharding allows users to :term:`partition` a :term:`collection` within a "
"database to distribute the collection's documents across a number of "
":program:`mongod` instances or :term:`shards <shard>`."
msgstr ""

#: ../source/core/data-model-operations.txt:92
msgid ""
"To distribute data and application traffic in a sharded collection, MongoDB "
"uses the :ref:`shard key <shard-key>`. Selecting the proper :ref:`shard key "
"<shard-key>` has significant implications for performance, and can enable or"
" prevent query isolation and increased write capacity. It is important to "
"consider carefully the field or fields to use as the shard key."
msgstr ""

#: ../source/core/data-model-operations.txt:99
msgid ""
"See :doc:`/core/sharding-introduction` and :doc:`/core/sharding-shard-key` "
"for more information."
msgstr ""

#: ../source/core/data-model-operations.txt:105
msgid "Indexes"
msgstr ""

#: ../source/core/data-model-operations.txt:107
msgid ""
"Use indexes to improve performance for common queries. Build indexes on "
"fields that appear often in queries and for all operations that return "
"sorted results. MongoDB automatically creates a unique index on the ``_id`` "
"field."
msgstr ""

#: ../source/core/data-model-operations.txt:112
msgid "As you create indexes, consider the following behaviors of indexes:"
msgstr ""

#: ../source/core/data-model-operations.txt:114
msgid "Each index requires at least 8KB of data space."
msgstr ""

#: ../source/core/data-model-operations.txt:116
msgid ""
"Adding an index has some negative performance impact for write operations. "
"For collections with high write-to-read ratio, indexes are expensive since "
"each insert must also update any indexes."
msgstr ""

#: ../source/core/data-model-operations.txt:120
msgid ""
"Collections with high read-to-write ratio often benefit from additional "
"indexes. Indexes do not affect un-indexed read operations."
msgstr ""

#: ../source/core/data-model-operations.txt:123
msgid ""
"When active, each index consumes disk space and memory. This usage can be "
"significant and should be tracked for capacity planning, especially for "
"concerns over working set size."
msgstr ""

#: ../source/core/data-model-operations.txt:127
msgid ""
"See :doc:`/applications/indexes` for more information on indexes as well as "
":doc:`/tutorial/analyze-query-plan/`. Additionally, the MongoDB "
":doc:`database profiler </tutorial/manage-the-database-profiler>` may help "
"identify inefficient queries."
msgstr ""

#: ../source/core/data-model-operations.txt:135
msgid "Large Number of Collections"
msgstr ""

#: ../source/core/data-model-operations.txt:137
msgid ""
"In certain situations, you might choose to store related information in "
"several collections rather than in a single collection."
msgstr ""

#: ../source/core/data-model-operations.txt:140
msgid ""
"Consider a sample collection ``logs`` that stores log documents for various "
"environment and applications. The ``logs`` collection contains documents of "
"the following form:"
msgstr ""

#: ../source/core/data-model-operations.txt:149
msgid ""
"If the total number of documents is low, you may group documents into "
"collection by type. For logs, consider maintaining distinct log collections,"
" such as ``logs_dev`` and ``logs_debug``. The ``logs_dev`` collection would "
"contain only the documents related to the dev environment."
msgstr ""

#: ../source/core/data-model-operations.txt:155
msgid ""
"Generally, having a large number of collections has no significant "
"performance penalty and results in very good performance. Distinct "
"collections are very important for high-throughput batch processing."
msgstr ""

#: ../source/core/data-model-operations.txt:159
msgid ""
"When using models that have a large number of collections, consider the "
"following behaviors:"
msgstr ""

#: ../source/core/data-model-operations.txt:162
msgid "Each collection has a certain minimum overhead of a few kilobytes."
msgstr ""

#: ../source/core/data-model-operations.txt:164
msgid ""
"Each index, including the index on ``_id``, requires at least 8KB of data "
"space."
msgstr ""

#: ../source/core/data-model-operations.txt:167
msgid ""
"For each :term:`database`, a single namespace file (i.e. ``<database>.ns``) "
"stores all meta-data for that database, and each index and collection has "
"its own entry in the namespace file. MongoDB places :limit:`limits on the "
"size of namespace files <Size of Namespace File>`."
msgstr ""

#: ../source/core/data-model-operations.txt:173
msgid ""
"MongoDB using the ``mmapv1`` storage engine has :limit:`limits on the number"
" of namespaces <Number of Namespaces>`. You may wish to know the current "
"number of namespaces in order to determine how many additional namespaces "
"the database can support. To get the current number of namespaces, run the "
"following in the :program:`mongo` shell:"
msgstr ""

#: ../source/core/data-model-operations.txt:184
msgid ""
"The limit on the number of namespaces depend on the ``<database>.ns`` size. "
"The namespace file defaults to 16 MB."
msgstr ""

#: ../source/core/data-model-operations.txt:187
msgid ""
"To change the size of the *new* namespace file, start the server with the "
"option :option:`--nssize \\<new size MB\\> <--nssize>`. For existing "
"databases, after starting up the server with :option:`--nssize`, run the "
":method:`db.repairDatabase()` command from the :program:`mongo` shell. For "
"impacts and considerations on running :method:`db.repairDatabase()`, see "
":dbcommand:`repairDatabase`."
msgstr ""

#: ../source/core/data-model-operations.txt:196
msgid "Data Lifecycle Management"
msgstr ""

#: ../source/core/data-model-operations.txt:198
msgid ""
"Data modeling decisions should take data lifecycle management into "
"consideration."
msgstr ""

#: ../source/core/data-model-operations.txt:201
msgid ""
"The :doc:`Time to Live or TTL feature </tutorial/expire-data>` of "
"collections expires documents after a period of time. Consider using the TTL"
" feature if your application requires some data to persist in the database "
"for a limited period of time."
msgstr ""

#: ../source/core/data-model-operations.txt:206
msgid ""
"Additionally, if your application only uses recently inserted documents, "
"consider :doc:`/core/capped-collections`. Capped collections provide *first-"
"in-first-out* (FIFO) management of inserted documents and efficiently "
"support operations that insert and read documents based on insertion order."
msgstr ""
