# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replica-set-members.txt:3
msgid "Replica Set Members"
msgstr ""

#: ../source/core/replica-set-members.txt:7
msgid ""
"A *replica set* in MongoDB is a group of :program:`mongod` processes that "
"provide redundancy and high availability. The members of a replica set are:"
msgstr ""

#: ../source/core/replica-set-members.txt:12
msgid ":ref:`replica-set-primary-member`."
msgstr ""

#: ../source/core/replica-set-members.txt:12
msgid "The primary receives all write operations."
msgstr ""

#: ../source/core/replica-set-members.txt:19
msgid ":ref:`replica-set-secondary-members`."
msgstr ""

#: ../source/core/replica-set-members.txt:15
msgid ""
"Secondaries replicate operations from the primary to maintain an identical "
"data set. Secondaries may have additional configurations for special usage "
"profiles. For example, secondaries may be :ref:`non-voting <replica-set-non-"
"voting-members>` or :ref:`priority 0 <replica-set-secondary-only-members>`."
msgstr ""

#: ../source/core/replica-set-members.txt:21
msgid ""
"You can also maintain an :ref:`arbiter <replica-set-arbiters>` as part of a "
"replica set. Arbiters do not keep a copy of the data. However, arbiters play"
" a role in the elections that select a primary if the current primary is "
"unavailable."
msgstr ""

#: ../source/core/replica-set-members.txt:26
msgid ""
"The minimum requirements for a replica set are: A :ref:`primary <replica-"
"set-primary-member>`, a :ref:`secondary <replica-set-secondary-members>`, "
"and an :ref:`arbiter <replica-set-arbiters>`. Most deployments, however, "
"will keep three members that store data: A :ref:`primary <replica-set-"
"primary-member>` and two :ref:`secondary members <replica-set-secondary-"
"members>`."
msgstr ""

#: ../source/core/replica-set-members.txt:35
msgid ""
"A replica set can have up to :ref:`50 members <3.0-replica-sets-max-"
"members>` but only 7 voting members. [#master-slave]_ In previous versions, "
"replica sets can have up to 12 members."
msgstr ""

#: ../source/includes/fact-master-slave-workaround.rst:1
msgid ""
"While replica sets are the recommended solution for production, a replica "
"set can support up to :limit:`50 members <Number of Members of a Replica "
"Set>` in total. If your deployment requires more than 50 members, youâ€™ll "
"need to use :doc:`master-slave </core/master-slave>` replication. However, "
"master-slave replication lacks the automatic failover capabilities."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In some circumstances, two nodes in a replica set may *transiently* believe "
"that they are the primary, but at most, one of them will be able to complete"
" writes with :ref:`{w: majority} write concern <wc-w>`. The node that can "
"complete :ref:`{w: majority} <wc-w>` writes is the current primary, and the "
"other node is a former primary that has not yet recognized its demotion, "
"typically due to a :term:`network partition`. When this occurs, clients that"
" connect to the former primary may observe stale data despite having "
"requested read preference :readmode:`primary`."
msgstr ""
