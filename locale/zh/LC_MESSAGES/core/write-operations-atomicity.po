#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:02-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/write-operations-atomicity.txt:3
msgid "Atomicity and Transactions"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:14
msgid "Atomicity"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:16
msgid ""
"In MongoDB, a write operation is atomic on the level of a single "
"document, even if the operation modifies multiple embedded documents "
"*within* a single document."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:21
msgid "Multi-Document Transactions"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes.rst:2
msgid ""
"When a single write operation (e.g. :method:`db.collection.updateMany()`)"
" modifies multiple documents, the modification of each document is "
"atomic, but the operation as a whole is not atomic."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes.rst:7
msgid ""
"When performing multi-document write operations, whether through a single"
" write operation or multiple write operations, other operations may "
"interleave."
msgstr ""

#: ../source/includes/extracts/transactions-intro-blurb.rst:1
msgid ""
"Starting in version 4.0, for situations that require atomicity for "
"updates to multiple documents or consistency between reads to multiple "
"documents, MongoDB provides :doc:`multi-document transactions "
"</core/transactions>` for replica sets."
msgstr ""

#: ../source/includes/extracts/transactions-usage.rst:3
msgid ""
"In most cases, multi-document transaction incurs a greater performance "
"cost over single document writes, and the availability of multi-document "
"transaction should not be a replacement for effective schema design. For "
"many scenarios, the :ref:`denormalized data model (embedded documents and"
" arrays) <data-modeling-embedding>` will continue to be optimal for your "
"data and use cases. That is, for many scenarios, modeling your data "
"appropriately will minimize the need for multi-document transactions."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:30
msgid "Concurrency Control"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:32
msgid ""
"Concurrency control allows multiple applications to run concurrently "
"without causing data inconsistency or conflicts."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:35
msgid ""
"One approach is to create a :ref:`unique index <index-type-unique>` on a "
"field that can only have unique values. This prevents insertions or "
"updates from creating duplicate data. Create a unique index on multiple "
"fields to force uniqueness on that combination of field values. For "
"examples of use cases, see :ref:`update() and Unique Index <update-with-"
"unique-indexes>` and :ref:`findAndModify() and Unique Index <upsert-and-"
"unique-index>`."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:43
msgid ""
"Another approach is to specify the expected current value of a field in "
"the query predicate for the write operations."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:46
msgid ":doc:`/core/read-isolation-consistency-recency`"
msgstr ""

#~ msgid ""
#~ "Using the :update:`$isolated` operator, a "
#~ "write operation that affect multiple "
#~ "documents can prevent other processes "
#~ "from interleaving once the write "
#~ "operation modifies the first document. "
#~ "This ensures that no client sees "
#~ "the changes until the write operation"
#~ " completes or errors out."
#~ msgstr ""

#~ msgid ""
#~ "Isolated write operation does not "
#~ "provide \"all-or-nothing\" atomicity. "
#~ "That is, an error during the write"
#~ " operation does not roll back all "
#~ "its changes that preceded the error."
#~ msgstr ""

#~ msgid ""
#~ "An approach may be to create a "
#~ ":ref:`unique index <index-type-unique>` "
#~ "on a field (or fields) that should"
#~ " have only unique values (or unique"
#~ " combination of values) prevents duplicate"
#~ " insertions or updates that result in"
#~ " duplicate values. For examples of "
#~ "use cases, see :ref:`update() and Unique"
#~ " Index <update-with-unique-indexes>` "
#~ "and :ref:`findAndModify() and Unique Index "
#~ "<upsert-and-unique-index>`."
#~ msgstr ""

#~ msgid ""
#~ "Another approach is to specify the "
#~ "expected current value of a field "
#~ "in the query predicate for the "
#~ "write operations. For an example, see"
#~ " :doc:`Update if Current </tutorial/update-"
#~ "if-current>`."
#~ msgstr ""

#~ msgid ""
#~ "The two-phase commit pattern provides"
#~ " a variation where the query "
#~ "predicate includes the :ref:`application "
#~ "identifier <2-phase-commits-concurrency>` as"
#~ " well as the expected state of "
#~ "the data in the write operation."
#~ msgstr ""

#~ msgid ""
#~ "When a single write operation modifies"
#~ " multiple documents, the modification of"
#~ " each document is atomic, but the "
#~ "operation as a whole is not atomic"
#~ " and other operations may interleave. "
#~ "However, you can *isolate* a single "
#~ "write operation that affects multiple "
#~ "documents using the :update:`$isolated` "
#~ "operator."
#~ msgstr ""

#~ msgid "``$isolated`` Operator"
#~ msgstr ""

#~ msgid "The :update:`$isolated` operator does **not** work on sharded clusters."
#~ msgstr ""

#~ msgid ""
#~ "For an example of an update "
#~ "operation that uses the :update:`$isolated`"
#~ " operator, see :update:`$isolated`. For an"
#~ " example of a remove operation that"
#~ " uses the :update:`$isolated` operator, see"
#~ " :ref:`isolate-remove-operations`."
#~ msgstr ""

#~ msgid "Transaction-Like Semantics"
#~ msgstr ""

#~ msgid ""
#~ "Since a single document can contain "
#~ "multiple embedded documents, single-document"
#~ " atomicity is sufficient for many "
#~ "practical use cases. For cases where "
#~ "a sequence of write operations must "
#~ "operate as if in a single "
#~ "transaction, you can implement a :doc"
#~ ":`two-phase commit </tutorial/perform-two-"
#~ "phase-commits>` in your application."
#~ msgstr ""

#~ msgid ""
#~ "However, two-phase commits can only "
#~ "offer transaction-*like* semantics. Using "
#~ "two-phase commit ensures data consistency,"
#~ " but it is possible for applications"
#~ " to return intermediate data during "
#~ "the two-phase commit or rollback."
#~ msgstr ""

#~ msgid ""
#~ "For more information on two-phase "
#~ "commit and rollback, see :doc:`/tutorial"
#~ "/perform-two-phase-commits`."
#~ msgstr ""

#~ msgid "On this page"
#~ msgstr ""

#~ msgid ""
#~ "Using the :update:`$isolated` operator, a "
#~ "write operation that affects multiple "
#~ "documents can prevent other processes "
#~ "from interleaving once the write "
#~ "operation modifies the first document. "
#~ "This ensures that no client sees "
#~ "the changes until the write operation"
#~ " completes or errors out."
#~ msgstr ""

#~ msgid ""
#~ ":update:`$isolated` does **not** work with "
#~ ":term:`sharded clusters <sharded cluster>`."
#~ msgstr ""

#~ msgid ""
#~ "An isolated write operation does not "
#~ "provide \"all-or-nothing\" atomicity. "
#~ "That is, an error during the write"
#~ " operation does not roll back all "
#~ "its changes that preceded the error."
#~ msgstr ""

#~ msgid ""
#~ ":update:`$isolated` operator causes write "
#~ "operations to acquire an exclusive lock"
#~ " on the collection, *even for "
#~ "document-level locking storage engines* "
#~ "such as WiredTiger. That is, "
#~ ":update:`$isolated` operator will make "
#~ "WiredTiger single-threaded for the "
#~ "duration of the operation."
#~ msgstr ""

#~ msgid ""
#~ "Another approach is to specify the "
#~ "expected current value of a field "
#~ "in the query predicate for the "
#~ "write operations. The two-phase commit"
#~ " pattern provides a variation where "
#~ "the query predicate includes the "
#~ ":ref:`application identifier <2-phase-commits-"
#~ "concurrency>` as well as the expected"
#~ " state of the data in the write"
#~ " operation."
#~ msgstr ""

