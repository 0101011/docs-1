# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/data-model-design.txt:5
msgid "Data Model Design"
msgstr ""

#: ../source/core/data-model-design.txt:9
msgid ""
"Effective data models support your application needs. The key consideration "
"for the structure of your documents is the decision to :ref:`embed <data-"
"modeling-embedding>` or to :ref:`use references <data-modeling-"
"referencing>`."
msgstr ""

#: ../source/core/data-model-design.txt:17
msgid "Embedded Data Models"
msgstr ""

#: ../source/core/data-model-design.txt:19
msgid ""
"With MongoDB, you may embed related data in a single structure or document. "
"These schema are generally known as \"denormalized\" models, and take "
"advantage of MongoDB's rich documents. Consider the following diagram:"
msgstr ""

#: ../source/core/data-model-design.txt:26
msgid ""
"Embedded data models allow applications to store related pieces of "
"information in the same database record. As a result, applications may need "
"to issue fewer queries and updates to complete common operations."
msgstr ""

#: ../source/core/data-model-design.txt:30
msgid "In general, use embedded data models when:"
msgstr ""

#: ../source/core/data-model-design.txt:32
msgid ""
"you have \"contains\" relationships between entities. See :ref:`data-"
"modeling-example-one-to-one`."
msgstr ""

#: ../source/core/data-model-design.txt:35
msgid ""
"you have one-to-many relationships between entities. In these relationships "
"the \"many\" or child documents always appear with or are viewed in the "
"context of the \"one\" or parent documents.  See :ref:`data-modeling-"
"example-one-to-many`."
msgstr ""

#: ../source/core/data-model-design.txt:40
msgid ""
"In general, embedding provides better performance for read operations, as "
"well as the ability to request and retrieve related data in a single "
"database operation. Embedded data models make it possible to update related "
"data in a single atomic write operation."
msgstr ""

#: ../source/core/data-model-design.txt:45
msgid ""
"However, embedding related data in documents may lead to situations where "
"documents grow after creation. With the MMAPv1 storage engine, document "
"growth can impact write performance and lead to data fragmentation."
msgstr ""

#: ../source/core/data-model-design.txt:50
msgid ""
"In version 3.0.0, MongoDB uses :ref:`power-of-2-allocation` as the default "
"allocation strategy for MMAPv1 in order to account for document growth, "
"minimizing the likelihood of data fragmentation. See :ref:`power-"
"of-2-allocation` for details. Furthermore, documents in MongoDB must be "
"smaller than the :limit:`maximum BSON document size <BSON Document Size>`. "
"For bulk binary data, consider :doc:`GridFS </core/gridfs>`."
msgstr ""

#: ../source/core/data-model-design.txt:58
msgid ""
"To interact with embedded documents, use :term:`dot notation` to \"reach "
"into\" embedded documents. See :ref:`query for data in arrays <read-"
"operations-arrays>` and :ref:`query data in embedded documents <read-"
"operations-embedded-documents>` for more examples on accessing data in "
"arrays and embedded documents."
msgstr ""

#: ../source/core/data-model-design.txt:67
msgid "Normalized Data Models"
msgstr ""

#: ../source/core/data-model-design.txt:69
msgid ""
"Normalized data models describe relationships using :doc:`references "
"</reference/database-references>` between documents."
msgstr ""

#: ../source/core/data-model-design.txt:74
msgid "In general, use normalized data models:"
msgstr ""

#: ../source/core/data-model-design.txt:76
msgid ""
"when embedding would result in duplication of data but would not provide "
"sufficient read performance advantages to outweigh the implications of the "
"duplication."
msgstr ""

#: ../source/core/data-model-design.txt:80
msgid "to represent more complex many-to-many relationships."
msgstr ""

#: ../source/core/data-model-design.txt:82
msgid "to model large hierarchical data sets."
msgstr ""

#: ../source/core/data-model-design.txt:84
msgid ""
"References provides more flexibility than embedding. However, client-side "
"applications must issue follow-up queries to resolve the references. In "
"other words, normalized data models can require more round trips to the "
"server."
msgstr ""

#: ../source/core/data-model-design.txt:89
msgid ""
"See :ref:`data-modeling-publisher-and-books` for an example of referencing. "
"For examples of various tree models using references, see "
":doc:`/applications/data-models-tree-structures`."
msgstr ""

#: ../source/includes/extracts/additional-resources-data-model-design.rst:4
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-data-model-design.rst:6
msgid ""
"`Thinking in Documents Part 1 (Blog Post) <https://www.mongodb.com/blog/post"
"/thinking-documents-part-1?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-data-model-design.rst:7
msgid ""
"`Thinking in Documents (Presentation) <http://www.mongodb.com/presentations"
"/webinar-back-basics-1-thinking-documents?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-data-model-design.rst:8
msgid ""
"`Schema Design for Time Series Data (Presentation) "
"<http://www.mongodb.com/presentations/webinar-time-series-data-"
"mongodb?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-data-model-design.rst:9
msgid ""
"`Socialite, the Open Source Status Feed - Storing a Social Graph "
"(Presentation) <http://www.mongodb.com/presentations/socialite-open-source-"
"status-feed-part-2-managing-social-graph?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-data-model-design.rst:10
msgid ""
"`MongoDB Rapid Start Consultation Services "
"<https://www.mongodb.com/products/consulting?jmp=docs#rapid_start>`_"
msgstr ""
