# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/authorization.txt:5
msgid "Authorization"
msgstr ""

#: ../source/core/authorization.txt:9
msgid ""
"MongoDB employs Role-Based Access Control (RBAC) to govern access to a "
"MongoDB system. A user is granted one or more :ref:`roles <roles>` that "
"determine the user's access to database resources and operations. Outside of"
" role assignments, the user has no access to the system."
msgstr ""

#: ../source/core/authorization.txt:14
msgid ""
"MongoDB does not enable authorization by default. You can enable "
"authorization using the :option:`--auth` or the :option:`--keyFile` options,"
" or if using a configuration file, with the "
":setting:`security.authorization` or the :setting:`security.keyFile` "
"settings."
msgstr ""

#: ../source/core/authorization.txt:20
msgid ""
"MongoDB provides :doc:`built-in roles </reference/built-in-roles>`, each "
"with a dedicated purpose for a common use case. Examples include the "
":authrole:`read`, :authrole:`readWrite`, :authrole:`dbAdmin`, and "
":authrole:`root` roles."
msgstr ""

#: ../source/core/authorization.txt:25
msgid ""
"Administrators also can create new roles and privileges to cater to "
"operational needs. Administrators can assign privileges scoped as granularly"
" as the collection level."
msgstr ""

#: ../source/core/authorization.txt:29
msgid ""
"When granted a role, a user receives all the privileges of that role. A user"
" can have several roles concurrently, in which case the user receives the "
"union of all the privileges of the respective roles."
msgstr ""

#: ../source/core/authorization.txt:36
msgid "Roles"
msgstr ""

#: ../source/core/authorization.txt:38
msgid ""
"A role consists of privileges that pair resources with allowed operations. "
"Each privilege is specified explicitly in the role or inherited from another"
" role or both."
msgstr ""

#: ../source/includes/fact-roles-privileges-scope.rst:1
msgid ""
"Except for roles created in the ``admin`` database, a role can only include "
"privileges that apply to its database and can only inherit from other roles "
"in its database."
msgstr ""

#: ../source/includes/fact-roles-privileges-scope.rst:5
msgid ""
"A role created in the ``admin`` database can include privileges that apply "
"to the ``admin`` database, other databases or to the :ref:`cluster "
"<resource-cluster>` resource, and can inherit from roles in other databases "
"as well as the ``admin`` database."
msgstr ""

#: ../source/core/authorization.txt:44
msgid ""
"A user assigned a role receives all the privileges of that role. The user "
"can have multiple roles and can have different roles on different databases."
msgstr ""

#: ../source/core/authorization.txt:47
msgid ""
"Roles always grant privileges and never limit access. For example, if a user"
" has both :authrole:`read` *and* :authrole:`readWriteAnyDatabase` roles on a"
" database, the greater access prevails."
msgstr ""

#: ../source/core/authorization.txt:54
msgid "Privileges"
msgstr ""

#: ../source/core/authorization.txt:56
msgid ""
"A privilege consists of a specified resource and the actions permitted on "
"the resource."
msgstr ""

#: ../source/core/authorization.txt:59
msgid ""
"A privilege :doc:`resource </reference/resource-document>` is either a "
"database, collection, set of collections, or the cluster. If the cluster, "
"the affiliated actions affect the state of the system rather than a specific"
" database or collection."
msgstr ""

#: ../source/core/authorization.txt:64
msgid ""
"An :doc:`action </reference/privilege-actions>` is a command or method the "
"user is allowed to perform on the resource. A resource can have multiple "
"allowed actions. For available actions see :doc:`/reference/privilege-"
"actions`."
msgstr ""

#: ../source/core/authorization.txt:69
msgid ""
"For example, a privilege that includes the :authaction:`update` action "
"allows a user to modify existing documents on the resource. To additionally "
"grant the user permission to create documents on the resource, the "
"administrator would add the :authaction:`insert` action to the privilege."
msgstr ""

#: ../source/core/authorization.txt:75
msgid "For privilege syntax, see :data:`admin.system.roles.privileges`."
msgstr ""

#: ../source/core/authorization.txt:80
msgid "Inherited Privileges"
msgstr ""

#: ../source/core/authorization.txt:82
msgid ""
"A role can include one or more existing roles in its definition, in which "
"case the role inherits all the privileges of the included roles."
msgstr ""

#: ../source/core/authorization.txt:85
msgid ""
"A role can inherit privileges from other roles in its database. A role "
"created on the ``admin`` database can inherit privileges from roles in any "
"database."
msgstr ""

#: ../source/core/authorization.txt:91
msgid "User-Defined Roles"
msgstr ""

#: ../source/core/authorization.txt:95
msgid ""
"User administrators can create custom roles to ensure collection-level and "
"command-level granularity and to adhere to the policy of :term:`least "
"privilege`. Administrators create and edit roles using the :ref:`role "
"management commands <role-management-commands>`."
msgstr ""

#: ../source/core/authorization.txt:100
msgid ""
"MongoDB scopes a user-defined role to the database in which it is created "
"and uniquely identifies the role by the pairing of its name and its "
"database. MongoDB stores the roles in the ``admin`` database's "
":doc:`system.roles </reference/system-roles-collection>` collection. Do not "
"access this collection directly but instead use the :ref:`role management "
"commands <role-management-commands>` to view and edit custom roles."
msgstr ""

#: ../source/core/authorization.txt:108
msgid "Collection-Level Access Control"
msgstr ""

#: ../source/core/authorization.txt:110
msgid ""
"By creating a role with :ref:`privileges <privileges>` that are scoped to a "
"specific collection in a particular database, administrators can implement "
"collection-level access control."
msgstr ""

#: ../source/core/authorization.txt:114
msgid "See :doc:`/core/collection-level-access-control` for more information."
msgstr ""

#: ../source/core/authorization.txt:119
msgid "Users"
msgstr ""

#: ../source/core/authorization.txt:121
msgid ""
"MongoDB stores user credentials in the protected :data:`admin.system.users`."
" Use the :ref:`user management methods <user-management-methods>` to view "
"and edit user credentials."
msgstr ""

#: ../source/core/authorization.txt:127
msgid "Role Assignment to Users"
msgstr ""

#: ../source/core/authorization.txt:129
msgid ""
"User administrators create the users that access the system's databases. "
"MongoDB's :ref:`user management commands <user-management-commands>` let "
"administrators create users and assign them roles."
msgstr ""

#: ../source/core/authorization.txt:133
msgid ""
"MongoDB scopes a user to the database in which the user is created. MongoDB "
"stores all user definitions in the ``admin`` database, no matter which "
"database the user is scoped to. MongoDB stores users in the ``admin`` "
"database's :doc:`system.users collection </reference/system-users-"
"collection>`. Do not access this collection directly but instead use the "
":ref:`user management commands <user-management-commands>`."
msgstr ""

#: ../source/core/authorization.txt:141
msgid ""
"The first role assigned in a database should be either :authrole:`userAdmin`"
" or :authrole:`userAdminAnyDatabase`. This user can then create all other "
"users in the system. See :doc:`/tutorial/add-user-administrator`."
msgstr ""

#: ../source/core/authorization.txt:146
msgid "Protect the User and Role Collections"
msgstr ""

#: ../source/core/authorization.txt:148
msgid ""
"MongoDB stores role and user data in the protected "
":data:`admin.system.roles` and :data:`admin.system.users` collections, which"
" are only accessible using the :ref:`user management methods <user-"
"management-methods>`."
msgstr ""

#: ../source/core/authorization.txt:153
msgid ""
"If you disable access control, **do not** modify the "
":data:`admin.system.roles` and :data:`admin.system.users` collections using "
"normal :method:`~db.collection.insert()` and "
":method:`~db.collection.update()` operations."
msgstr ""

#: ../source/core/authorization.txt:159
msgid "Additional Information"
msgstr ""

#: ../source/core/authorization.txt:161
msgid ""
"See the reference section for documentation of all :doc:`built-in-roles "
"</reference/built-in-roles>` and all available :doc:`privilege actions "
"</reference/privilege-actions>`. Also consider the reference for the form of"
" the :doc:`resource documents </reference/resource-document>`."
msgstr ""

#: ../source/core/authorization.txt:166
msgid ""
"To create users see the :doc:`/tutorial/add-user-administrator` and "
":doc:`/tutorial/manage-users-and-roles` tutorials."
msgstr ""
