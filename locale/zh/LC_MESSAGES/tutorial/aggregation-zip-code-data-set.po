# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:3
msgid "Aggregation with the Zip Code Data Set"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:7
msgid ""
"The examples in this document use the ``zipcodes`` collection. This "
"collection is available at: `media.mongodb.org/zips.json "
"<http://media.mongodb.org/zips.json>`_. Use :program:`mongoimport` to load "
"this data set into your :program:`mongod` instance."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:13
msgid "Data Model"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:15
msgid "Each document in the ``zipcodes`` collection has the following form:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:30
msgid "The ``_id`` field holds the zip code as a string."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:32
msgid ""
"The ``city`` field holds the city name. A city can have more than one zip "
"code associated with it as different sections of the city can each have a "
"different zip code."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:36
msgid "The ``state`` field holds the two letter state abbreviation."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:38
msgid "The ``pop`` field holds the population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:40
msgid "The ``loc`` field holds the location as a latitude longitude pair."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:43
msgid "``aggregate()`` Method"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:45
msgid ""
"All of the following examples use the :method:`aggregate() "
"<db.collection.aggregate()>` helper in the :program:`mongo` shell."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:48
msgid ""
"The :method:`aggregate() <db.collection.aggregate()>` method uses the "
":ref:`aggregation pipeline <aggregation-pipeline>` to processes documents "
"into aggregated results. An :ref:`aggregation pipeline <aggregation-"
"pipeline>` consists of :ref:`stages <aggregation-pipeline-operator-"
"reference>` with each stage processing the documents as they pass along the "
"pipeline. Documents pass through the stages in sequence."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:56
msgid ""
"The :method:`aggregate() <db.collection.aggregate()>` method in the "
":program:`mongo` shell provides a wrapper around the :dbcommand:`aggregate` "
"database command. See the documentation for your :doc:`driver "
"</applications/drivers>` for a more idiomatic interface for data aggregation"
" operations."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:65
msgid "Return States with Populations above 10 Million"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:67
msgid ""
"The following aggregation operation returns all states with total population"
" greater than 10 million:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:77
msgid ""
"In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` "
"consists of the :pipeline:`$group` stage followed by the :pipeline:`$match` "
"stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:81
msgid ""
"The :pipeline:`$group` stage groups the documents of the ``zipcode`` "
"collection by the ``state`` field, calculates the ``totalPop`` field for "
"each state, and outputs a document for each unique state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:85
msgid ""
"The new per-state documents have two fields: the ``_id`` field and the "
"``totalPop`` field. The ``_id`` field contains the value of the ``state``; "
"i.e. the group by field. The ``totalPop`` field is a calculated field that "
"contains the total population of each state. To calculate the value, "
":pipeline:`$group` uses the :group:`$sum` operator to add the population "
"field (``pop``) for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:92
msgid ""
"After the :pipeline:`$group` stage, the documents in the pipeline resemble "
"the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:102
msgid ""
"The :pipeline:`$match` stage filters these grouped documents to output only "
"those documents whose ``totalPop`` value is greater than or equal to 10 "
"million. The :pipeline:`$match` stage does not alter the matching documents "
"but outputs the matching documents unmodified."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:107
msgid "The equivalent :term:`SQL` for this aggregation operation is:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:116
msgid ":pipeline:`$group`, :pipeline:`$match`, :group:`$sum`"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:119
msgid "Return Average City Population by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:121
msgid ""
"The following aggregation operation returns the average populations for "
"cities in each state:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:131
msgid ""
"In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` "
"consists of the :pipeline:`$group` stage followed by another "
":pipeline:`$group` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:135
msgid ""
"The first :pipeline:`$group` stage groups the documents by the combination "
"of ``city`` and ``state``, uses the :group:`$sum` expression to calculate "
"the population for each combination, and outputs a document for each "
"``city`` and ``state`` combination. [#multiple-zips-per-city]_"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:141
msgid ""
"After this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:154
msgid ""
"A second :pipeline:`$group` stage groups the documents in the pipeline by "
"the ``_id.state`` field (i.e. the ``state`` field inside the ``_id`` "
"document), uses the :group:`$avg` expression to calculate the average city "
"population (``avgCityPop``) for each state, and outputs a document for each "
"state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:160
msgid ""
"The documents that result from this aggregation operation resembles the "
"following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:170
msgid ":pipeline:`$group`, :group:`$sum`, :group:`$avg`"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:173
msgid "Return Largest and Smallest Cities by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:175
msgid ""
"The following aggregation operation returns the smallest and largest cities "
"by population for each state:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:210
msgid ""
"In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` "
"consists of a :pipeline:`$group` stage, a :program:`$sort` stage, another "
":pipeline:`$group` stage, and a :program:`$project` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:214
msgid ""
"The first :pipeline:`$group` stage groups the documents by the combination "
"of the ``city`` and ``state``, calculates the :group:`sum <$sum>` of the "
"``pop`` values for each combination, and outputs a document for each "
"``city`` and ``state`` combination."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:219
msgid "At this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:231
msgid ""
"The :pipeline:`$sort` stage orders the documents in the pipeline by the "
"``pop`` field value, from smallest to largest; i.e. by increasing order. "
"This operation does not alter the documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:235
msgid ""
"The next :pipeline:`$group` stage groups the now-sorted documents by the "
"``_id.state`` field (i.e. the ``state`` field inside the ``_id`` document) "
"and outputs a document for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:239
msgid ""
"The stage also calculates the following four fields for each state. Using "
"the :group:`$last` expression, the :pipeline:`$group` operator creates the "
"``biggestCity`` and ``biggestPop`` fields that store the city with the "
"largest population and that population. Using the :group:`$first` "
"expression, the :pipeline:`$group` operator creates the ``smallestCity`` and"
" ``smallestPop`` fields that store the city with the smallest population and"
" that population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:247
msgid "The documents, at this stage in the pipeline, resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:259
msgid ""
"The final :pipeline:`$project` stage renames the ``_id`` field to ``state`` "
"and moves the ``biggestCity``, ``biggestPop``, ``smallestCity``, and "
"``smallestPop`` into ``biggestCity`` and ``smallestCity`` embedded "
"documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:264
msgid ""
"The output documents of this aggregation operation resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:280
msgid ""
"A city can have more than one zip code associated with it as different "
"sections of the city can each have a different zip code."
msgstr ""
